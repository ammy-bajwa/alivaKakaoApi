{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","idb/messages.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","isSending","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","openDB","upgrade","db","createObjectStore","key","Object","prototype","hasOwnProperty","call","element","put","intId","messageDb","messages","forEach","displayUserList","nickname","logId","close","error","updateContactLogid","newLogId","myTaskPromise","getLatestContactLogid","get","value","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","newMessage","dbNotExists","newValue","data","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","deleteDB","length","sendAt","updatedLastMessageTimeStamp","latestTimeStamp","updatedTimePromise","getLastMessageTimeStamp","timeStamp","updateUserMessages","newMessages","dbItemKey","updateMessageLogs","userName","userId","loginUser","loadChat","setContactList","contactList","setSending","sending","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","latestLogId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","biggestChatLog","largestTimeStamp","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","refreshContactList","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","text","sender","receiverUser","attachment","receiverIntId","senderIntId","newMessageObj","received","info","messageStore","onerror","onclose","err","push","setItem","refreshToken","removeItem","myWorkingPromise","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","newChatCount","useSelector","onClick","src","profile","alt","ChatWindow","imageOnClickHandler","image","createElement","url","w","open","title","appendChild","href","useEffect","map","index","thumbnailUrl","width","height","moment","format","uploadFile","file","fileUploadPromise","FormData","append","MessageInput","useDispatch","setMessage","sendMessageHandler","userFileUpload","files","selectedFile","path","channelId","receiver","filePath","encType","autoFocus","accept","disabled","Messages","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","refreshMessages","focusedName","focusedUserId","items","item","profileURL","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c3ca8ba6.chunk.js","sourcesContent":["const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n  isSending: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"SET_SENDING\":\r\n      state = { ...state, isSending: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: state.chat.concat([{ receiverUserName, ...message, senderName }]),\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleContacts = async (contacts: any, email: number) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      for (const key in contacts) {\r\n        if (Object.prototype.hasOwnProperty.call(contacts, key)) {\r\n          const element = contacts[key];\r\n          await db.put(storeName, element, element.intId);\r\n          const messageDb = await openDB(`${email}_message_logs`, 1, {\r\n            upgrade(db) {\r\n              db.createObjectStore(\"myLogsData\");\r\n            },\r\n          });\r\n          element.messages.forEach(async (message: any) => {\r\n            const key = `${element.displayUserList[0].nickname}__${element.intId}__${message.logId}`;\r\n            await messageDb.put(\"myLogsData\", message, key);\r\n          });\r\n          messageDb.close();\r\n        }\r\n      }\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n\r\nexport const getContactListLogs = async (email: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve([]);\r\n      } else {\r\n        const storeKeys = await db.getAllKeys(storeName);\r\n        let contactList: any = {};\r\n        storeKeys.forEach(async (element) => {\r\n          const { lastChatLogId } = await db.get(storeName, element);\r\n          contactList[lastChatLogId] = { lastChatLogId };\r\n        });\r\n        db.close();\r\n        resolve(contactList);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateContactLogid = async (email: string, newLogId: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, newLogId, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const getLatestContactLogid = async (email: any) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const value = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(value);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n      db.createObjectStore(storeName);\r\n    },\r\n  });\r\n  const newValue = {\r\n    receiverUserName: newMessage.receiverUserName,\r\n    senderName: newMessage.senderName,\r\n    ...newMessage.message,\r\n  };\r\n  if (dbNotExists) {\r\n    await db.put(storeName, [newValue], key);\r\n    db.close();\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      let dbNotExists = false;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          dbNotExists = true;\r\n        },\r\n      });\r\n      if (dbNotExists) {\r\n        resolve({\r\n          allMessages: [],\r\n          lastMessageTimeStamp: 0,\r\n          logId: 0,\r\n        });\r\n        db.close();\r\n        await deleteDB(dbName);\r\n      } else {\r\n        const data = await db.get(storeName, key);\r\n        resolve({\r\n          allMessages: data || [],\r\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\r\n          logId: data[data.length - 1].logId || 0,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n  return await getLastMessagePromise;\r\n};\r\n\r\nexport const updatedLastMessageTimeStamp = async (\r\n  email: string,\r\n  latestTimeStamp: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, latestTimeStamp, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getLastMessageTimeStamp = async (email: string) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const timeStamp = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(timeStamp);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const updateUserMessages = async (\r\n  loggedInUserId: number,\r\n  newMessages: any\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      for (const key in newMessages) {\r\n        if (Object.prototype.hasOwnProperty.call(newMessages, key)) {\r\n          const { intId, messages } = newMessages[key];\r\n          const dbName = SHA256(\r\n            `KAKAOCHAT${loggedInUserId}${intId}`\r\n          ).toString();\r\n          const storeName = \"MessageStore\";\r\n          const dbItemKey = \"messages\";\r\n          let dbNotExists = false;\r\n          const db = await openDB(dbName, 1, {\r\n            upgrade(db) {\r\n              dbNotExists = true;\r\n              db.createObjectStore(storeName);\r\n            },\r\n          });\r\n          if (dbNotExists) {\r\n            await db.put(storeName, messages, dbItemKey);\r\n            db.close();\r\n          } else {\r\n            const data = await db.get(storeName, dbItemKey);\r\n            const value = data.concat(messages);\r\n            await db.put(storeName, value, dbItemKey);\r\n            db.close();\r\n          }\r\n        }\r\n      }\r\n      resolve(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateMessageLogs = async (\r\n  email: string,\r\n  userName: string,\r\n  userId: number,\r\n  message: any,\r\n  logId: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = `${email}_message_logs`;\r\n      const storeName = \"myLogsData\";\r\n      const key = `${userName}__${userId}__${logId}`;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, message, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n","export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n\r\nexport const setContactList = (contactList: any) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n\r\nexport const setSending = (sending: boolean) => ({\r\n  type: \"SET_SENDING\",\r\n  payload: sending,\r\n});\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleContacts, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  updatedLastMessageTimeStamp,\r\n  updateUserMessages,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string,\r\n  lastMessageTimeStamp: any,\r\n  latestLogId: any\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        startLoading();\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n            lastMessageTimeStamp,\r\n            latestLogId,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        stopLoading();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          await handleContacts(result.chatList, result.email);\r\n          await updateUserMessages(result.loggedInUserId, result.chatList);\r\n          await updateContactLogid(email, result.biggestChatLog);\r\n          console.log(\"result: \", result);\r\n          await updatedLastMessageTimeStamp(\r\n            result.email,\r\n            result.largestTimeStamp\r\n          );\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    // startLoading();\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/contact`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/contact\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    // stopLoading();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { chatList } = result.data;\r\n      resolve(chatList);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const {\r\n    user: { chatList, email },\r\n  } = await store.getState();\r\n  if (!chatList[senderName] && !chatList[receiverUserName]) {\r\n    const contactList = await getChatList(loggedInUserEmail);\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, email);\r\n  }\r\n};\r\n\r\nexport const isInContact = async (name: any) => {\r\n  const isInContactPromise = new Promise(async (resolve, reject) => {\r\n    const { user: chatList } = await store.getState();\r\n    if (!chatList[name]) {\r\n      resolve(false);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await isInContactPromise;\r\n};\r\n\r\nexport const refreshContactList = async () => {\r\n  const {\r\n    user: { email },\r\n  } = await store.getState();\r\n  const contactList = await getChatList(email);\r\n  store.dispatch(setContactList(contactList));\r\n  await handleContacts(contactList, email);\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import { tryLoginApi } from \"../api/user\";\r\nimport { getLatestContactLogid, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  addNewMessageIdb,\r\n  getLastMessageTimeStamp,\r\n  updatedLastMessageTimeStamp,\r\n  updateMessageLogs,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loginUser, newMessage, setSending, setWs } from \"../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { port } from \"./config\";\r\nimport { handleContactList, isInContact, refreshContactList } from \"./contact\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\nimport { info } from \"./toast\";\r\n\r\nexport const loginHandler = async (\r\n  isKeepLogin: any,\r\n  token: any,\r\n  dispatch: any,\r\n  history: any\r\n) => {\r\n  const myWorkingPromise = await new Promise(async (resolve, reject) => {\r\n    if (isKeepLogin && !token) {\r\n      const { email, password } = JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const contactListLogs = await getContactListLogs(email);\r\n        // console.log(\"contactListLogs: \", contactListLogs);\r\n        const lastMessageTimeStamp = await getLastMessageTimeStamp(email);\r\n        const latestLogId = await getLatestContactLogid(email);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId,\r\n          lastMessageTimeStamp,\r\n          latestLogId\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, logId, sendAt, attachment } =\r\n                data;\r\n              console.log(\"newMesssage: \", data);\r\n              const { nickname: receiverUserName, intId: receiverIntId } =\r\n                receiverUser;\r\n              const { nickname: senderName, intId: senderIntId } = sender;\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt, logId },\r\n                senderName,\r\n              };\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              await updateContactLogid(email, logId);\r\n              const { currentFocus } = await store.getState();\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                dispatch(setSending(false));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await refreshContactList();\r\n              const isInContactExists = await isInContact(senderName);\r\n              if (isInContactExists) {\r\n                await updateMessageLogs(\r\n                  email,\r\n                  receiverUserName,\r\n                  receiverIntId,\r\n                  newMessageObj,\r\n                  logId\r\n                );\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  receiverIntId,\r\n                  newMessageObj\r\n                );\r\n              } else {\r\n                if (senderIntId === user.loggedInUserId) {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    receiverUserName,\r\n                    receiverIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    receiverIntId,\r\n                    newMessageObj\r\n                  );\r\n                } else {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    senderName,\r\n                    senderIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    senderIntId,\r\n                    newMessageObj\r\n                  );\r\n                }\r\n                await updatedLastMessageTimeStamp(email, sendAt);\r\n              }\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        stopLoading();\r\n        history.push(\"/\");\r\n        resolve(true);\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n        reject(true);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await myWorkingPromise;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        await loginHandler(\r\n          JSON.stringify({ email, password }),\r\n          null,\r\n          dispatch,\r\n          history\r\n        );\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [isLoadingSend, setLoadingSend] = useState(false);\r\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      setLoadingSend(true);\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      setLoadingSend(false);\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingSend(false);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      setLoadingRegister(true);\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      setLoadingRegister(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingRegister(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            onInput={(event: any) => setDeviceName(event.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingSend ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send Code\"\r\n          )}\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingRegister ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Register\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({\r\n  name,\r\n  profileImage,\r\n  newChatCount,\r\n  onClickHandler,\r\n}: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div>\r\n        <img\r\n          src={profileImage ? profileImage : profile}\r\n          className=\"rounded-circle profileWidth\"\r\n          alt=\"profileImage\"\r\n        />\r\n        <h3 className=\"d-inline contactName\">{name}</h3>\r\n      </div>\r\n      {/* {newChatCount > 0 && currentFocus !== name && (\r\n        <div>\r\n          <h3 className=\"d-inline contactName text-danger\">({newChatCount})</h3>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\n// import { deleteDB, openDB } from \"idb\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { convertFileToBase64 } from \"../../helpers/file\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = (props: any) => {\r\n  function convertImgToBase64URL(url: any, callback: any) {\r\n    var img = document.createElement(\"img\");\r\n    img.crossOrigin = \"Anonymous\";\r\n    img.onload = function () {\r\n      var canvas: any = document.createElement(\"CANVAS\"),\r\n        ctx = canvas.getContext(\"2d\"),\r\n        dataURL;\r\n      canvas.height = img.height;\r\n      canvas.width = img.width;\r\n      ctx.drawImage(img, 0, 0);\r\n      dataURL = canvas.toDataURL();\r\n      callback(dataURL);\r\n      canvas = null;\r\n    };\r\n    img.src = url;\r\n  }\r\n\r\n  const { chat, currentFocus } = useSelector((state: any) => {\r\n    const { chat, currentFocus } = state;\r\n    // chat.sort((a: any, b: any) => {\r\n    //   return a.sendAt - b.sendAt;\r\n    // });\r\n    // chat.map(async (messageObj: any) => {\r\n    //   console.log(\"fired\");\r\n    //   if (\r\n    //     messageObj.text === \"photo\" &&\r\n    //     messageObj.attachment &&\r\n    //     messageObj.attachment.thumbnailUrl\r\n    // ) {\r\n    // console.log(\"messageObj: \", messageObj);\r\n    // convertImgToBase64URL(\r\n    //   messageObj.attachment.thumbnailUrl,\r\n    //   function (base64Img: any) {\r\n    //     console.log(\"Called\");\r\n    //     console.log(base64Img);\r\n    //   }\r\n    // );\r\n    // const result = await fetch(\r\n    //   `https://cors-anywhere.herokuapp.com/${messageObj.attachment.thumbnailUrl}`\r\n    // );\r\n    // const reader = result.body?.getReader();\r\n    // // const blob = await result.blob();\r\n    // while (true) {\r\n    //   const { value, done }: any = await reader?.read();\r\n    //   // console.log(\"value: \", value);\r\n    //   console.log(\"value: \", value);\r\n    //   const myBlob = new Blob([value]);\r\n    //   var decoder = new TextDecoder(\"utf8\");\r\n    //   var base64String = btoa(decoder.decode(value));\r\n\r\n    //   messageObj.data = base64String;\r\n    //   // console.log(\"reader: \", messageObj.data);\r\n    //   console.log(\"value2: \", URL.createObjectURL(myBlob));\r\n\r\n    //   if (done) {\r\n    //     break;\r\n    //   }\r\n    // }\r\n    // console.log(\"img blob: \", await result.body);\r\n    // const result64 = await convertFileToBase64(blob);\r\n    // const db = await openDB(messageObj.attachment.thumbnailUrl, 1, {\r\n    //   upgrade(db) {\r\n    //     db.createObjectStore(\"blob\");\r\n    //   },\r\n    // });\r\n    // await db.put(\"blob\", blob, 1);\r\n    // db.close();\r\n    // console.log(\"BlobImage123\", blob);\r\n    // console.log(\"result64: \", result64.length);\r\n    // const { data } = await axios({\r\n    //   method: \"get\",\r\n    //   url: `https://cors-anywhere.herokuapp.com/${messageObj.attachment.thumbnailUrl}`,\r\n    //   headers: {},\r\n    // });\r\n    //   }\r\n    //   return messageObj;\r\n    // });\r\n\r\n    return { chat, currentFocus };\r\n  });\r\n\r\n  const imageOnClickHandler = async (message: any) => {\r\n    let image = document.createElement(\"img\");\r\n    image.src = message.attachment.url;\r\n    let w: any = window.open(\"\", \"_blank\");\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.body.appendChild(image);\r\n    w.location.href = message.attachment.url;\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToEndMessages();\r\n  }, [chat]);\r\n\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      <h1>Chat Window</h1>\r\n      {chat.length > 0\r\n        ? chat.map((message: any, index: number) => (\r\n            <div\r\n              key={index}\r\n              className={`text-light p-1 w-100 d-flex flex-row ${\r\n                currentFocus === message.receiverUserName\r\n                  ? \"justify-content-end\"\r\n                  : \"justify-content-start\"\r\n              }`}\r\n            >\r\n              <div\r\n                className={`border border-dark rounded p-1 ${\r\n                  currentFocus === message.receiverUserName\r\n                    ? \"receiverMessage\"\r\n                    : \"senderMessage\"\r\n                }`}\r\n              >\r\n                {message.text === \"photo\" &&\r\n                  message.attachment &&\r\n                  message.attachment.thumbnailUrl && (\r\n                    <img\r\n                      loading=\"lazy\"\r\n                      alt=\"userImages\"\r\n                      // src={message.attachment.thumbnailUrl}\r\n                      src={message.data}\r\n                      onClick={() => imageOnClickHandler(message)}\r\n                      className=\"hoverPointer p-1\"\r\n                      // onLoad={\r\n                      // (event: any) => {\r\n                      // var canvas = document.createElement(\"canvas\");\r\n                      // canvas.width = event.target.width;\r\n                      // canvas.height = event.target.height;\r\n                      // var ctx: any = canvas.getContext(\"2d\");\r\n                      // ctx.drawImage(event.target, 0, 0);\r\n                      // var dataURL = canvas.toDataURL(\"image/png\");\r\n                      // console.log(\r\n                      //   dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\")\r\n                      // );\r\n                      // }\r\n                      // }\r\n                      width=\"90\"\r\n                      height=\"90\"\r\n                    />\r\n                  )}\r\n                {message.text !== \"photo\" &&\r\n                  (!message?.attachment ||\r\n                    !message.attachment?.thumbnailUrl) && (\r\n                    <span className=\"m-1 text-wrap\">{message.text} </span>\r\n                  )}\r\n                <span className=\"small bg-secondary makeItLight rounded p-1\">\r\n                  {console.log(message.sendAt)}\r\n                  {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        : \"Message Will Be Here\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\n// import { errors } from \"../../helpers/errorCodes\";\r\nimport { error } from \"../../helpers/toast\";\r\nimport { setSending } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  // const loggedInUserId = useSelector((state: any) => state.loggedInUserId);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const isSending = useSelector((state: any) => state.isSending);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      // const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      dispatch(setSending(true));\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n          }\r\n        }\r\n        userFileUpload.value = \"\";\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      error(\"Error in sending message\");\r\n      dispatch(setSending(false));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={isSending ? true : false}\r\n          className=\"btn btn-outline-light mt-2\"\r\n          type=\"submit\"\r\n        >\r\n          {isSending ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { port } from \"../helpers/config\";\r\n// import { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: any,\r\n  lastChatLogId: any,\r\n  logId: any\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email,\r\n        nickNameToGetChat,\r\n        lastMessageTimeStamp,\r\n        lastChatLogId,\r\n        startChatLogId: logId,\r\n      }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = result.data;\r\n      resolve({ userId, messages });\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getUserChat } from \"../api/chat\";\r\nimport { getLatestContactLogid } from \"../idb/contacts\";\r\nimport { handleIncommingMessages, lastDbMessageTime } from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\n\r\nexport const refreshMessages = async (focusedName: string) => {\r\n  try {\r\n    const { loggedInUserId, user }: any = await store.getState();\r\n    const { dispatch } = store;\r\n    const lastChatLogId = getLatestContactLogid(user.email);\r\n    const focusedUserId = user.chatList[focusedName]?.intId;\r\n    dispatch(setFocusUser(focusedName));\r\n    const { allMessages, lastMessageTimeStamp, logId }: any =\r\n      await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n    // console.log(\"Fired\");\r\n    // console.log(lastMessageTimeStamp);\r\n    const { messages }: any = await getUserChat(\r\n      user.email,\r\n      focusedName,\r\n      lastMessageTimeStamp,\r\n      lastChatLogId,\r\n      logId\r\n    );\r\n    console.log(\"allMessages\", allMessages);\r\n    dispatch(loadChat([...messages, ...allMessages]));\r\n    await handleIncommingMessages(\r\n      [...messages, ...allMessages],\r\n      loggedInUserId,\r\n      focusedUserId\r\n    );\r\n    scrollToEndMessages();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { refreshContactList } from \"../../helpers/contact\";\r\nimport { refreshMessages } from \"../../helpers/messages\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const onClickHandler = async (name: string) => {\r\n    await refreshMessages(name);\r\n    await refreshContactList();\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            newChatCount={item.newChatCount}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(item.displayUserList[0].nickname);\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = () => {\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n    ws.close();\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n// import { getImg } from \"../../api/media\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    try {\r\n      await loginHandler(isKeepLogin, token, dispatch, history);\r\n    } catch (error) {}\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n              {/* <li>\r\n                <button onClick={getImg}>getImg</button>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, loading, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      console.log(\"token: \", token);\r\n      if (!token && !loading) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import ReactLoading from \"react-loading\";\r\n\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"loadingContainer\">\r\n    <ReactLoading\r\n      className=\"setMarginLoading\"\r\n      type=\"spin\"\r\n      color=\"white\"\r\n      height={\"2%\"}\r\n      width={\"2%\"}\r\n    />\r\n    <h1 className=\"m-3\">Loading.....</h1>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\nimport Loading from \"../components/loading/loading\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ToastContainer />\r\n          <Navbar />\r\n          {loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <Private exact path=\"/\" component={Home} />\r\n              <Public exact path=\"/login\" component={Login} />\r\n              <Public exact path=\"/register\" component={RegisterDevice} />\r\n            </>\r\n          )}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { store } from \"./redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Router from \"./routes\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}