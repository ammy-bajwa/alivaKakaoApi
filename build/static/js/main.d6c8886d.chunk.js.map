{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","idb/messages.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","helpers/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","key","openDB","upgrade","db","createObjectStore","put","close","error","loginUser","newMessage","data","loadChat","messages","setContactList","contactList","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","dbNotExists","newValue","get","value","concat","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","logId","deleteDB","length","sendAt","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","success","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","text","sender","receiverUser","attachment","nickname","receiverIntId","intId","senderIntId","newMessageObj","received","info","userId","messageStore","onerror","onclose","err","push","setItem","refreshToken","removeItem","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","useSelector","onClick","src","profile","alt","ChatWindow","sort","b","forEach","messageObj","thumbnailUrl","imageOnClickHandler","image","createElement","url","w","open","title","appendChild","href","useEffect","map","index","width","height","moment","format","uploadFile","file","fileUploadPromise","FormData","append","convertFileToBase64","base64Promise","reader","FileReader","onload","e","readAsDataURL","MessageInput","useDispatch","setMessage","sendMessageHandler","Date","getTime","userFileUpload","files","Object","prototype","hasOwnProperty","call","selectedFile","base64","path","channelId","receiver","filePath","encType","accept","Messages","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","refreshMessages","focusedName","focusedUserId","items","item","displayUserList","profileURL","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d6c8886d.chunk.js","sourcesContent":["const initialState = {\n  user: {\n    email: \"\",\n    chatList: {},\n    accessToken: \"\",\n  },\n  loggedInUserId: \"\",\n  chat: [],\n  currentFocus: \"\",\n  ws: null,\n  loading: false,\n};\n\nexport const userReducer = function (state: any = initialState, action: any) {\n  switch (action.type) {\n    case \"LOGIN\":\n      console.log(action);\n      state = {\n        ...state,\n        user: {\n          email: action.payload.email,\n          chatList: action.payload.chatList,\n          accessToken: action.payload.accessToken,\n        },\n        loggedInUserId: action.payload.loggedInUserId,\n        chat: [],\n      };\n      return state;\n    case \"LOGOUT\":\n      state = {\n        ...state,\n        user: {\n          email: \"\",\n          chatList: {},\n          accessToken: \"\",\n        },\n      };\n      return state;\n    case \"LOAD_CHAT\":\n      state = { ...state, chat: action.payload };\n      return state;\n    case \"START_LOADING\":\n      state = { ...state, loading: true };\n      return state;\n    case \"STOP_LOADING\":\n      state = { ...state, loading: false };\n      return state;\n    case \"SET_FOCUSED_USER\":\n      state = { ...state, currentFocus: action.payload };\n      return state;\n    case \"SET_WS\":\n      state = { ...state, ws: action.payload };\n      return state;\n    case \"SET_CONTACT_LIST\":\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\n      return state;\n    case \"NEW_MESSAGE\":\n      const { receiverUserName, message, senderName } = action.payload;\n      state = {\n        ...state,\n        chat: [...state.chat, { receiverUserName, ...message, senderName }],\n      };\n      return state;\n    default:\n      return state;\n  }\n};\n","import { compose, createStore } from \"redux\";\nimport { userReducer } from \"./reducer/user\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(userReducer, composeEnhancers());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const errors: any = {\n  \"12\": \"LOGIN_FAILED_REASON\",\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\n  \"30\": \"LOGIN_FAILED\",\n  \"32\": \"MOBILE_UNREGISTERED\",\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\n  \"-101\": \"ANOTHER_LOGON\",\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\n  \"-111\": \"INCORRECT_PASSCODE\",\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\n  \"-997\": \"ACCOUNT_RESTRICTED\",\n};\n","import { SHA256 } from \"crypto-js\";\nimport { openDB } from \"idb\";\n\nexport const handleContacts = async (contacts: any, loggedInUserId: number) => {\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(`KAKAOCONTACTS${loggedInUserId}`).toString();\n      const storeName = \"ContactStore\";\n      const key = \"contacts\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, contacts, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await contactsHandlerPromise;\n};\n","export const loginUser = (user: any) => ({\n  type: \"LOGIN\",\n  payload: user,\n});\n\nexport const logoutUser = () => ({\n  type: \"LOGOUT\",\n});\n\nexport const setFocusUser = (name: string) => ({\n  type: \"SET_FOCUSED_USER\",\n  payload: name,\n});\n\nexport const setWs = (ws: any) => ({\n  type: \"SET_WS\",\n  payload: ws,\n});\n\nexport const newMessage = (data: any) => {\n  return {\n    type: \"NEW_MESSAGE\",\n    payload: data,\n  };\n};\n\nexport const loadChat = (messages: any) => ({\n  type: \"LOAD_CHAT\",\n  payload: messages,\n});\n\nexport const setStartLoading = () => ({\n  type: \"START_LOADING\",\n});\n\nexport const setStopLoading = () => ({\n  type: \"STOP_LOADING\",\n});\n\nexport const setContactList = (contactList: any) => ({\n  type: \"SET_CONTACT_LIST\",\n  payload: contactList,\n});\n","import { store } from \"../redux\";\n\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\n\nexport const startLoading = () => {\n  store.dispatch(setStartLoading());\n};\n\nexport const stopLoading = () => {\n  store.dispatch(setStopLoading());\n};\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const tryLoginApi = async (\n  email: string,\n  password: string,\n  deviceName: string,\n  deviceId: string\n) => {\n  const loginPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      console.log(\"accessToken: \", accessToken);\n      if (!accessToken) {\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            email,\n            password,\n            deviceName,\n            deviceId,\n          }),\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/login`;\n        } else {\n          // production code\n          apiEndPoint = \"/login\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        stopLoading();\n        if (result.error) {\n          let errorMessage = errors[`${result.error}`];\n          if (!errorMessage) {\n            errorMessage = result.message;\n          }\n          alert(errorMessage);\n          console.log(\"result errorMessage: \", errorMessage);\n          reject(errorMessage);\n        } else {\n          console.log(\"result: \", result);\n          await handleContacts(result.chatList, result.loggedInUserId);\n          resolve(result);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n  return await loginPromise;\n};\n","import { SHA256 } from \"crypto-js\";\n\nimport { deleteDB, openDB } from \"idb\";\n\nexport const handleIncommingMessages = async (\n  messages: any,\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, messages, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await messageHandlerPromise;\n};\n\nexport const getUserMessages = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n    },\n  });\n\n  if (dbNotExists) {\n    db.close();\n    await deleteDB(dbName);\n    return;\n  } else {\n    const data = await db.get(storeName, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const addNewMessageIdb = async (\n  loggedInUserId: number,\n  otherUserId: number,\n  newMessage: any\n) => {\n  console.log(\"loggedInUserId: \", loggedInUserId);\n  console.log(\"otherUserId: \", otherUserId);\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n      db.createObjectStore(storeName);\n    },\n  });\n  const newValue = {\n    receiverUserName: newMessage.receiverUserName,\n    senderName: newMessage.senderName,\n    ...newMessage.message,\n  };\n  if (dbNotExists) {\n    await db.put(storeName, [newValue], key);\n    db.close();\n    return;\n  } else {\n    const data = await db.get(storeName, key);\n    const value = data.concat([newValue]);\n    await db.put(storeName, value, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const lastDbMessageTime = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      let dbNotExists = false;\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          dbNotExists = true;\n        },\n      });\n      if (dbNotExists) {\n        resolve({\n          allMessages: [],\n          lastMessageTimeStamp: 0,\n          logId: 0,\n        });\n        db.close();\n        await deleteDB(dbName);\n      } else {\n        const data = await db.get(storeName, key);\n        resolve({\n          allMessages: data || [],\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\n          logId: data[data.length - 1].logId || 0,\n        });\n      }\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n  return await getLastMessagePromise;\n};\n","import { port } from \"../helpers/config\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const getChatList = async (email: string) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/contact`;\n    } else {\n      // production code\n      apiEndPoint = \"/contact\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { chatList } = result.data;\n      resolve(chatList);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { getChatList } from \"../api/contact\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { setContactList } from \"../redux/action/user\";\n\nexport const handleContactList = async (\n  senderName: string,\n  receiverUserName: string,\n  loggedInUserEmail: string\n) => {\n  const { user: chatList, loggedInUserId } = await store.getState();\n  if (!chatList[senderName] || !chatList[receiverUserName]) {\n    const contactList = await getChatList(loggedInUserEmail);\n    store.dispatch(setContactList(contactList));\n    await handleContacts(chatList, loggedInUserId);\n  }\n};\n\nexport const isInContact = async (name: any) => {\n  const isInContactPromise = new Promise(async (resolve, reject) => {\n    const { user: chatList } = await store.getState();\n    if (!chatList[name]) {\n      resolve(false);\n    } else {\n      resolve(true);\n    }\n  });\n  return await isInContactPromise;\n};\n","export const scrollToEndMessages = () => {\n  const messageElement = document.getElementById(\n    \"messageContainer\"\n  ) as HTMLElement;\n  messageElement.scrollTop = messageElement.scrollHeight;\n};\n","import { toast } from \"react-toastify\";\n\nexport const success = (message: string) => toast.success(message);\n\nexport const info = (message: string) => toast.info(message);\n\nexport const error = (message: string) => toast.error(message);\n","import { tryLoginApi } from \"../api/user\";\nimport { addNewMessageIdb } from \"../idb/messages\";\nimport { store } from \"../redux\";\nimport { loginUser, newMessage, setWs } from \"../redux/action/user\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\nimport { port } from \"./config\";\nimport { handleContactList, isInContact } from \"./contact\";\nimport { scrollToEndMessages } from \"./scroll\";\nimport { info } from \"./toast\";\n\nexport const loginHandler = async (\n  isKeepLogin: any,\n  token: any,\n  dispatch: any,\n  history: any\n) => {\n  if (isKeepLogin && !token) {\n    const { email, password } = JSON.parse(isKeepLogin);\n    const deviceData: any = localStorage.getItem(email);\n    try {\n      startLoading();\n      const { deviceName, deviceId } = JSON.parse(deviceData);\n      // const lastMessages = await getLastMessageTime();\n      const user: any = await tryLoginApi(\n        email,\n        password,\n        deviceName,\n        deviceId\n      );\n      let wsEndPoint = \"\";\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n        // dev code\n        wsEndPoint = `ws://localhost:${port}`;\n      } else {\n        // production code\n        wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\n      }\n      const socket = new WebSocket(wsEndPoint);\n      socket.onopen = () => {\n        console.log(\"Socket is open\");\n        socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\n        dispatch(setWs(socket));\n      };\n      socket.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          const { key } = data;\n          if (key === \"newMesssage\") {\n            const { text, sender, receiverUser, sendAt, attachment } = data;\n            const { nickname: receiverUserName, intId: receiverIntId } =\n              receiverUser;\n            const { nickname: senderName, intId: senderIntId } = sender;\n            const newMessageObj = {\n              receiverUserName,\n              message: { attachment, text, received: true, sendAt },\n              senderName,\n            };\n            const { currentFocus } = await store.getState();\n            await handleContactList(senderName, receiverUserName, email);\n            if (\n              currentFocus === senderName ||\n              currentFocus === receiverUserName\n            ) {\n              dispatch(newMessage(newMessageObj));\n              scrollToEndMessages();\n            } else {\n              info(`New Message From ${senderName} to ${receiverUserName}`);\n            }\n            const isInContactExists = await isInContact(senderName);\n            if (isInContactExists) {\n              await addNewMessageIdb(\n                user.loggedInUserId,\n                receiverIntId,\n                newMessageObj\n              );\n            } else {\n              if (senderIntId === user.loggedInUserId) {\n                await addNewMessageIdb(\n                  user.loggedInUserId,\n                  receiverIntId,\n                  newMessageObj\n                );\n              } else {\n                await addNewMessageIdb(\n                  user.loggedInUserId,\n                  senderIntId,\n                  newMessageObj\n                );\n              }\n            }\n          } else if (key === \"unreadMessages\") {\n            const { userId, messageStore } = data.value;\n            console.log(userId, messageStore);\n          }\n        } catch (error) {\n          console.log(error);\n          stopLoading();\n          console.log(\"We have a message: \", event.data);\n        }\n      };\n      socket.onerror = () => {\n        alert(\"Socket has error\");\n      };\n      socket.onclose = (err) => {\n        alert(\"Socket is closed\");\n        console.log(err);\n        history.push(\"/login\");\n      };\n      dispatch(loginUser(user));\n      localStorage.setItem(\n        \"token\",\n        JSON.stringify({\n          accessToken: user.accessToken,\n          refreshToken: user.accessToken,\n          email,\n          password,\n        })\n      );\n      stopLoading();\n      history.push(\"/\");\n    } catch (error) {\n      stopLoading();\n      localStorage.removeItem(\"token\");\n      history.push(\"/login\");\n      console.error(error);\n    }\n  } else {\n    console.log(\"Acoided +++++++++++++++++++\");\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { loginHandler } from \"../../helpers/loginHandler\";\n\nclass Login extends React.Component<any> {\n  loginFormHandler = async (event: any) => {\n    const { history, dispatch }: any = this.props;\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const deviceData = localStorage.getItem(email);\n    if (!deviceData) {\n      alert(\"Please register device first\");\n    } else {\n      try {\n        await loginHandler(\n          JSON.stringify({ email, password }),\n          null,\n          dispatch,\n          history\n        );\n        history.push(\"/\");\n      } catch (error) {\n        console.error(error);\n        history.push(\"/login\");\n      }\n    }\n  };\n  render() {\n    return (\n      <>\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userEmail\" className=\"form-label\">\n              Email address\n            </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"userEmail\"\n              required\n              aria-describedby=\"emailHelp\"\n            />\n            <div id=\"emailHelp\" className=\"form-text\">\n              We'll never share your email with anyone else.\n            </div>\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userPassword\" className=\"form-label\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              autoComplete=\"true\"\n              required\n              id=\"userPassword\"\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n            Login\n          </button>\n          <Link to=\"/register\">\n            <button type=\"submit\" className=\"btn btn-outline-info\">\n              Register Device\n            </button>\n          </Link>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    chatList: state.user.chatList,\n    currentFocus: state.currentFocus,\n  };\n};\nexport default connect(mapStateToProps)(withRouter(Login));\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\n\nexport const trySendDeviceRegisterApi = async (\n  deviceName: string,\n  deviceId: string,\n  email: string,\n  password: string\n) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\n  };\n  let apiEndPoint = \"\";\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n    // dev code\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\n  } else {\n    // production code\n    apiEndPoint = \"/device/sendCode\";\n  }\n  let result: any = await fetch(apiEndPoint, requestOptions);\n  result = await result.json();\n  if (result.error) {\n    const errorMessage = result.message;\n    alert(errorMessage);\n    console.log(\"result: \", errorMessage);\n  } else {\n    alert(result.message);\n    console.log(result.message);\n  }\n};\n\nexport const trySetDeviceRegisterApi = async (\n  code: string,\n  email: string,\n  password: string\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ code, email, password }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\n    } else {\n      // production code\n      apiEndPoint = \"/device/setCode\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    if (result.error) {\n      let errorMessage = errors[`${result.error}`];\n      if (!errorMessage) {\n        errorMessage = result.message;\n      }\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      resolve(result.message);\n      alert(result.message);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { v4 as randomId } from \"uuid\";\nimport {\n  trySendDeviceRegisterApi,\n  trySetDeviceRegisterApi,\n} from \"../../api/device\";\n\nconst RegisterDevice = () => {\n  const history = useHistory();\n\n  const [deviceName, setDeviceName] = useState(\"\");\n  const [isLoadingSend, setLoadingSend] = useState(false);\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\n\n  const registerFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    let deviceId = randomId();\n    deviceId = deviceId.split(\"-\").join(\"\");\n    console.log(\"deviceId: \", deviceId);\n    try {\n      setLoadingSend(true);\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\n      setLoadingSend(false);\n      console.log(\"deviceName: \", deviceName);\n      console.log(\"deviceId: \", deviceId);\n    } catch (error) {\n      console.error(error);\n      setLoadingSend(false);\n    }\n  };\n\n  const registerCodeFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const registerCodeElem = document.getElementById(\n      \"registerCode\"\n    ) as HTMLInputElement;\n    const registerCode = registerCodeElem.value;\n    try {\n      setLoadingRegister(true);\n      await trySetDeviceRegisterApi(registerCode, email, password);\n      setLoadingRegister(false);\n      history.push(\"/login\");\n    } catch (error) {\n      console.error(error);\n      setLoadingRegister(false);\n    }\n  };\n  return (\n    <div>\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userEmail\" className=\"form-label\">\n            Email address\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"userEmail\"\n            required\n            aria-describedby=\"emailHelp\"\n          />\n          <div id=\"emailHelp\" className=\"form-text\">\n            We'll never share your email with anyone else.\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userPassword\" className=\"form-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            autoComplete=\"true\"\n            required\n            id=\"userPassword\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"machineName\" className=\"form-label\">\n            Enter Device Name To Save\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Office Pc\"\n            id=\"machineName\"\n            onInput={(event: any) => setDeviceName(event.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          {isLoadingSend ? (\n            <span\n              className=\"spinner-grow spinner-grow-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          ) : (\n            \"Send Code\"\n          )}\n        </button>\n        <Link to=\"/login\">\n          <button type=\"submit\" className=\"btn btn-outline-info\">\n            Login\n          </button>\n        </Link>\n      </form>\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"registerCode\" className=\"form-label\">\n            Enter code\n          </label>\n          <input\n            type=\"number\"\n            placeholder=\"1234\"\n            className=\"form-control\"\n            id=\"registerCode\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          {isLoadingRegister ? (\n            <span\n              className=\"spinner-grow spinner-grow-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          ) : (\n            \"Register\"\n          )}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterDevice;\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\nimport profile from \"../../assets/images/profile.png\";\n\nimport \"./chatListItem.css\";\n\nconst ChatListItem = ({ name, profileImage, onClickHandler }: any) => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  return (\n    <div\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\n        currentFocus === name && \"focusedContact\"\n      }`}\n      onClick={onClickHandler}\n    >\n      <img\n        src={profileImage ? profileImage : profile}\n        className=\"rounded-circle profileWidth\"\n        alt=\"profileImage\"\n      />\n      <h3 className=\"d-inline contactName\">{name}</h3>\n    </div>\n  );\n};\n\nexport default ChatListItem;\n","import moment from \"moment\";\nimport { useEffect } from \"react\";\n\nimport { useSelector } from \"react-redux\";\n// import { convertFileToBase64 } from \"../../helpers/file\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\n\nimport \"./chatWindow.css\";\n\nconst ChatWindow = (props: any) => {\n  const { chat, currentFocus } = useSelector((state: any) => {\n    const { chat, currentFocus } = state;\n    chat.sort((a: any, b: any) => {\n      return a.sendAt - b.sendAt;\n    });\n    chat.forEach(async (messageObj: any) => {\n      if (\n        messageObj.text === \"photo\" &&\n        messageObj.attachment &&\n        messageObj.attachment.thumbnailUrl\n      ) {\n        // console.log(\"messageObj: \", messageObj);\n        // const result = await fetch(messageObj.attachment.thumbnailUrl, {\n        //   mode: \"no-cors\",\n        // });\n        // const blob = await result.blob();\n        // const result64 = await convertFileToBase64(blob);\n        // console.log(\"result64: \", result64.length);\n      }\n    });\n\n    return { chat, currentFocus };\n  });\n\n  const imageOnClickHandler = async (message: any) => {\n    let image = document.createElement(\"img\");\n    image.src = message.attachment.url;\n    let w: any = window.open(\"\", \"_blank\");\n    w.document.title = \"AlivaKakaoClient\";\n    w.document.title = \"AlivaKakaoClient\";\n    w.document.body.appendChild(image);\n    w.location.href = message.attachment.url;\n  };\n\n  useEffect(() => {\n    scrollToEndMessages();\n  }, [chat]);\n\n  return (\n    <div className=\"m-2\" id=\"chatWindowContainer\">\n      {console.log(\"props: \", props)}\n      <h1>Chat Window</h1>\n      {chat.length > 0\n        ? chat.map((message: any, index: number) => (\n            <div\n              key={index}\n              className={`text-light p-1 w-100 d-flex flex-row ${\n                currentFocus === message.receiverUserName\n                  ? \"justify-content-end\"\n                  : \"justify-content-start\"\n              }`}\n            >\n              <div\n                className={`border border-dark rounded p-1 ${\n                  currentFocus === message.receiverUserName\n                    ? \"receiverMessage\"\n                    : \"senderMessage\"\n                }`}\n              >\n                {message.text === \"photo\" &&\n                  message.attachment &&\n                  message.attachment.thumbnailUrl && (\n                    <img\n                      loading=\"lazy\"\n                      alt=\"userImages\"\n                      src={message.attachment.thumbnailUrl}\n                      onClick={() => imageOnClickHandler(message)}\n                      className=\"hoverPointer\"\n                      width=\"90\"\n                      height=\"90\"\n                    />\n                  )}\n                <span className=\"m-1 text-wrap\">{message.text} </span>\n                <span className=\"small bg-secondary makeItLight rounded p-1\">\n                  {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\n                </span>\n              </div>\n            </div>\n          ))\n        : \"Message Will Be Here\"}\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import { port } from \"../helpers/config\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const uploadFile = async (file: any) => {\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      if (accessToken) {\n        console.log(\"accessToken: \", accessToken);\n        var data = new FormData();\n        data.append(\"myFile\", file);\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          body: data,\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\n        } else {\n          // production code\n          apiEndPoint = \"/uploadfile\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        console.log(\"result: \", result);\n        stopLoading();\n        resolve(result);\n      }\n    } catch (error) {\n      stopLoading();\n      reject(error);\n    }\n  });\n  return await fileUploadPromise;\n};\n","export const convertFileToBase64 = async (file: any) => {\n  const base64Promise = new Promise((resolve, reject) => {\n    try {\n      var reader = new FileReader();\n      reader.onload = function (e: any) {\n        // The file's text will be printed here\n        console.log(e.target.result);\n        resolve(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      reject(error);\n    }\n  });\n\n  return await base64Promise;\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadFile } from \"../../api/file\";\nimport { errors } from \"../../helpers/errorCodes\";\nimport { convertFileToBase64 } from \"../../helpers/file\";\nimport { success } from \"../../helpers/toast\";\nimport { newMessage } from \"../../redux/action/user\";\nimport \"./messageInput.css\";\n\nconst MessageInput = () => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  const email = useSelector((state: any) => state.user.email);\n  const chatList = useSelector((state: any) => state.user.chatList);\n  const ws = useSelector((state: any) => state.ws);\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const sendMessageHandler = async (event: any) => {\n    try {\n      event.preventDefault();\n      const sendAt = new Date().getTime();\n      const userFileUpload: any = document.getElementById(\n        \"userFileUpload\"\n      ) as HTMLInputElement;\n      if (!currentFocus) {\n        alert(\"Please a contact first\");\n        return;\n      }\n      if (!message && userFileUpload.files.length <= 0) {\n        alert(\"Plase select a file or type some message\");\n        return;\n      }\n      if (userFileUpload.files.length > 0) {\n        for (const file in userFileUpload.files) {\n          if (\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\n          ) {\n            const selectedFile: any = userFileUpload.files[file];\n            const base64 = await convertFileToBase64(selectedFile);\n            console.log(base64);\n            const { path }: any = await uploadFile(selectedFile);\n            const channelId = chatList[currentFocus][`channelId`];\n            ws.send(\n              JSON.stringify({\n                key: \"newMessageFile\",\n                value: {\n                  message,\n                  receiver: currentFocus,\n                  filePath: path,\n                  email,\n                  channelId,\n                },\n              })\n            );\n            dispatch(\n              newMessage({\n                receiverUserName: currentFocus,\n                message: {\n                  text: \"photo\",\n                  received: true,\n                  attachment: { thumbnailUrl: base64, url: base64 },\n                  sendAt,\n                },\n                senderName: email,\n              })\n            );\n\n            // await addNewMessageIdb(\n            //   loggedInUserId,\n            //   chatList[currentFocus].intId,\n            //   {\n            //     message: {\n            //       text: \"photo\",\n            //       attachment: { thumbnailUrl: base64, url: base64 },\n            //       received: true,\n            //       sendAt,\n            //     },\n            //     receiverUserName: currentFocus,\n            //     senderName: email,\n            //   }\n            // );\n          }\n        }\n      } else {\n        console.log(currentFocus);\n        const channelId = chatList[currentFocus][`channelId`];\n        ws.send(\n          JSON.stringify({\n            key: \"newMessage\",\n            value: { message, receiver: currentFocus, email, channelId },\n          })\n        );\n        dispatch(\n          newMessage({\n            receiverUserName: currentFocus,\n            message: { text: message, attachment: {}, received: true, sendAt },\n            senderName: \"Self\",\n          })\n        );\n        setMessage(\"\");\n        console.log(\"Fired\");\n      }\n      success(\"Sended Successfully\");\n    } catch (error) {\n      console.error(errors);\n      errors(\"Error in sending message\");\n    }\n  };\n  return (\n    <div className=\"messageInputContainer\">\n      <form\n        className=\"m-2\"\n        onSubmit={sendMessageHandler}\n        encType=\"multipart/form-data\"\n      >\n        <div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            onInput={(event: any) => setMessage(event.target.value)}\n            value={message}\n          />\n        </div>\n        <div className=\"form-group mt-2\">\n          <input\n            type=\"file\"\n            className=\"form-control-file\"\n            id=\"userFileUpload\"\n            accept=\"image/*\"\n          />\n        </div>\n        <button className=\"btn btn-outline-light mt-2\" type=\"submit\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MessageInput;\n","import ChatWindow from \"../chatWindow/chatWindow\";\nimport MessageInput from \"../messageInput/messageInput\";\n\nconst Messages = () => {\n  return (\n    <div>\n      <ChatWindow />\n      <MessageInput />\n    </div>\n  );\n};\n\nexport default Messages;\n","import { port } from \"../helpers/config\";\n\nexport const getUserChat = async (\n  email: string,\n  nickNameToGetChat: string,\n  lastMessageTimeStamp: any,\n  lastChatLogId: any,\n  logId: any\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email,\n        nickNameToGetChat,\n        lastMessageTimeStamp,\n        lastChatLogId,\n        startChatLogId: logId,\n      }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/chat`;\n    } else {\n      // production code\n      apiEndPoint = \"/chat\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { userId, messages } = result.data;\n      resolve({ userId, messages });\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { getUserChat } from \"../api/chat\";\nimport { handleIncommingMessages, lastDbMessageTime } from \"../idb/messages\";\nimport { store } from \"../redux\";\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\nimport { scrollToEndMessages } from \"./scroll\";\n\nexport const refreshMessages = async (focusedName: string) => {\n  try {\n    const { loggedInUserId, user }: any = await store.getState();\n    const { dispatch } = store;\n    const lastChatLogId = user.chatList[focusedName]?.lastChatLogId;\n    const focusedUserId = user.chatList[focusedName]?.intId;\n    dispatch(setFocusUser(focusedName));\n    const { allMessages, lastMessageTimeStamp, logId }: any =\n      await lastDbMessageTime(loggedInUserId, focusedUserId);\n    console.log(\"Fired\");\n    console.log(lastMessageTimeStamp);\n    const { messages }: any = await getUserChat(\n      user.email,\n      focusedName,\n      lastMessageTimeStamp,\n      lastChatLogId,\n      logId\n    );\n    dispatch(loadChat([...allMessages, ...messages]));\n    await handleIncommingMessages(\n      [...allMessages, ...messages],\n      loggedInUserId,\n      focusedUserId\n    );\n    scrollToEndMessages();\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import { connect } from \"react-redux\";\n\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\nimport Messages from \"../../components/messages/messages\";\nimport { refreshMessages } from \"../../helpers/messages\";\n\nimport \"./home.css\";\n\nconst Home = (props: any) => {\n  const onClickHandler = async (name: string) => {\n    await refreshMessages(name);\n  };\n\n  const getChatListItems = () => {\n    const items = [];\n    let index = 0;\n    const chatList = props.user.chatList;\n    for (const key in chatList) {\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\n        const item = chatList[key];\n        items.push(\n          <ChatListItem\n            profileImage={item.displayUserList[0].profileURL}\n            name={item.displayUserList[0].nickname}\n            key={index}\n            onClickHandler={() => {\n              return onClickHandler(item.displayUserList[0].nickname);\n            }}\n          />\n        );\n        index++;\n      }\n    }\n\n    return items;\n  };\n  return (\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\n        {/* <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"amir\"\n        />{\" \"}\n        <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"ali\"\n        /> */}\n        {props.user.chatList ? getChatListItems() : \"\"}\n      </div>\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\n        <Messages />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    user: state.user,\n    loggedInUserId: state.loggedInUserId,\n    ws: state.ws,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { logoutUser } from \"../../../redux/action/user\";\n\nconst PrivateNavItems = ({ email }: any) => {\n  const ws = useSelector((state: any) => state.ws);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const logOutHandler = () => {\n    dispatch(logoutUser());\n    localStorage.removeItem(\"token\");\n    history.push(\"/login\");\n    ws.close();\n  };\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n          Home\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <span className=\"nav-link active\">{email}</span>\n      </li>\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\n        <span className=\"nav-link active\">Logout</span>\n      </li>\n    </>\n  );\n};\n\nexport default PrivateNavItems;\n","import { Link } from \"react-router-dom\";\n\nconst PublicNavItems = () => {\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" to=\"/login\">\n          Login\n        </Link>\n      </li>\n    </>\n  );\n};\n\nexport default PublicNavItems;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\n\nimport { loginHandler } from \"../../helpers/loginHandler\";\n\nclass Navbar extends React.Component<any> {\n  async componentDidMount() {\n    const isKeepLogin = localStorage.getItem(\"token\");\n    const { dispatch, history, token }: any = this.props;\n    try {\n      await loginHandler(isKeepLogin, token, dispatch, history);\n    } catch (error) {}\n  }\n  render() {\n    const { token, email }: any = this.props;\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#alivaNavbar\"\n            aria-controls=\"alivaNavbar\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              AlivaTech\n            </Link>\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n    email: state.user.email,\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Navbar));\n","import { Route } from \"react-router\";\n\nconst Public = ({ component: Component, token, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props: any) => {\n      return <Component {...props} />;\n    }}\n  />\n);\nexport default Public;\n","import { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router\";\n\nconst Private = ({ component: Component, token,loading, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      console.log(\"token: \", token);\n      if (!token && !loading) {\n        return <Redirect to={{ pathname: \"/register\" }} />;\n      } else {\n        return <Component {...props} />;\n      }\n    }}\n  />\n);\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n    loading: state.loading,\n  };\n};\n\nexport default connect(mapStateToProps)(Private);\n","import ReactLoading from \"react-loading\";\n\nimport \"./loading.css\";\n\nconst Loading = () => (\n  <div className=\"loadingContainer\">\n    <ReactLoading\n      className=\"setMarginLoading\"\n      type=\"spin\"\n      color=\"white\"\n      height={\"2%\"}\n      width={\"2%\"}\n    />\n    <h1 className=\"m-3\">Loading.....</h1>\n  </div>\n);\n\nexport default Loading;\n","import { BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport Login from \"../pages/login/login\";\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\nimport Home from \"../pages/home/home\";\nimport Navbar from \"../components/navbar/navbar\";\nimport Public from \"./public/public\";\nimport { connect } from \"react-redux\";\nimport Private from \"./private/private\";\nimport React from \"react\";\nimport Loading from \"../components/loading/loading\";\n\nclass MainRouter extends React.Component {\n  render() {\n    const { loading }: any = this.props;\n    return (\n      <>\n        <BrowserRouter>\n          <ToastContainer />\n          <Navbar />\n          {loading ? (\n            <Loading />\n          ) : (\n            <>\n              <Private exact path=\"/\" component={Home} />\n              <Public exact path=\"/login\" component={Login} />\n              <Public exact path=\"/register\" component={RegisterDevice} />\n            </>\n          )}\n        </BrowserRouter>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    loading: state.loading,\n  };\n};\n\nexport default connect(mapStateToProps)(MainRouter);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { store } from \"./redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}