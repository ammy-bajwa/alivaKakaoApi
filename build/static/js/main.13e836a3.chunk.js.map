{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","idb/messages.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","api/chat.ts","assets/images/profile.png","components/chatListItem/chatListItem.tsx","helpers/file.ts","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","helpers/loginHandler.ts","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","key","openDB","upgrade","db","createObjectStore","put","close","error","loginUser","setFocusUser","name","setWs","newMessage","data","loadChat","messages","setContactList","contactList","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","getChatList","setCodePromise","handleContactList","loggedInUserEmail","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","success","toast","info","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","dbNotExists","deleteDB","newValue","get","value","concat","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","logId","length","sendAt","Login","loginFormHandler","event","props","history","preventDefault","emailElem","passwordElem","deviceData","localStorage","getItem","parse","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","text","sender","receiverUser","attachment","Object","keys","nickname","newMessageObj","received","userId","low","messageStore","onerror","onclose","push","setItem","refreshToken","removeItem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","registerFormHandler","deviceNameElem","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","ChatListItem","profileImage","onClickHandler","useSelector","onClick","src","profile","alt","convertFileToBase64","file","base64Promise","reader","FileReader","onload","e","target","readAsDataURL","ChatWindow","sort","b","forEach","messageObj","thumbnailUrl","mode","blob","result64","map","index","open","url","width","height","moment","format","uploadFile","fileUploadPromise","FormData","append","MessageInput","useDispatch","useState","setMessage","sendMessageHandler","Date","getTime","userFileUpload","files","prototype","hasOwnProperty","call","selectedFile","base64","path","channelId","receiver","filePath","messageContainer","encType","onInput","Messages","focusedUserId","items","item","displayUserList","profileURL","intId","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","loginHandler","isKeepLogin","token","err","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","Home","ReactDOM","StrictMode"],"mappings":"6iBAAMA,EAAe,CACnBC,KAAM,CACJC,MAAO,GACPC,SAAU,GACVC,YAAa,IAEfC,eAAgB,GAChBC,KAAM,GACNC,aAAc,GACdC,GAAI,KACJC,SAAS,GCDLC,EAAmBC,OAAOC,sCAAwCC,IAC3DC,EAAQC,aDGM,WAAmD,IAAzCC,EAAwC,uDAA3BhB,EAAciB,EAAa,uCAC3E,OAAQA,EAAOC,MACb,IAAK,QAYH,OAXAC,QAAQC,IAAIH,GACZD,EAAK,2BACAA,GADA,IAEHf,KAAM,CACJC,MAAOe,EAAOI,QAAQnB,MACtBC,SAAUc,EAAOI,QAAQlB,SACzBC,YAAaa,EAAOI,QAAQjB,aAE9BC,eAAgBY,EAAOI,QAAQhB,eAC/BC,KAAM,KAGV,IAAK,SASH,OARAU,EAAK,2BACAA,GADA,IAEHf,KAAM,CACJC,MAAO,GACPC,SAAU,GACVC,YAAa,MAInB,IAAK,YAEH,OADAY,EAAK,2BAAQA,GAAR,IAAeV,KAAMW,EAAOI,UAEnC,IAAK,gBAEH,OADAL,EAAK,2BAAQA,GAAR,IAAeP,SAAS,IAE/B,IAAK,eAEH,OADAO,EAAK,2BAAQA,GAAR,IAAeP,SAAS,IAE/B,IAAK,mBAEH,OADAO,EAAK,2BAAQA,GAAR,IAAeT,aAAcU,EAAOI,UAE3C,IAAK,SAEH,OADAL,EAAK,2BAAQA,GAAR,IAAeR,GAAIS,EAAOI,UAEjC,IAAK,mBAEH,OADAL,EAAK,2BAAQA,GAAR,IAAef,KAAK,2BAAMe,EAAMf,MAAb,IAAmBE,SAAUc,EAAOI,YAE9D,IAAK,cAAL,MACoDJ,EAAOI,QAAjDC,EADV,EACUA,iBAAkBC,EAD5B,EAC4BA,QAASC,EADrC,EACqCA,WAKnC,OAJAR,EAAK,2BACAA,GADA,IAEHV,KAAK,GAAD,mBAAMU,EAAMV,MAAZ,0BAAoBgB,oBAAqBC,GAAzC,IAAkDC,mBAG1D,QACE,OAAOR,KCtDiCN,KCI/Be,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8ECTDQ,EAAc,CACzB,GAAM,sBACN,GAAM,qBACN,GAAM,eACN,GAAM,sBACN,OAAQ,wBACR,OAAQ,gBACR,OAAQ,yBACR,OAAQ,0BACR,OAAQ,qBACR,OAAQ,0BACR,OAAQ,sB,gBCRGC,EAAc,uCAAG,WAAOC,EAAe/B,GAAtB,eAAAgC,EAAA,6DACtBC,EAAyB,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,qBAAAJ,EAAA,sEAEjCK,EAASC,iBAAO,gBAAD,OAAiBtC,IAAkBuC,WAClDC,EAAY,eACZC,EAAM,WAJ2B,SAKtBC,YAAOL,EAAQ,EAAG,CACjCM,QADiC,SACzBC,GACNA,EAAGC,kBAAkBL,MAPc,cAKjCI,EALiC,gBAUjCA,EAAGE,IAAIN,EAAWT,EAAUU,GAVK,OAWvCG,EAAGG,QACHZ,GAAQ,GAZ+B,kDAcvCC,EAAO,EAAD,IACNtB,QAAQkC,MAAR,MAfuC,0DAAZ,yDADH,SAoBff,EApBe,mFAAH,wDCHdgB,EAAY,SAACrD,GAAD,MAAgB,CACvCiB,KAAM,QACNG,QAASpB,IAOEsD,EAAe,SAACC,GAAD,MAAmB,CAC7CtC,KAAM,mBACNG,QAASmC,IAGEC,EAAQ,SAACjD,GAAD,MAAc,CACjCU,KAAM,SACNG,QAASb,IAGEkD,EAAa,SAACC,GACzB,MAAO,CACLzC,KAAM,cACNG,QAASsC,IAIAC,EAAW,SAACC,GAAD,MAAoB,CAC1C3C,KAAM,YACNG,QAASwC,IAWEC,EAAiB,SAACC,GAAD,MAAuB,CACnD7C,KAAM,mBACNG,QAAS0C,ICrCEC,EAAe,WAC1BlD,EAAMmD,SD0B8B,CACpC/C,KAAM,mBCxBKgD,EAAc,WACzBpD,EAAMmD,SD0B6B,CACnC/C,KAAM,kBE9BKiD,EAAW,uCAAG,WACzBjE,EACAkE,EACAC,EACAC,GAJyB,eAAAjC,EAAA,6DAMnBkC,EAAe,IAAIhC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,yBAAAJ,EAAA,oEAIzBvB,EAAM0D,WADApE,EAHmB,EAG3BH,KAAQG,YAEVe,QAAQC,IAAI,gBAAiBhB,GACxBA,EANwB,wBAO3B4D,IACMS,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnB5E,QACAkE,WACAC,aACAC,cAGAS,EAAc,GAMhBA,EAAc,SAxBW,UA0BHC,MAAMD,EAAaN,GA1BhB,eA0BvBQ,EA1BuB,iBA2BZA,EAAOC,OA3BK,WA2B3BD,EA3B2B,OA4B3Bf,KACIe,EAAO5B,MA7BgB,kBA8BrB8B,EAAejD,EAAO,GAAD,OAAI+C,EAAO5B,WAElC8B,EAAeF,EAAO1D,SAExB6D,MAAMD,GACNhE,QAAQC,IAAI,wBAAyB+D,GACrC1C,EAAO0C,GApCkB,+BAsCzBhE,QAAQC,IAAI,WAAY6D,GAtCC,UAuCnB9C,EAAe8C,EAAO9E,SAAU8E,EAAO5E,gBAvCpB,QAwCzBmC,EAAQyC,GAxCiB,0DA4C7BxC,EAAO,EAAD,IA5CuB,0DAAZ,yDANI,SAqDZ8B,EArDY,mFAAH,4DCHXc,EAAW,uCAAG,WAAOnF,GAAP,eAAAmC,EAAA,6DACnBiD,EAAiB,IAAI/C,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,uBAAAJ,EAAA,6DACjC2B,IACMS,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE5E,WAErB6E,EAAc,GAMhBA,EAAc,WAbiB,SAeTC,MAAMD,EAAaN,GAfV,cAe7BQ,EAf6B,gBAgBlBA,EAAOC,OAhBW,OAgBjCD,EAhBiC,OAiBjCf,IACIe,EAAO5B,OACL8B,EAAeF,EAAO1D,QAC1B6D,MAAMD,GACNhE,QAAQC,IAAI,WAAY6D,GACxB9D,QAAQC,IAAI,iBAAkB+D,GAC9B1C,EAAO0C,KAEChF,EAAa8E,EAAOtB,KAApBxD,SACRqC,EAAQrC,GACRgB,QAAQC,IAAI6D,IA3BmB,4CAAZ,yDADE,SAgCZK,EAhCY,mFAAH,sDCEXC,EAAiB,uCAAG,WAC/B/D,EACAF,EACAkE,GAH+B,qBAAAnD,EAAA,sEAKkBvB,EAAM0D,WALxB,mBAKjBrE,EALiB,EAKvBF,KAAgBI,EALO,EAKPA,eACnBF,EAASqB,IAAgBrB,EAASmB,GANR,iCAOH+D,EAAYG,GAPT,cAOvBzB,EAPuB,OAQ7BjD,EAAMmD,SAASH,EAAeC,IARD,UASvB5B,EAAehC,EAAUE,GATF,4CAAH,0DCLjBoF,EAAsB,WACjC,IAAMC,EAAiBC,SAASC,eAC9B,oBAEFF,EAAeG,UAAYH,EAAeI,cCF/BC,EAAU,SAACxE,GAAD,OAAqByE,IAAMD,QAAQxE,IAE7C0E,EAAO,SAAC1E,GAAD,OAAqByE,IAAMC,KAAK1E,ICAvC2E,EAAuB,uCAAG,WACrCrC,EACAxD,EACA8F,GAHqC,eAAA9D,EAAA,6DAK/B+D,EAAwB,IAAI7D,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,qBAAAJ,EAAA,sEAEhCK,EAASC,iBAAO,YAAD,OACPwD,GADO,OACO9F,IAC1BuC,WACIC,EAAY,eACZC,EAAM,WAN0B,SAOrBC,YAAOL,EAAQ,EAAG,CACjCM,QADiC,SACzBC,GACNA,EAAGC,kBAAkBL,MATa,cAOhCI,EAPgC,gBAYhCA,EAAGE,IAAIN,EAAWgB,EAAUf,GAZI,OAatCG,EAAGG,QACHZ,GAAQ,GAd8B,kDAgBtCC,EAAO,EAAD,IACNtB,QAAQkC,MAAR,MAjBsC,0DAAZ,yDALO,SA0BxB+C,EA1BwB,mFAAH,0DAsDvBC,EAAgB,uCAAG,WAC9BhG,EACA8F,EACAzC,GAH8B,6BAAArB,EAAA,6DAKxBK,EAASC,iBAAO,YAAD,OAAawD,GAAb,OAA2B9F,IAAkBuC,WAC5DC,EAAY,eACZC,EAAM,WACRwD,GAAc,EARY,SASbvD,YAAOL,EAAQ,EAAG,CACjCM,QADiC,SACzBC,GACNqD,GAAc,KAXY,UASxBrD,EATwB,QAe1BqD,EAf0B,wBAgB5BrD,EAAGG,QAhByB,UAiBtBmD,YAAS7D,GAjBa,iDAoBtB8D,EApBsB,aAqB1BlF,iBAAkBoC,EAAWpC,iBAC7BE,WAAYkC,EAAWlC,YACpBkC,EAAWnC,SAvBY,UAyBT0B,EAAGwD,IAAI5D,EAAWC,GAzBT,eAyBtBa,EAzBsB,OA0BtB+C,EAAQ/C,EAAKgD,OAAO,CAACH,IA1BC,UA2BtBvD,EAAGE,IAAIN,EAAW6D,EAAO5D,GA3BH,eA4B5BG,EAAGG,QA5ByB,kBA6BrBO,GA7BqB,4CAAH,0DAiChBiD,EAAiB,uCAAG,WAC/BvG,EACA8F,GAF+B,eAAA9D,EAAA,6DAIzBwE,EAAwB,IAAItE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,yBAAAJ,EAAA,sEAEhCK,EAASC,iBAAO,YAAD,OACPwD,GADO,OACO9F,IAC1BuC,WACIC,EAAY,eACZC,EAAM,WACRwD,GAAc,EAPoB,SAQrBvD,YAAOL,EAAQ,EAAG,CACjCM,QADiC,SACzBC,GACNqD,GAAc,KAVoB,UAQhCrD,EARgC,QAalCqD,EAbkC,wBAcpC9D,EAAQ,CACNsE,YAAa,GACbC,qBAAsB,EACtBC,MAAO,IAET/D,EAAGG,QAnBiC,UAoB9BmD,YAAS7D,GApBqB,iDAsBjBO,EAAGwD,IAAI5D,EAAWC,GAtBD,QAsB9Ba,EAtB8B,OAuBpCnB,EAAQ,CACNsE,YAAanD,GAAQ,GACrBoD,qBAAsBpD,EAAKA,EAAKsD,OAAS,GAAGC,QAAU,EACtDF,MAAOrD,EAAKA,EAAKsD,OAAS,GAAGD,OAAS,IA1BJ,0DA8BtCvE,EAAO,EAAD,IACNtB,QAAQkC,MAAR,MA/BsC,0DAAZ,yDAJC,SAsClBwD,EAtCkB,mFAAH,wD,OCzExBM,E,4MACJC,iB,uCAAmB,WAAOC,GAAP,yCAAAhF,EAAA,2DACkB,EAAKiF,MAAhCC,EADS,EACTA,QAAStD,EADA,EACAA,SACjBoD,EAAMG,iBACAC,EAAY9B,SAASC,eAAe,aACpC1F,EAAQuH,EAAUf,MAElBgB,EAAe/B,SAASC,eAC5B,gBAGIxB,EAAWsD,EAAahB,MACxBiB,EAAaC,aAAaC,QAAQ3H,GAXvB,iBAafkF,MAAM,gCAbS,yCAgBbpB,IAhBa,EAiBoBa,KAAKiD,MAAMH,GAApCtD,EAjBK,EAiBLA,WAAYC,EAjBP,EAiBOA,SAjBP,UAkBWH,EACtBjE,EACAkE,EACAC,EACAC,GAtBW,QAkBPrE,EAlBO,OAwBbkB,QAAQC,IAAI,SAAUnB,GAClB8H,EAAa,GAMfA,EAAapH,OAAOqH,SAASC,OAAOC,QAAQ,QAAS,OAEjDC,EAAS,IAAIC,UAAUL,IACtBM,OAAS,WACdlH,QAAQC,IAAI,kBACZ+G,EAAOG,KAAKzD,KAAKC,UAAU,CAAEhC,IAAK,WAAY4D,MAAOxG,KACrD+D,EAASR,EAAM0E,KAEjBA,EAAOI,UAAP,uCAAmB,WAAOlB,GAAP,2CAAAhF,EAAA,kEAETsB,EAAOkB,KAAKiD,MAAMT,EAAM1D,MAElB,iBADJb,EAAQa,EAARb,KAHO,wBAKL0F,EAAmD7E,EAAnD6E,KAAMC,EAA6C9E,EAA7C8E,OAAQC,EAAqC/E,EAArC+E,aAAcxB,EAAuBvD,EAAvBuD,OAAQyB,EAAehF,EAAfgF,WACtCrH,EAAmBsH,OAAOC,KAAKH,GAAc,GAC7ClH,EAAaiH,EAAOK,SACpBC,EAAgB,CACpBzH,mBACAC,QAAS,CAAEoH,aAAYH,OAAMQ,UAAU,EAAM9B,UAC7C1F,cAXW,UAakBV,EAAM0D,WAbxB,wBAaLjE,EAbK,EAaLA,aACRY,QAAQC,IAAI,iBAAkBb,GAdjB,UAePgF,EAAkB/D,EAAYF,EAAkBpB,GAfzC,eAiBXK,IAAiBiB,GACjBjB,IAAiBe,GAEjB2C,EAASP,EAAWqF,IACpBtD,KAEAQ,EAAK,oBAAD,OAAqBzE,EAArB,eAAsCF,IAvB/B,UAyBP+E,EACJpG,EAAKI,eACLqI,EAAapH,GAAkB2H,OAAOC,IACtCH,GA5BW,gCA8BI,mBAARjG,IAA2B,EACHa,EAAK+C,MAA9BuC,EAD2B,EAC3BA,OAAQE,EADmB,EACnBA,aAChBhI,QAAQC,IAAI6H,EAAQE,IAhCP,0DAmCfhI,QAAQC,IAAR,MACA8C,IACA/C,QAAQC,IAAI,sBAAuBiG,EAAM1D,MArC1B,0DAAnB,sDAwCAwE,EAAOiB,QAAU,WACfhE,MAAM,qBAER+C,EAAOkB,QAAU,WACfjE,MAAM,oBACNnB,ERlGuB,CAC/B/C,KAAM,WQkGEqG,EAAQ+B,KAAK,WAEfrF,EAASX,EAAUrD,IACnB2H,aAAa2B,QACX,QACA1E,KAAKC,UAAU,CACb1E,YAAaH,EAAKG,YAClBoJ,aAAcvJ,EAAKG,YACnBF,QACAkE,cAGJmD,EAAQ+B,KAAK,KACbpF,IAlGa,mDAoGbA,IACA0D,aAAa6B,WAAW,SACxBtI,QAAQkC,MAAR,MAtGa,2D,kGA0GnB,WACE,OACE,mCACE,uBAAMqG,UAAU,MAAMC,SAAUC,KAAKxC,iBAArC,UACE,sBAAKsC,UAAU,OAAf,UACE,uBAAOG,QAAQ,YAAYH,UAAU,aAArC,2BAGA,uBACExI,KAAK,QACLwI,UAAU,eACVI,GAAG,YACHC,UAAQ,EACRC,mBAAiB,cAEnB,qBAAKF,GAAG,YAAYJ,UAAU,YAA9B,+DAIF,sBAAKA,UAAU,OAAf,UACE,uBAAOG,QAAQ,eAAeH,UAAU,aAAxC,sBAGA,uBACExI,KAAK,WACLwI,UAAU,eACVO,aAAa,OACbF,UAAQ,EACRD,GAAG,oBAGP,wBAAQ5I,KAAK,SAASwI,UAAU,4BAAhC,mBAGA,cAAC,IAAD,CAAMQ,GAAG,YAAT,SACE,wBAAQhJ,KAAK,SAASwI,UAAU,uBAAhC,wC,GA9IQS,IAAMC,WA8JXC,eANS,SAACrJ,GACvB,MAAO,CACLb,SAAUa,EAAMf,KAAKE,SACrBI,aAAcS,EAAMT,gBAGT8J,CAAyBC,YAAWnD,I,SC5KtCoD,EAAwB,uCAAG,WACtClG,EACAC,EACApE,EACAkE,GAJsC,qBAAA/B,EAAA,6DAMtC2B,IACMS,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAET,aAAYC,WAAUpE,QAAOkE,cAElDW,EAAc,GAMhBA,EAAc,mBAlBsB,SAoBdC,MAAMD,EAAaN,GApBL,cAoBlCQ,EApBkC,gBAqBvBA,EAAOC,OArBgB,OAqBtCD,EArBsC,OAsBtCf,IACIe,EAAO5B,OACH8B,EAAeF,EAAO1D,QAC5B6D,MAAMD,GACNhE,QAAQC,IAAI,WAAY+D,KAExBC,MAAMH,EAAO1D,SACbJ,QAAQC,IAAI6D,EAAO1D,UA7BiB,4CAAH,4DAiCxBiJ,EAAuB,uCAAG,WACrCC,EACAvK,EACAkE,GAHqC,eAAA/B,EAAA,6DAK/BiD,EAAiB,IAAI/C,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,qBAAAJ,EAAA,6DACjC2B,IACMS,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE2F,OAAMvK,QAAOkE,cAElCW,EAAc,GAMhBA,EAAc,kBAbiB,SAeTC,MAAMD,EAAaN,GAfV,cAe7BQ,EAf6B,gBAgBlBA,EAAOC,OAhBW,OAgBjCD,EAhBiC,OAiBjCf,IACIe,EAAO5B,QACL8B,EAAejD,EAAO,GAAD,OAAI+C,EAAO5B,WAElC8B,EAAeF,EAAO1D,SAExB6D,MAAMD,GACNhE,QAAQC,IAAI,WAAY6D,GACxB9D,QAAQC,IAAI,iBAAkB+D,GAC9B1C,EAAO0C,KAEP3C,EAAQyC,EAAO1D,SACf6D,MAAMH,EAAO1D,SACbJ,QAAQC,IAAI6D,IA9BmB,4CAAZ,yDALc,SAuCxBK,EAvCwB,mFAAH,0DC2FrBoF,EAzHQ,WACrB,IAAMnD,EAAUoD,cAEVC,EAAmB,uCAAG,WAAOvD,GAAP,2BAAAhF,EAAA,6DAC1BgF,EAAMG,iBACAC,EAAY9B,SAASC,eAAe,aACpC1F,EAAQuH,EAAUf,MAClBgB,EAAe/B,SAASC,eAC5B,gBAGIxB,EAAWsD,EAAahB,MACxBmE,EAAiBlF,SAASC,eAC9B,eAEIvB,EAAawG,EAAenE,MAElCpC,GADIA,EAAWwG,eACKC,MAAM,KAAKC,KAAK,IACpC7J,QAAQC,IAAI,aAAckD,GAfA,oBAiBlBiG,EAAyBlG,EAAYC,EAAUpE,EAAOkE,GAjBpC,QAkBxBwD,aAAa2B,QAAQrJ,EAAO2E,KAAKC,UAAU,CAAET,aAAYC,cACzDnD,QAAQC,IAAI,eAAgBiD,GAC5BlD,QAAQC,IAAI,aAAckD,GApBF,mDAsBxBnD,QAAQkC,MAAR,MAtBwB,2DAAH,sDA0BnB4H,EAAuB,uCAAG,WAAO5D,GAAP,yBAAAhF,EAAA,6DAC9BgF,EAAMG,iBACAC,EAAY9B,SAASC,eAAe,aACpC1F,EAAQuH,EAAUf,MAClBgB,EAAe/B,SAASC,eAC5B,gBAGIxB,EAAWsD,EAAahB,MACxBwE,EAAmBvF,SAASC,eAChC,gBAEIuF,EAAeD,EAAiBxE,MAZR,mBActB8D,EAAwBW,EAAcjL,EAAOkE,GAdvB,QAe5BmD,EAAQ+B,KAAK,UAfe,kDAiB5BnI,QAAQkC,MAAR,MAjB4B,0DAAH,sDAoB7B,OACE,gCACE,uBAAMqG,UAAU,MAAMC,SAAUiB,EAAhC,UACE,sBAAKlB,UAAU,OAAf,UACE,uBAAOG,QAAQ,YAAYH,UAAU,aAArC,2BAGA,uBACExI,KAAK,QACLwI,UAAU,eACVI,GAAG,YACHC,UAAQ,EACRC,mBAAiB,cAEnB,qBAAKF,GAAG,YAAYJ,UAAU,YAA9B,+DAIF,sBAAKA,UAAU,OAAf,UACE,uBAAOG,QAAQ,eAAeH,UAAU,aAAxC,sBAGA,uBACExI,KAAK,WACLwI,UAAU,eACVO,aAAa,OACbF,UAAQ,EACRD,GAAG,oBAGP,sBAAKJ,UAAU,OAAf,UACE,uBAAOG,QAAQ,cAAcH,UAAU,aAAvC,uCAGA,uBACExI,KAAK,OACLwI,UAAU,eACV0B,YAAY,YACZtB,GAAG,cACHC,UAAQ,OAGZ,wBAAQ7I,KAAK,SAASwI,UAAU,4BAAhC,uBAGA,cAAC,IAAD,CAAMQ,GAAG,SAAT,SACE,wBAAQhJ,KAAK,SAASwI,UAAU,uBAAhC,wBAKJ,uBAAMA,UAAU,MAAMC,SAAUsB,EAAhC,UACE,sBAAKvB,UAAU,OAAf,UACE,uBAAOG,QAAQ,eAAeH,UAAU,aAAxC,wBAGA,uBACExI,KAAK,SACLkK,YAAY,OACZ1B,UAAU,eACVI,GAAG,eACHC,UAAQ,OAGZ,wBAAQ7I,KAAK,SAASwI,UAAU,4BAAhC,6BCrHK2B,EAAW,uCAAG,WACzBnL,EACAoL,EACAvE,EACAwE,EACAvE,GALyB,eAAA3E,EAAA,6DAOnBiD,EAAiB,IAAI/C,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,2BAAAJ,EAAA,6DACjC2B,IACMS,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnB5E,QACAoL,oBACAvE,uBACAwE,gBACAC,eAAgBxE,KAGhBjC,EAAc,GAMhBA,EAAc,QAnBiB,SAqBTC,MAAMD,EAAaN,GArBV,cAqB7BQ,EArB6B,gBAsBlBA,EAAOC,OAtBW,OAsBjCD,EAtBiC,OAuBjCf,IACIe,EAAO5B,OACL8B,EAAeF,EAAO1D,QAC1B6D,MAAMD,GACNhE,QAAQC,IAAI,WAAY6D,GACxB9D,QAAQC,IAAI,iBAAkB+D,GAC9B1C,EAAO0C,KACD,EACuBF,EAAOtB,KAA5BsF,EADH,EACGA,OAAQpF,EADX,EACWA,SAChBrB,EAAQ,CAAEyG,SAAQpF,aAClB1C,QAAQC,IAAI6D,IAjCmB,4CAAZ,yDAPE,SA4CZK,EA5CY,mFAAH,8DCHT,OAA0B,oCCwB1BmG,I,OAnBM,SAAC,GAAiD,IAA/CjI,EAA8C,EAA9CA,KAAMkI,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,eACpCpL,EAAeqL,aAAY,SAAC5K,GAAD,OAAgBA,EAAMT,gBACvD,OACE,sBACEmJ,UAAS,4EACPnJ,IAAiBiD,GAAQ,kBAE3BqI,QAASF,EAJX,UAME,qBACEG,IAAKJ,GAA8BK,GACnCrC,UAAU,8BACVsC,IAAI,iBAEN,oBAAItC,UAAU,uBAAd,SAAsClG,S,oBCnB/ByI,GAAmB,uCAAG,WAAOC,GAAP,eAAA7J,EAAA,6DAC3B8J,EAAgB,IAAI5J,SAAQ,SAACC,EAASC,GAC1C,IACE,IAAI2J,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUC,GAExBpL,QAAQC,IAAImL,EAAEC,OAAOvH,QACrBzC,EAAQ+J,EAAEC,OAAOvH,SAEnBmH,EAAOK,cAAcP,GACrB,MAAO7I,GACPZ,EAAOY,OAXsB,SAepB8I,EAfoB,mFAAH,sDCkFjBO,I,OA3EI,SAACpF,GAAgB,IAAD,EACFsE,aAAY,SAAC5K,GAAgB,IAClDV,EAAuBU,EAAvBV,KAAMC,EAAiBS,EAAjBT,aAoBd,OAnBAD,EAAKqM,MAAK,SAACtK,EAAQuK,GACjB,OAAOvK,EAAE6E,OAAS0F,EAAE1F,UAEtB5G,EAAKuM,QAAL,uCAAa,WAAOC,GAAP,mBAAAzK,EAAA,yDAEW,UAApByK,EAAWtE,OACXsE,EAAWnE,aACXmE,EAAWnE,WAAWoE,aAJb,wBAMT5L,QAAQC,IAAI,eAAgB0L,GANnB,SAOY9H,MAAM8H,EAAWnE,WAAWoE,aAAc,CAC7DC,KAAM,YARC,cAOH/H,EAPG,gBAUUA,EAAOgI,OAVjB,cAUHA,EAVG,iBAWchB,GAAoBgB,GAXlC,QAWHC,EAXG,OAYT/L,QAAQC,IAAI,aAAc8L,GAZjB,4CAAb,uDAgBO,CAAE5M,OAAMC,mBArBTD,EADyB,EACzBA,KAAMC,EADmB,EACnBA,aAwBd,OACE,sBAAKmJ,UAAU,MAAMI,GAAG,sBAAxB,UACG3I,QAAQC,IAAI,UAAWkG,GACxB,6CACChH,EAAK2G,OAAS,EACX3G,EAAK6M,KAAI,SAAC5L,EAAc6L,GAAf,OACP,sBAEE1D,UACEnI,EAAQyH,SACJ,sCACA,qCALR,UAQoB,UAAjBzH,EAAQiH,MACPjH,EAAQoH,YACRpH,EAAQoH,WAAWoE,cACjB,qBACEtM,QAAQ,OACRuL,IAAI,aACJF,IAAKvK,EAAQoH,WAAWoE,aACxBlB,QAAS,kBACPlL,OAAO0M,KAAK9L,EAAQoH,WAAW2E,IAAK,WAEtC5D,UAAU,eACV6D,MAAM,KACNC,OAAO,OAGb,uBACE9D,UAAS,wCACPnJ,IAAiBgB,EAAQD,iBACrB,sCACA,oCAJR,UAOGC,EAAQiH,KACT,uBACA,uBAAMkB,UAAU,uCAAhB,UACE,+BAAO+D,KAAOlM,EAAQ2F,QAAQwG,OAAO,gBACrC,+BAAOD,KAAOlM,EAAQ2F,QAAQwG,OAAO,wBAjCpCN,MAsCT,4B,UCzEGO,GAAU,uCAAG,WAAOzB,GAAP,eAAA7J,EAAA,6DAClBuL,EAAoB,IAAIrL,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,yBAAAJ,EAAA,oEAI9BvB,EAAM0D,aADApE,EAHwB,EAGhCH,KAAQG,aAHwB,wBAMhCe,QAAQC,IAAI,gBAAiBhB,IACzBuD,EAAO,IAAIkK,UACVC,OAAO,SAAU5B,GACtBlI,IACMS,EAAiB,CACrBC,OAAQ,OACRE,KAAMjB,GAEJoB,EAAc,GAMhBA,EAAc,cApBgB,UAsBRC,MAAMD,EAAaN,GAtBX,eAsB5BQ,EAtB4B,iBAuBjBA,EAAOC,OAvBU,QAuBhCD,EAvBgC,OAwBhC9D,QAAQC,IAAI,WAAY6D,GACxBf,IACA1B,EAAQyC,GA1BwB,0DA6BlCf,IACAzB,EAAO,EAAD,IA9B4B,0DAAZ,yDADF,SAkCXmL,EAlCW,mFAAH,sDC8HRG,I,OAxHM,WACnB,IAAMxN,EAAeqL,aAAY,SAAC5K,GAAD,OAAgBA,EAAMT,gBACjDL,EAAQ0L,aAAY,SAAC5K,GAAD,OAAgBA,EAAMf,KAAKC,SAC/CC,EAAWyL,aAAY,SAAC5K,GAAD,OAAgBA,EAAMf,KAAKE,YAClDK,EAAKoL,aAAY,SAAC5K,GAAD,OAAgBA,EAAMR,MACvCyD,EAAW+J,cALQ,EAMKC,mBAAS,IANd,oBAMlB1M,EANkB,KAMT2M,EANS,KAOnBC,EAAkB,uCAAG,WAAO9G,GAAP,iCAAAhF,EAAA,kEAEvBgF,EAAMG,iBACAN,GAAS,IAAIkH,MAAOC,UACpBC,EAAsB3I,SAASC,eACnC,kBAEGrF,EAPkB,uBAQrB6E,MAAM,0BARe,6BAWlB7D,KAAW+M,EAAeC,MAAMtH,QAAU,GAXxB,wBAYrB7B,MAAM,4CAZe,gCAenBkJ,EAAeC,MAAMtH,OAAS,GAfX,wBAAA5E,EAAA,KAgBFiM,EAAeC,OAhBb,kDAgBVrC,EAhBU,YAkBjBtD,OAAO4F,UAAUC,eAAeC,KAAKJ,EAAeC,MAAOrC,GAlB1C,wBAoBXyC,EAAoBL,EAAeC,MAAMrC,GApB9B,UAqBID,GAAoB0C,GArBxB,eAqBXC,EArBW,OAsBjBzN,QAAQC,IAAIwN,GAtBK,UAuBWjB,GAAWgB,GAvBtB,iBAuBTE,EAvBS,EAuBTA,KACFC,EAAY3O,EAASI,GAAT,UAClBC,EAAG8H,KACDzD,KAAKC,UAAU,CACbhC,IAAK,iBACL4D,MAAO,CACLnF,UACAwN,SAAUxO,EACVyO,SAAUH,EACV3O,QACA4O,gBAKN7K,EACEP,EAAW,CACTpC,iBAAkBf,EAClBgB,QAAS,CACPiH,KAAM,QACNQ,UAAU,EACVL,WAAY,CAAEoE,aAAc6B,GAC5B1H,UAEF1F,WAAY,UA/CC,wDAqDrBL,QAAQC,IAAIb,GACNuO,EAAY3O,EAASI,GAAT,UAClBC,EAAG8H,KACDzD,KAAKC,UAAU,CACbhC,IAAK,aACL4D,MAAO,CAAEnF,UAASwN,SAAUxO,EAAcL,QAAO4O,gBAGrD7K,EACEP,EAAW,CACTpC,iBAAkBf,EAClBgB,QAAS,CAAEiH,KAAMjH,EAASyH,UAAU,EAAM9B,UAC1C1F,WAAY,UAGhB0M,EAAW,KACLe,EAAwBtJ,SAASC,eACrC,wBAEeC,UAAYoJ,EAAiBnJ,aAE9C3E,QAAQC,IAAI,SA1ES,QA4EvB2E,EAAQ,uBACRN,IA7EuB,kDA+EvBtE,QAAQkC,MAAMnB,GACdA,EAAO,4BAhFgB,0DAAH,sDAmFxB,OACE,qBAAKwH,UAAU,wBAAf,SACE,uBACEA,UAAU,MACVC,SAAUwE,EACVe,QAAQ,sBAHV,UAKE,8BACE,uBACEhO,KAAK,OACLwI,UAAU,eACVyF,QAAS,SAAC9H,GAAD,OAAgB6G,EAAW7G,EAAMmF,OAAO9F,QACjDA,MAAOnF,MAGX,qBAAKmI,UAAU,kBAAf,SACE,uBACExI,KAAK,OACLwI,UAAU,oBACVI,GAAG,qBAGP,wBAAQJ,UAAU,6BAA6BxI,KAAK,SAApD,yBC9GOkO,GATE,WACf,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,QCuFS/E,I,OAAAA,aARS,SAACrJ,GACvB,MAAO,CACLf,KAAMe,EAAMf,KACZI,eAAgBW,EAAMX,eACtBG,GAAIQ,EAAMR,MAIC6J,EAnFF,SAAC/C,GACZ,IAAMqE,EAAc,uCAAG,WAAOnI,EAAc6L,GAArB,mCAAAhN,EAAA,sEAEX4B,EAAmCqD,EAAnCrD,SAAU5D,EAAyBiH,EAAzBjH,eAAgBJ,EAASqH,EAATrH,KAC5BsL,EAHa,UAGGtL,EAAKE,SAASqD,UAHjB,aAGG,EAAqB+H,cAC3CtH,EAASV,EAAaC,IAJH,SAMXoD,EAAkBvG,EAAgBgP,GANvB,uBAKXvI,EALW,EAKXA,YAAaC,EALF,EAKEA,qBAAsBC,EALxB,EAKwBA,MAE3C7F,QAAQC,IAAI,SACZD,QAAQC,IAAI2F,GARO,UASasE,EAC9BpL,EAAKC,MACLsD,EACAuD,EACAwE,EACAvE,GAdiB,wBASXnD,EATW,EASXA,SAORI,EAASL,EAAS,GAAD,mBAAKkD,GAAL,YAAqBjD,MAhBnB,UAiBbqC,EAAwB,GAAD,mBACvBY,GADuB,YACPjD,IACpBxD,EACAgP,GApBiB,QAsBnB5J,IAtBmB,kDAwBnBtE,QAAQkC,MAAR,MAxBmB,0DAAH,wDAsDpB,OACE,sBAAKqG,UAAU,iBAAiBI,GAAG,oBAAnC,UACE,qBAAKJ,UAAU,2FAAf,SASGpC,EAAMrH,KAAKE,SArCO,WACvB,IAAMmP,EAAQ,GACVlC,EAAQ,EACNjN,EAAWmH,EAAMrH,KAAKE,SAC5B,IAAK,IAAM2C,KAAO3C,EACZyI,OAAO4F,UAAUC,eAAeC,KAAKvO,EAAU2C,IAAO,WACxD,IAAMyM,EAAOpP,EAAS2C,GACtBwM,EAAMhG,KACJ,cAAC,GAAD,CACEoC,aAAc6D,EAAKC,gBAAgB,GAAGC,WACtCjM,KAAM+L,EAAKC,gBAAgB,GAAG1G,SAE9B6C,eAAgB,WACd,OAAOA,EACL4D,EAAKC,gBAAgB,GAAG1G,SACxByG,EAAKG,SAJJtC,IASTA,IAfwD,GAmB5D,OAAOkC,EAaoBK,GAAqB,KAE9C,qBAAKjG,UAAU,qBAAqBI,GAAG,mBAAvC,SACE,cAAC,GAAD,aCnDO8F,GAzBS,SAAC,GAAoB,IAAlB1P,EAAiB,EAAjBA,MACnB+D,EAAW+J,cACXzG,EAAUoD,cAMhB,OACE,qCACE,oBAAIjB,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBmG,eAAa,OAAO3F,GAAG,IAAzD,oBAIF,oBAAIR,UAAU,WAAd,SACE,sBAAMA,UAAU,kBAAhB,SAAmCxJ,MAErC,oBAAIwJ,UAAU,uBAAuBmC,QAfnB,WACpB5H,EpBH6B,CAC/B/C,KAAM,WoBGJ0G,aAAa6B,WAAW,SACxBlC,EAAQ+B,KAAK,WAYX,SACE,sBAAMI,UAAU,kBAAhB,0BCTOoG,GAZQ,WACrB,OACE,mCACE,oBAAIpG,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBQ,GAAG,SAArC,wBCIK6F,GAAY,uCAAG,WAC1BC,EACAC,EACAhM,EACAsD,GAJ0B,iCAAAlF,EAAA,0DAMtB2N,GAAgBC,EANM,0BAOIpL,KAAKiD,MAAMkI,GAA/B9P,EAPgB,EAOhBA,MAAOkE,EAPS,EAOTA,SACTuD,EAAkBC,aAAaC,QAAQ3H,GARrB,SAUtB8D,IAVsB,EAWWa,KAAKiD,MAAMH,GAApCtD,EAXc,EAWdA,WAAYC,EAXE,EAWFA,SAXE,SAaEH,EACtBjE,EACAkE,EACAC,EACAC,GAjBoB,OAahBrE,EAbgB,OAmBlB8H,EAAa,GAMfA,EAAapH,OAAOqH,SAASC,OAAOC,QAAQ,QAAS,OAEjDC,EAAS,IAAIC,UAAUL,IACtBM,OAAS,WACdlH,QAAQC,IAAI,kBACZ+G,EAAOG,KAAKzD,KAAKC,UAAU,CAAEhC,IAAK,WAAY4D,MAAOxG,KACrD+D,EAASR,EAAM0E,KAEjBA,EAAOI,UAAP,uCAAmB,WAAOlB,GAAP,2CAAAhF,EAAA,kEAETsB,EAAOkB,KAAKiD,MAAMT,EAAM1D,MAElB,iBADJb,EAAQa,EAARb,KAHO,wBAKL0F,EAAmD7E,EAAnD6E,KAAMC,EAA6C9E,EAA7C8E,OAAQC,EAAqC/E,EAArC+E,aAAcxB,EAAuBvD,EAAvBuD,OAAQyB,EAAehF,EAAfgF,WACtCrH,EAAmBsH,OAAOC,KAAKH,GAAc,GAC7ClH,EAAaiH,EAAOK,SACpBC,EAAgB,CACpBzH,mBACAC,QAAS,CAAEoH,aAAYH,OAAMQ,UAAU,EAAM9B,UAC7C1F,cAXW,UAakBV,EAAM0D,WAbxB,wBAaLjE,EAbK,EAaLA,aACRY,QAAQC,IAAI,iBAAkBb,GAdjB,UAePgF,EAAkB/D,EAAYF,EAAkBpB,GAfzC,eAiBXK,IAAiBiB,GACjBjB,IAAiBe,GAEjB2C,EAASP,EAAWqF,IACpBtD,KAEAQ,EAAK,oBAAD,OAAqBzE,EAArB,eAAsCF,IAvB/B,UAyBP+E,EACJpG,EAAKI,eACLqI,EAAapH,GAAkB2H,OAAOC,IACtCH,GA5BW,gCA8BI,mBAARjG,IAA2B,EACHa,EAAK+C,MAA9BuC,EAD2B,EAC3BA,OAAQE,EADmB,EACnBA,aAChBhI,QAAQC,IAAI6H,EAAQE,IAhCP,0DAmCfhI,QAAQC,IAAR,MACA8C,IACA/C,QAAQC,IAAI,sBAAuBiG,EAAM1D,MArC1B,0DAAnB,sDAwCAwE,EAAOiB,QAAU,WACfhE,MAAM,qBAER+C,EAAOkB,QAAU,SAAC6G,GAChB9K,MAAM,oBACNjE,QAAQC,IAAI8O,GACZ3I,EAAQ+B,KAAK,WAEfrF,EAASX,EAAUrD,IACnB2H,aAAa2B,QACX,QACA1E,KAAKC,UAAU,CACb1E,YAAaH,EAAKG,YAClBoJ,aAAcvJ,EAAKG,YACnBF,QACAkE,cAGJmD,EAAQ+B,KAAK,KACbpF,IA5FsB,kDA8FtBA,IACA0D,aAAa6B,WAAW,SACxBlC,EAAQ+B,KAAK,UACbnI,QAAQkC,MAAR,MAjGsB,gCAoGxBlC,QAAQC,IAAI,+BApGY,0DAAH,4DCDnB+O,G,8MACJ,oCAAA9N,EAAA,6DACQ2N,EAAcpI,aAAaC,QAAQ,SAD3C,EAE4C+B,KAAKtC,MAAvCrD,EAFV,EAEUA,SAAUsD,EAFpB,EAEoBA,QAAS0I,EAF7B,EAE6BA,MAF7B,SAGQF,GAAaC,EAAaC,EAAOhM,EAAUsD,GAHnD,gD,0EAKA,WAAU,IAAD,EACuBqC,KAAKtC,MAA3B2I,EADD,EACCA,MAAO/P,EADR,EACQA,MACf,OACE,qBAAKwJ,UAAU,8CAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,wBACEA,UAAU,iBACVxI,KAAK,SACLkP,iBAAe,WACfC,iBAAe,eACfC,gBAAc,cACdC,gBAAc,QACdC,aAAW,oBAPb,SASE,sBAAM9G,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BI,GAAG,cAA7C,UACE,cAAC,IAAD,CAAMJ,UAAU,eAAeQ,GAAG,IAAlC,uBAGA,oBAAIR,UAAU,kCAAd,SACGuG,EAAQ,cAAC,GAAD,CAAiB/P,MAAOA,IAAY,cAAC,GAAD,kB,GA3BtCiK,IAAMC,WA2CZC,gBAPS,SAACrJ,GACvB,MAAO,CACLiP,MAAOjP,EAAMf,KAAKG,YAClBF,MAAOc,EAAMf,KAAKC,SAIPmK,CAAyBC,YAAW6F,K,SC1CpCM,GARA,SAAC,GAAD,IAAcrG,EAAd,EAAGsG,UAAgCC,GAAnC,EAAyBV,MAAzB,8CACb,cAAC,IAAD,2BACMU,GADN,IAEEC,OAAQ,SAACtJ,GACP,OAAO,cAAC8C,EAAD,eAAe9C,SCeb+C,gBANS,SAACrJ,GACvB,MAAO,CACLiP,MAAOjP,EAAMf,KAAKG,eAIPiK,EAlBC,SAAC,GAAD,IAAcD,EAAd,EAAGsG,UAAsBT,EAAzB,EAAyBA,MAAUU,EAAnC,6CACd,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,SAACtJ,GACP,OAAK2I,EAGE,cAAC7F,EAAD,eAAe9C,IAFb,cAAC,IAAD,CAAU4C,GAAI,CAAE2G,SAAU,mB,qBCS1BC,I,OAbC,kBACd,sBAAKpH,UAAU,mBAAf,UACE,cAAC,KAAD,CACEA,UAAU,mBACVxI,KAAK,OACL6P,MAAM,QACNvD,OAAQ,KACRD,MAAO,OAET,oBAAI7D,UAAU,MAAd,+BCAEsH,G,4JACJ,WAEE,OADyBpH,KAAKtC,MAAtB7G,QAGJ,mCACE,cAAC,GAAD,MAKF,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,GAAD,CAAQoO,KAAK,SAAS6B,UAAWvJ,IACjC,cAAC,GAAD,CAAQ0H,KAAK,YAAY6B,UAAWhG,IACpC,cAAC,GAAD,CAASmE,KAAK,IAAI6B,UAAWO,iB,GAlBlB9G,IAAMC,WAiChBC,gBANS,SAACrJ,GACvB,MAAO,CACLP,QAASO,EAAMP,WAIJ4J,CAAyB2G,ICrCxCE,IAASN,OACP,cAAC,IAAMO,WAAP,UACE,cAAC,IAAD,CAAUrQ,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJ6E,SAASC,eAAe,SAM1BnE,M","file":"static/js/main.13e836a3.chunk.js","sourcesContent":["const initialState = {\n  user: {\n    email: \"\",\n    chatList: {},\n    accessToken: \"\",\n  },\n  loggedInUserId: \"\",\n  chat: [],\n  currentFocus: \"\",\n  ws: null,\n  loading: false,\n};\n\nexport const userReducer = function (state: any = initialState, action: any) {\n  switch (action.type) {\n    case \"LOGIN\":\n      console.log(action);\n      state = {\n        ...state,\n        user: {\n          email: action.payload.email,\n          chatList: action.payload.chatList,\n          accessToken: action.payload.accessToken,\n        },\n        loggedInUserId: action.payload.loggedInUserId,\n        chat: [],\n      };\n      return state;\n    case \"LOGOUT\":\n      state = {\n        ...state,\n        user: {\n          email: \"\",\n          chatList: {},\n          accessToken: \"\",\n        },\n      };\n      return state;\n    case \"LOAD_CHAT\":\n      state = { ...state, chat: action.payload };\n      return state;\n    case \"START_LOADING\":\n      state = { ...state, loading: true };\n      return state;\n    case \"STOP_LOADING\":\n      state = { ...state, loading: false };\n      return state;\n    case \"SET_FOCUSED_USER\":\n      state = { ...state, currentFocus: action.payload };\n      return state;\n    case \"SET_WS\":\n      state = { ...state, ws: action.payload };\n      return state;\n    case \"SET_CONTACT_LIST\":\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\n      return state;\n    case \"NEW_MESSAGE\":\n      const { receiverUserName, message, senderName } = action.payload;\n      state = {\n        ...state,\n        chat: [...state.chat, { receiverUserName, ...message, senderName }],\n      };\n      return state;\n    default:\n      return state;\n  }\n};\n","import { compose, createStore } from \"redux\";\nimport { userReducer } from \"./reducer/user\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(userReducer, composeEnhancers());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const errors: any = {\n  \"12\": \"LOGIN_FAILED_REASON\",\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\n  \"30\": \"LOGIN_FAILED\",\n  \"32\": \"MOBILE_UNREGISTERED\",\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\n  \"-101\": \"ANOTHER_LOGON\",\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\n  \"-111\": \"INCORRECT_PASSCODE\",\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\n  \"-997\": \"ACCOUNT_RESTRICTED\",\n};\n","import { SHA256 } from \"crypto-js\";\nimport { openDB } from \"idb\";\n\nexport const handleContacts = async (contacts: any, loggedInUserId: number) => {\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(`KAKAOCONTACTS${loggedInUserId}`).toString();\n      const storeName = \"ContactStore\";\n      const key = \"contacts\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, contacts, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await contactsHandlerPromise;\n};\n","export const loginUser = (user: any) => ({\n  type: \"LOGIN\",\n  payload: user,\n});\n\nexport const logoutUser = () => ({\n  type: \"LOGOUT\",\n});\n\nexport const setFocusUser = (name: string) => ({\n  type: \"SET_FOCUSED_USER\",\n  payload: name,\n});\n\nexport const setWs = (ws: any) => ({\n  type: \"SET_WS\",\n  payload: ws,\n});\n\nexport const newMessage = (data: any) => {\n  return {\n    type: \"NEW_MESSAGE\",\n    payload: data,\n  };\n};\n\nexport const loadChat = (messages: any) => ({\n  type: \"LOAD_CHAT\",\n  payload: messages,\n});\n\nexport const setStartLoading = () => ({\n  type: \"START_LOADING\",\n});\n\nexport const setStopLoading = () => ({\n  type: \"STOP_LOADING\",\n});\n\nexport const setContactList = (contactList: any) => ({\n  type: \"SET_CONTACT_LIST\",\n  payload: contactList,\n});\n","import { store } from \"../redux\";\n\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\n\nexport const startLoading = () => {\n  store.dispatch(setStartLoading());\n};\n\nexport const stopLoading = () => {\n  store.dispatch(setStopLoading());\n};\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const tryLoginApi = async (\n  email: string,\n  password: string,\n  deviceName: string,\n  deviceId: string\n) => {\n  const loginPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      console.log(\"accessToken: \", accessToken);\n      if (!accessToken) {\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            email,\n            password,\n            deviceName,\n            deviceId,\n          }),\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/login`;\n        } else {\n          // production code\n          apiEndPoint = \"/login\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        stopLoading();\n        if (result.error) {\n          let errorMessage = errors[`${result.error}`];\n          if (!errorMessage) {\n            errorMessage = result.message;\n          }\n          alert(errorMessage);\n          console.log(\"result errorMessage: \", errorMessage);\n          reject(errorMessage);\n        } else {\n          console.log(\"result: \", result);\n          await handleContacts(result.chatList, result.loggedInUserId);\n          resolve(result);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n  return await loginPromise;\n};\n","import { port } from \"../helpers/config\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const getChatList = async (email: string) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/contact`;\n    } else {\n      // production code\n      apiEndPoint = \"/contact\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { chatList } = result.data;\n      resolve(chatList);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { getChatList } from \"../api/contact\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { setContactList } from \"../redux/action/user\";\n\nexport const handleContactList = async (\n  senderName: string,\n  receiverUserName: string,\n  loggedInUserEmail: string\n) => {\n  const { user: chatList, loggedInUserId } = await store.getState();\n  if (!chatList[senderName] || !chatList[receiverUserName]) {\n    const contactList = await getChatList(loggedInUserEmail);\n    store.dispatch(setContactList(contactList));\n    await handleContacts(chatList, loggedInUserId);\n  }\n};\n","export const scrollToEndMessages = () => {\n  const messageElement = document.getElementById(\n    \"messageContainer\"\n  ) as HTMLElement;\n  messageElement.scrollTop = messageElement.scrollHeight;\n};\n","import { toast } from \"react-toastify\";\n\nexport const success = (message: string) => toast.success(message);\n\nexport const info = (message: string) => toast.info(message);\n\nexport const error = (message: string) => toast.error(message);\n","import { SHA256 } from \"crypto-js\";\n\nimport { deleteDB, openDB } from \"idb\";\n\nexport const handleIncommingMessages = async (\n  messages: any,\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, messages, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await messageHandlerPromise;\n};\n\nexport const getUserMessages = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n    },\n  });\n\n  if (dbNotExists) {\n    db.close();\n    await deleteDB(dbName);\n    return;\n  } else {\n    const data = await db.get(storeName, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const addNewMessageIdb = async (\n  loggedInUserId: number,\n  otherUserId: number,\n  newMessage: any\n) => {\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n    },\n  });\n\n  if (dbNotExists) {\n    db.close();\n    await deleteDB(dbName);\n    return;\n  } else {\n    const newValue = {\n      receiverUserName: newMessage.receiverUserName,\n      senderName: newMessage.senderName,\n      ...newMessage.message,\n    };\n    const data = await db.get(storeName, key);\n    const value = data.concat([newValue]);\n    await db.put(storeName, value, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const lastDbMessageTime = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      let dbNotExists = false;\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          dbNotExists = true;\n        },\n      });\n      if (dbNotExists) {\n        resolve({\n          allMessages: [],\n          lastMessageTimeStamp: 0,\n          logId: 0,\n        });\n        db.close();\n        await deleteDB(dbName);\n      } else {\n        const data = await db.get(storeName, key);\n        resolve({\n          allMessages: data || [],\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\n          logId: data[data.length - 1].logId || 0,\n        });\n      }\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n  return await getLastMessagePromise;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { tryLoginApi } from \"../../api/user\";\nimport { port } from \"../../helpers/config\";\nimport { handleContactList } from \"../../helpers/contact\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\nimport { info } from \"../../helpers/toast\";\nimport { addNewMessageIdb } from \"../../idb/messages\";\nimport { store } from \"../../redux\";\nimport {\n  loginUser,\n  logoutUser,\n  newMessage,\n  setWs,\n} from \"../../redux/action/user\";\nimport { startLoading, stopLoading } from \"../../utils/loading\";\n\nclass Login extends React.Component<any> {\n  loginFormHandler = async (event: any) => {\n    const { history, dispatch }: any = this.props;\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const deviceData = localStorage.getItem(email);\n    if (!deviceData) {\n      alert(\"Please register device first\");\n    } else {\n      try {\n        startLoading();\n        const { deviceName, deviceId } = JSON.parse(deviceData);\n        const user: any = await tryLoginApi(\n          email,\n          password,\n          deviceName,\n          deviceId\n        );\n        console.log(\"user: \", user);\n        let wsEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          wsEndPoint = `ws://localhost:${port}`;\n        } else {\n          // production code\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\n        }\n        const socket = new WebSocket(wsEndPoint);\n        socket.onopen = () => {\n          console.log(\"Socket is open\");\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\n          dispatch(setWs(socket));\n        };\n        socket.onmessage = async (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            const { key } = data;\n            if (key === \"newMesssage\") {\n              const { text, sender, receiverUser, sendAt, attachment } = data;\n              const receiverUserName = Object.keys(receiverUser)[0];\n              const senderName = sender.nickname;\n              const newMessageObj = {\n                receiverUserName,\n                message: { attachment, text, received: true, sendAt },\n                senderName,\n              };\n              const { currentFocus } = await store.getState();\n              console.log(\"currentFocus: \", currentFocus);\n              await handleContactList(senderName, receiverUserName, email);\n              if (\n                currentFocus === senderName ||\n                currentFocus === receiverUserName\n              ) {\n                dispatch(newMessage(newMessageObj));\n                scrollToEndMessages();\n              } else {\n                info(`New Message From ${senderName} to ${receiverUserName}`);\n              }\n              await addNewMessageIdb(\n                user.loggedInUserId,\n                receiverUser[receiverUserName].userId.low,\n                newMessageObj\n              );\n            } else if (key === \"unreadMessages\") {\n              const { userId, messageStore } = data.value;\n              console.log(userId, messageStore);\n            }\n          } catch (error) {\n            console.log(error);\n            stopLoading();\n            console.log(\"We have a message: \", event.data);\n          }\n        };\n        socket.onerror = () => {\n          alert(\"Socket has error\");\n        };\n        socket.onclose = () => {\n          alert(\"Socket is closed\");\n          dispatch(logoutUser());\n          history.push(\"/login\");\n        };\n        dispatch(loginUser(user));\n        localStorage.setItem(\n          \"token\",\n          JSON.stringify({\n            accessToken: user.accessToken,\n            refreshToken: user.accessToken,\n            email,\n            password,\n          })\n        );\n        history.push(\"/\");\n        stopLoading();\n      } catch (error) {\n        stopLoading();\n        localStorage.removeItem(\"token\");\n        console.error(error);\n      }\n    }\n  };\n  render() {\n    return (\n      <>\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userEmail\" className=\"form-label\">\n              Email address\n            </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"userEmail\"\n              required\n              aria-describedby=\"emailHelp\"\n            />\n            <div id=\"emailHelp\" className=\"form-text\">\n              We'll never share your email with anyone else.\n            </div>\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userPassword\" className=\"form-label\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              autoComplete=\"true\"\n              required\n              id=\"userPassword\"\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n            Login\n          </button>\n          <Link to=\"/register\">\n            <button type=\"submit\" className=\"btn btn-outline-info\">\n              Register Device\n            </button>\n          </Link>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    chatList: state.user.chatList,\n    currentFocus: state.currentFocus,\n  };\n};\nexport default connect(mapStateToProps)(withRouter(Login));\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const trySendDeviceRegisterApi = async (\n  deviceName: string,\n  deviceId: string,\n  email: string,\n  password: string\n) => {\n  startLoading();\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\n  };\n  let apiEndPoint = \"\";\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n    // dev code\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\n  } else {\n    // production code\n    apiEndPoint = \"/device/sendCode\";\n  }\n  let result: any = await fetch(apiEndPoint, requestOptions);\n  result = await result.json();\n  stopLoading();\n  if (result.error) {\n    const errorMessage = result.message;\n    alert(errorMessage);\n    console.log(\"result: \", errorMessage);\n  } else {\n    alert(result.message);\n    console.log(result.message);\n  }\n};\n\nexport const trySetDeviceRegisterApi = async (\n  code: string,\n  email: string,\n  password: string\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ code, email, password }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\n    } else {\n      // production code\n      apiEndPoint = \"/device/setCode\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = errors[`${result.error}`];\n      if (!errorMessage) {\n        errorMessage = result.message;\n      }\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      resolve(result.message);\n      alert(result.message);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { Link, useHistory } from \"react-router-dom\";\nimport { v4 as randomId } from \"uuid\";\nimport {\n  trySendDeviceRegisterApi,\n  trySetDeviceRegisterApi,\n} from \"../../api/device\";\n\nconst RegisterDevice = () => {\n  const history = useHistory();\n\n  const registerFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const deviceNameElem = document.getElementById(\n      \"machineName\"\n    ) as HTMLInputElement;\n    const deviceName = deviceNameElem.value;\n    let deviceId = randomId();\n    deviceId = deviceId.split(\"-\").join(\"\");\n    console.log(\"deviceId: \", deviceId);\n    try {\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\n      console.log(\"deviceName: \", deviceName);\n      console.log(\"deviceId: \", deviceId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const registerCodeFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const registerCodeElem = document.getElementById(\n      \"registerCode\"\n    ) as HTMLInputElement;\n    const registerCode = registerCodeElem.value;\n    try {\n      await trySetDeviceRegisterApi(registerCode, email, password);\n      history.push(\"/login\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return (\n    <div>\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userEmail\" className=\"form-label\">\n            Email address\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"userEmail\"\n            required\n            aria-describedby=\"emailHelp\"\n          />\n          <div id=\"emailHelp\" className=\"form-text\">\n            We'll never share your email with anyone else.\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userPassword\" className=\"form-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            autoComplete=\"true\"\n            required\n            id=\"userPassword\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"machineName\" className=\"form-label\">\n            Enter Device Name To Save\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Office Pc\"\n            id=\"machineName\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          Send Code\n        </button>\n        <Link to=\"/login\">\n          <button type=\"submit\" className=\"btn btn-outline-info\">\n            Login\n          </button>\n        </Link>\n      </form>\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"registerCode\" className=\"form-label\">\n            Enter code\n          </label>\n          <input\n            type=\"number\"\n            placeholder=\"1234\"\n            className=\"form-control\"\n            id=\"registerCode\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          Register\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterDevice;\n","import { port } from \"../helpers/config\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const getUserChat = async (\n  email: string,\n  nickNameToGetChat: string,\n  lastMessageTimeStamp: any,\n  lastChatLogId: any,\n  logId: any\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email,\n        nickNameToGetChat,\n        lastMessageTimeStamp,\n        lastChatLogId,\n        startChatLogId: logId,\n      }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/chat`;\n    } else {\n      // production code\n      apiEndPoint = \"/chat\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { userId, messages } = result.data;\n      resolve({ userId, messages });\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\nimport profile from \"../../assets/images/profile.png\";\n\nimport \"./chatListItem.css\";\n\nconst ChatListItem = ({ name, profileImage, onClickHandler }: any) => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  return (\n    <div\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\n        currentFocus === name && \"focusedContact\"\n      }`}\n      onClick={onClickHandler}\n    >\n      <img\n        src={profileImage ? profileImage : profile}\n        className=\"rounded-circle profileWidth\"\n        alt=\"profileImage\"\n      />\n      <h3 className=\"d-inline contactName\">{name}</h3>\n    </div>\n  );\n};\n\nexport default ChatListItem;\n","export const convertFileToBase64 = async (file: any) => {\n  const base64Promise = new Promise((resolve, reject) => {\n    try {\n      var reader = new FileReader();\n      reader.onload = function (e: any) {\n        // The file's text will be printed here\n        console.log(e.target.result);\n        resolve(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      reject(error);\n    }\n  });\n\n  return await base64Promise;\n};\n","import moment from \"moment\";\n\nimport { useSelector } from \"react-redux\";\nimport { convertFileToBase64 } from \"../../helpers/file\";\n\nimport \"./chatWindow.css\";\n\nconst ChatWindow = (props: any) => {\n  const { chat, currentFocus } = useSelector((state: any) => {\n    const { chat, currentFocus } = state;\n    chat.sort((a: any, b: any) => {\n      return a.sendAt - b.sendAt;\n    });\n    chat.forEach(async (messageObj: any) => {\n      if (\n        messageObj.text === \"photo\" &&\n        messageObj.attachment &&\n        messageObj.attachment.thumbnailUrl\n      ) {\n        console.log(\"messageObj: \", messageObj);\n        const result = await fetch(messageObj.attachment.thumbnailUrl, {\n          mode: \"no-cors\",\n        });\n        const blob = await result.blob();\n        const result64 = await convertFileToBase64(blob);\n        console.log(\"result64: \", result64);\n      }\n    });\n\n    return { chat, currentFocus };\n  });\n\n  return (\n    <div className=\"m-2\" id=\"chatWindowContainer\">\n      {console.log(\"props: \", props)}\n      <h1>Chat Window</h1>\n      {chat.length > 0\n        ? chat.map((message: any, index: number) => (\n            <div\n              key={index}\n              className={\n                message.received\n                  ? \"d-flex border-bottom m-2 text-light\"\n                  : \"d-flex flex-row-reverse text-light\"\n              }\n            >\n              {message.text === \"photo\" &&\n                message.attachment &&\n                message.attachment.thumbnailUrl && (\n                  <img\n                    loading=\"lazy\"\n                    alt=\"userImages\"\n                    src={message.attachment.thumbnailUrl}\n                    onClick={() =>\n                      window.open(message.attachment.url, \"_blank\")\n                    }\n                    className=\"hoverPointer\"\n                    width=\"90\"\n                    height=\"90\"\n                  />\n                )}\n              <span\n                className={`m-2 p-2 d-block w-100 rounded ${\n                  currentFocus === message.receiverUserName\n                    ? \"receiverMessage border border-light\"\n                    : \"senderMessage border border-dark\"\n                }`}\n              >\n                {message.text}\n                <hr />\n                <span className=\"w-100 d-flex justify-content-between\">\n                  <span>{moment(message.sendAt).format(\"hh:mm:ss A\")}</span>\n                  <span>{moment(message.sendAt).format(\"DD/MM/YYYY\")}</span>\n                </span>\n              </span>\n            </div>\n          ))\n        : \"Message Will Be Here\"}\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import { port } from \"../helpers/config\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const uploadFile = async (file: any) => {\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      if (accessToken) {\n        console.log(\"accessToken: \", accessToken);\n        var data = new FormData();\n        data.append(\"myFile\", file);\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          body: data,\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\n        } else {\n          // production code\n          apiEndPoint = \"/uploadfile\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        console.log(\"result: \", result);\n        stopLoading();\n        resolve(result);\n      }\n    } catch (error) {\n      stopLoading();\n      reject(error);\n    }\n  });\n  return await fileUploadPromise;\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadFile } from \"../../api/file\";\nimport { errors } from \"../../helpers/errorCodes\";\nimport { convertFileToBase64 } from \"../../helpers/file\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\nimport { success } from \"../../helpers/toast\";\nimport { newMessage } from \"../../redux/action/user\";\nimport \"./messageInput.css\";\n\nconst MessageInput = () => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  const email = useSelector((state: any) => state.user.email);\n  const chatList = useSelector((state: any) => state.user.chatList);\n  const ws = useSelector((state: any) => state.ws);\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const sendMessageHandler = async (event: any) => {\n    try {\n      event.preventDefault();\n      const sendAt = new Date().getTime();\n      const userFileUpload: any = document.getElementById(\n        \"userFileUpload\"\n      ) as HTMLInputElement;\n      if (!currentFocus) {\n        alert(\"Please a contact first\");\n        return;\n      }\n      if (!message && userFileUpload.files.length <= 0) {\n        alert(\"Plase select a file or type some message\");\n        return;\n      }\n      if (userFileUpload.files.length > 0) {\n        for (const file in userFileUpload.files) {\n          if (\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\n          ) {\n            const selectedFile: any = userFileUpload.files[file];\n            const base64 = await convertFileToBase64(selectedFile);\n            console.log(base64);\n            const { path }: any = await uploadFile(selectedFile);\n            const channelId = chatList[currentFocus][`channelId`];\n            ws.send(\n              JSON.stringify({\n                key: \"newMessageFile\",\n                value: {\n                  message,\n                  receiver: currentFocus,\n                  filePath: path,\n                  email,\n                  channelId,\n                },\n              })\n            );\n\n            dispatch(\n              newMessage({\n                receiverUserName: currentFocus,\n                message: {\n                  text: \"photo\",\n                  received: true,\n                  attachment: { thumbnailUrl: base64 },\n                  sendAt,\n                },\n                senderName: \"Self\",\n              })\n            );\n          }\n        }\n      } else {\n        console.log(currentFocus);\n        const channelId = chatList[currentFocus][`channelId`];\n        ws.send(\n          JSON.stringify({\n            key: \"newMessage\",\n            value: { message, receiver: currentFocus, email, channelId },\n          })\n        );\n        dispatch(\n          newMessage({\n            receiverUserName: currentFocus,\n            message: { text: message, received: true, sendAt },\n            senderName: \"Self\",\n          })\n        );\n        setMessage(\"\");\n        const messageContainer: any = document.getElementById(\n          \"chatWindowContainer\"\n        ) as HTMLElement;\n        messageContainer.scrollTop = messageContainer.scrollHeight;\n        // messageContainer.scrollTo(messageContainer.scrollHeight);\n        console.log(\"Fired\");\n      }\n      success(\"Sended Successfully\");\n      scrollToEndMessages();\n    } catch (error) {\n      console.error(errors);\n      errors(\"Error in sending message\");\n    }\n  };\n  return (\n    <div className=\"messageInputContainer\">\n      <form\n        className=\"m-2\"\n        onSubmit={sendMessageHandler}\n        encType=\"multipart/form-data\"\n      >\n        <div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            onInput={(event: any) => setMessage(event.target.value)}\n            value={message}\n          />\n        </div>\n        <div className=\"form-group mt-2\">\n          <input\n            type=\"file\"\n            className=\"form-control-file\"\n            id=\"userFileUpload\"\n          />\n        </div>\n        <button className=\"btn btn-outline-light mt-2\" type=\"submit\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MessageInput;\n","import ChatWindow from \"../chatWindow/chatWindow\";\nimport MessageInput from \"../messageInput/messageInput\";\n\nconst Messages = () => {\n  return (\n    <div>\n      <ChatWindow />\n      <MessageInput />\n    </div>\n  );\n};\n\nexport default Messages;\n","import { connect } from \"react-redux\";\nimport { getUserChat } from \"../../api/chat\";\n\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\nimport Messages from \"../../components/messages/messages\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\nimport { handleIncommingMessages, lastDbMessageTime } from \"../../idb/messages\";\nimport { loadChat, setFocusUser } from \"../../redux/action/user\";\n\nimport \"./home.css\";\n\nconst Home = (props: any) => {\n  const onClickHandler = async (name: string, focusedUserId: number) => {\n    try {\n      const { dispatch, loggedInUserId, user } = props;\n      const lastChatLogId = user.chatList[name]?.lastChatLogId;\n      dispatch(setFocusUser(name));\n      const { allMessages, lastMessageTimeStamp, logId }: any =\n        await lastDbMessageTime(loggedInUserId, focusedUserId);\n      console.log(\"Fired\");\n      console.log(lastMessageTimeStamp);\n      const { messages }: any = await getUserChat(\n        user.email,\n        name,\n        lastMessageTimeStamp,\n        lastChatLogId,\n        logId\n      );\n      dispatch(loadChat([...allMessages, ...messages]));\n      await handleIncommingMessages(\n        [...allMessages, ...messages],\n        loggedInUserId,\n        focusedUserId\n      );\n      scrollToEndMessages();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getChatListItems = () => {\n    const items = [];\n    let index = 0;\n    const chatList = props.user.chatList;\n    for (const key in chatList) {\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\n        const item = chatList[key];\n        items.push(\n          <ChatListItem\n            profileImage={item.displayUserList[0].profileURL}\n            name={item.displayUserList[0].nickname}\n            key={index}\n            onClickHandler={() => {\n              return onClickHandler(\n                item.displayUserList[0].nickname,\n                item.intId\n              );\n            }}\n          />\n        );\n        index++;\n      }\n    }\n\n    return items;\n  };\n  return (\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\n        {/* <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"amir\"\n        />{\" \"}\n        <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"ali\"\n        /> */}\n        {props.user.chatList ? getChatListItems() : \"\"}\n      </div>\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\n        <Messages />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    user: state.user,\n    loggedInUserId: state.loggedInUserId,\n    ws: state.ws,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import { useDispatch } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { logoutUser } from \"../../../redux/action/user\";\n\nconst PrivateNavItems = ({ email }: any) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const logOutHandler = () => {\n    dispatch(logoutUser());\n    localStorage.removeItem(\"token\");\n    history.push(\"/login\");\n  };\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n          Home\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <span className=\"nav-link active\">{email}</span>\n      </li>\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\n        <span className=\"nav-link active\">Logout</span>\n      </li>\n    </>\n  );\n};\n\nexport default PrivateNavItems;\n","import { Link } from \"react-router-dom\";\n\nconst PublicNavItems = () => {\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" to=\"/login\">\n          Login\n        </Link>\n      </li>\n    </>\n  );\n};\n\nexport default PublicNavItems;\n","import { tryLoginApi } from \"../api/user\";\nimport { addNewMessageIdb } from \"../idb/messages\";\nimport { store } from \"../redux\";\nimport { loginUser, newMessage, setWs } from \"../redux/action/user\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\nimport { port } from \"./config\";\nimport { handleContactList } from \"./contact\";\nimport { scrollToEndMessages } from \"./scroll\";\nimport { info } from \"./toast\";\n\nexport const loginHandler = async (\n  isKeepLogin: any,\n  token: any,\n  dispatch: any,\n  history: any\n) => {\n  if (isKeepLogin && !token) {\n    const { email, password } = JSON.parse(isKeepLogin);\n    const deviceData: any = localStorage.getItem(email);\n    try {\n      startLoading();\n      const { deviceName, deviceId } = JSON.parse(deviceData);\n      // const lastMessages = await getLastMessageTime();\n      const user: any = await tryLoginApi(\n        email,\n        password,\n        deviceName,\n        deviceId\n      );\n      let wsEndPoint = \"\";\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n        // dev code\n        wsEndPoint = `ws://localhost:${port}`;\n      } else {\n        // production code\n        wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\n      }\n      const socket = new WebSocket(wsEndPoint);\n      socket.onopen = () => {\n        console.log(\"Socket is open\");\n        socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\n        dispatch(setWs(socket));\n      };\n      socket.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          const { key } = data;\n          if (key === \"newMesssage\") {\n            const { text, sender, receiverUser, sendAt, attachment } = data;\n            const receiverUserName = Object.keys(receiverUser)[0];\n            const senderName = sender.nickname;\n            const newMessageObj = {\n              receiverUserName,\n              message: { attachment, text, received: true, sendAt },\n              senderName,\n            };\n            const { currentFocus } = await store.getState();\n            console.log(\"currentFocus: \", currentFocus);\n            await handleContactList(senderName, receiverUserName, email);\n            if (\n              currentFocus === senderName ||\n              currentFocus === receiverUserName\n            ) {\n              dispatch(newMessage(newMessageObj));\n              scrollToEndMessages();\n            } else {\n              info(`New Message From ${senderName} to ${receiverUserName}`);\n            }\n            await addNewMessageIdb(\n              user.loggedInUserId,\n              receiverUser[receiverUserName].userId.low,\n              newMessageObj\n            );\n          } else if (key === \"unreadMessages\") {\n            const { userId, messageStore } = data.value;\n            console.log(userId, messageStore);\n          }\n        } catch (error) {\n          console.log(error);\n          stopLoading();\n          console.log(\"We have a message: \", event.data);\n        }\n      };\n      socket.onerror = () => {\n        alert(\"Socket has error\");\n      };\n      socket.onclose = (err) => {\n        alert(\"Socket is closed\");\n        console.log(err);\n        history.push(\"/login\");\n      };\n      dispatch(loginUser(user));\n      localStorage.setItem(\n        \"token\",\n        JSON.stringify({\n          accessToken: user.accessToken,\n          refreshToken: user.accessToken,\n          email,\n          password,\n        })\n      );\n      history.push(\"/\");\n      stopLoading();\n    } catch (error) {\n      stopLoading();\n      localStorage.removeItem(\"token\");\n      history.push(\"/login\");\n      console.error(error);\n    }\n  } else {\n    console.log(\"Acoided +++++++++++++++++++\");\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\n\nimport { loginHandler } from \"../../helpers/loginHandler\";\n\nclass Navbar extends React.Component<any> {\n  async componentDidMount() {\n    const isKeepLogin = localStorage.getItem(\"token\");\n    const { dispatch, history, token }: any = this.props;\n    await loginHandler(isKeepLogin, token, dispatch, history);\n  }\n  render() {\n    const { token, email }: any = this.props;\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#alivaNavbar\"\n            aria-controls=\"alivaNavbar\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              AlivaTech\n            </Link>\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n    email: state.user.email,\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Navbar));\n","import { Route } from \"react-router\";\n\nconst Public = ({ component: Component, token, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props: any) => {\n      return <Component {...props} />;\n    }}\n  />\n);\nexport default Public;\n","import { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router\";\n\nconst Private = ({ component: Component, token, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      if (!token) {\n        return <Redirect to={{ pathname: \"/login\" }} />;\n      }\n      return <Component {...props} />;\n    }}\n  />\n);\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n  };\n};\n\nexport default connect(mapStateToProps)(Private);\n","import ReactLoading from \"react-loading\";\n\nimport \"./loading.css\";\n\nconst Loading = () => (\n  <div className=\"loadingContainer\">\n    <ReactLoading\n      className=\"setMarginLoading\"\n      type=\"spin\"\n      color=\"white\"\n      height={\"2%\"}\n      width={\"2%\"}\n    />\n    <h1 className=\"m-3\">Loading.....</h1>\n  </div>\n);\n\nexport default Loading;\n","import { BrowserRouter, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport Login from \"../pages/login/login\";\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\nimport Home from \"../pages/home/home\";\nimport Navbar from \"../components/navbar/navbar\";\nimport Public from \"./public/public\";\nimport { connect } from \"react-redux\";\nimport Private from \"./private/private\";\nimport React from \"react\";\nimport Loading from \"../components/loading/loading\";\n\nclass MainRouter extends React.Component {\n  render() {\n    const { loading }: any = this.props;\n    if (loading) {\n      return (\n        <>\n          <Loading />\n        </>\n      );\n    } else {\n      return (\n        <div>\n          <BrowserRouter>\n            <ToastContainer />\n            <Navbar />\n            <Switch>\n              <Public path=\"/login\" component={Login} />\n              <Public path=\"/register\" component={RegisterDevice} />\n              <Private path=\"/\" component={Home} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    loading: state.loading,\n  };\n};\n\nexport default connect(mapStateToProps)(MainRouter);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { store } from \"./redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}