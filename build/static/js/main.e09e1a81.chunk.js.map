{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","api/user.ts","api/contact.ts","redux/action/user.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","idb/messages.ts","utils/loading.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","api/chat.ts","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","helpers/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","key","openDB","upgrade","db","createObjectStore","put","close","error","tryLoginApi","password","deviceName","deviceId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","getChatList","setCodePromise","data","loginUser","setFocusUser","name","setWs","newMessage","loadChat","messages","setContactList","contactList","handleContactList","loggedInUserEmail","dispatch","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","success","toast","info","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","dbNotExists","deleteDB","newValue","get","value","concat","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","length","sendAt","startLoading","stopLoading","Login","loginFormHandler","event","props","history","preventDefault","emailElem","passwordElem","deviceData","localStorage","getItem","parse","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","text","sender","receiverUser","attachment","Object","keys","nickname","newMessageObj","received","userId","low","messageStore","onerror","onclose","push","setItem","refreshToken","removeItem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","registerFormHandler","deviceNameElem","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","getUserChat","nickNameToGetChat","ChatListItem","profileImage","onClickHandler","useSelector","onClick","src","profile","alt","ChatWindow","sort","b","map","index","thumbnailUrl","width","height","uploadFile","file","fileUploadPromise","FormData","append","convertFileToBase64","base64Promise","reader","FileReader","onload","e","target","readAsDataURL","MessageInput","useDispatch","useState","setMessage","sendMessageHandler","Date","getTime","userFileUpload","files","prototype","hasOwnProperty","call","selectedFile","base64","path","channelId","receiver","filePath","messageContainer","encType","onInput","Messages","focusedUserId","items","item","displayUserList","profileURL","intId","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","isKeepLogin","token","err","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","MainRouter","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e09e1a81.chunk.js","sourcesContent":["const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: [...state.chat, { receiverUserName, ...message, senderName }],\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { openDB } from \"idb\";\r\n\r\nexport const handleContacts = async (contacts: any, loggedInUserId: number) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${loggedInUserId}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const key = \"contacts\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, contacts, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          console.log(\"result: \", result);\r\n          await handleContacts(result.chatList, result.loggedInUserId);\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/contact`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/contact\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { chatList } = result.data;\r\n      resolve(chatList);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n\r\nexport const setContactList = (contactList: any) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const { user: chatList, loggedInUserId } = await store.getState();\r\n  if (!chatList[senderName] || !chatList[receiverUserName]) {\r\n    const contactList = await getChatList(loggedInUserEmail);\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, loggedInUserId);\r\n  }\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const newValue = {\r\n      receiverUserName: newMessage.receiverUserName,\r\n      senderName: newMessage.senderName,\r\n      ...newMessage.message,\r\n    };\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      let dbNotExists = false;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          dbNotExists = true;\r\n        },\r\n      });\r\n      if (dbNotExists) {\r\n        resolve({\r\n          allMessages: [],\r\n          lastMessageTimeStamp: 0,\r\n        });\r\n        db.close();\r\n        await deleteDB(dbName);\r\n      } else {\r\n        const data = await db.get(storeName, key);\r\n        resolve({\r\n          allMessages: data || [],\r\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n  return await getLastMessagePromise;\r\n};\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { tryLoginApi } from \"../../api/user\";\r\nimport { port } from \"../../helpers/config\";\r\nimport { handleContactList } from \"../../helpers/contact\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { info } from \"../../helpers/toast\";\r\nimport { addNewMessageIdb } from \"../../idb/messages\";\r\nimport { store } from \"../../redux\";\r\nimport {\r\n  loginUser,\r\n  logoutUser,\r\n  newMessage,\r\n  setWs,\r\n} from \"../../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../../utils/loading\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId\r\n        );\r\n        console.log(\"user: \", user);\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, sendAt, attachment } = data;\r\n              const receiverUserName = Object.keys(receiverUser)[0];\r\n              const senderName = sender.nickname;\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt },\r\n                senderName,\r\n              };\r\n              const { currentFocus } = await store.getState();\r\n              console.log(\"currentFocus: \", currentFocus);\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await addNewMessageIdb(\r\n                user.loggedInUserId,\r\n                receiverUser[receiverUserName].userId.low,\r\n                newMessageObj\r\n              );\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = () => {\r\n          alert(\"Socket is closed\");\r\n          dispatch(logoutUser());\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        history.push(\"/\");\r\n        stopLoading();\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceNameElem = document.getElementById(\r\n      \"machineName\"\r\n    ) as HTMLInputElement;\r\n    const deviceName = deviceNameElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n          Send Code\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n          Register\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","import { port } from \"../helpers/config\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: any\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, nickNameToGetChat, lastMessageTimeStamp }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = result.data;\r\n      resolve({ userId, messages });\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({ name, profileImage, onClickHandler }: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <img\r\n        src={profileImage ? profileImage : profile}\r\n        className=\"rounded-circle profileWidth\"\r\n        alt=\"profileImage\"\r\n      />\r\n      <h3 className=\"d-inline contactName\">{name}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = (props: any) => {\r\n  const { chat } = useSelector((state: any) => {\r\n    const { chat } = state;\r\n    chat.sort((a: any, b: any) => {\r\n      return a.sendAt - b.sendAt;\r\n    });\r\n    return { chat };\r\n  });\r\n\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      {console.log(\"props: \", props)}\r\n      <h1>Chat Window</h1>\r\n      {chat.map((message: any, index: number) => (\r\n        <div\r\n          key={index}\r\n          className={\r\n            message.received\r\n              ? \"d-flex border-bottom m-2\"\r\n              : \"d-flex flex-row-reverse\"\r\n          }\r\n        >\r\n          {message.text === \"photo\" &&\r\n            message.attachment &&\r\n            message.attachment.thumbnailUrl && (\r\n              <img\r\n                loading=\"lazy\"\r\n                alt=\"userImages\"\r\n                src={message.attachment.thumbnailUrl}\r\n                width=\"90\"\r\n                height=\"90\"\r\n              />\r\n            )}\r\n          <span\r\n            className={\r\n              message.received\r\n                ? \"receiverMessage m-2 p-2 d-block w-100\"\r\n                : \"senderMessage m-2 p-2 d-block\"\r\n            }\r\n          >\r\n            <b>text: </b>\r\n            {message.text}\r\n            <b> from: </b>\r\n            {message.senderName}\r\n            <b> to: </b>\r\n            {message.receiverUserName}\r\n            <b> Sened At: </b>\r\n            {message.sendAt}\r\n          </span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","export const convertFileToBase64 = async (file: any) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: any) {\r\n        // The file's text will be printed here\r\n        console.log(e.target.result);\r\n        resolve(e.target.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\nimport { errors } from \"../../helpers/errorCodes\";\r\nimport { convertFileToBase64 } from \"../../helpers/file\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { success } from \"../../helpers/toast\";\r\nimport { newMessage } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const base64 = await convertFileToBase64(selectedFile);\r\n            console.log(base64);\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n\r\n            dispatch(\r\n              newMessage({\r\n                receiverUserName: currentFocus,\r\n                message: {\r\n                  text: \"photo\",\r\n                  received: true,\r\n                  attachment: { thumbnailUrl: base64 },\r\n                  sendAt,\r\n                },\r\n                senderName: \"Self\",\r\n              })\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        dispatch(\r\n          newMessage({\r\n            receiverUserName: currentFocus,\r\n            message: { text: message, received: true, sendAt },\r\n            senderName: \"Self\",\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n        const messageContainer: any = document.getElementById(\r\n          \"chatWindowContainer\"\r\n        ) as HTMLElement;\r\n        messageContainer.scrollTop = messageContainer.scrollHeight;\r\n        // messageContainer.scrollTo(messageContainer.scrollHeight);\r\n        console.log(\"Fired\");\r\n      }\r\n      success(\"Sended Successfully\");\r\n      scrollToEndMessages();\r\n    } catch (error) {\r\n      console.error(errors);\r\n      errors(\"Error in sending message\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-info mt-2\" type=\"submit\">\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { connect } from \"react-redux\";\r\nimport { getUserChat } from \"../../api/chat\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { handleIncommingMessages, lastDbMessageTime } from \"../../idb/messages\";\r\nimport { loadChat, setFocusUser } from \"../../redux/action/user\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const onClickHandler = async (name: string, focusedUserId: number) => {\r\n    try {\r\n      const { dispatch, loggedInUserId, user } = props;\r\n      dispatch(setFocusUser(name));\r\n      const { allMessages, lastMessageTimeStamp }: any =\r\n        await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n      console.log(\"Fired\");\r\n      console.log(lastMessageTimeStamp);\r\n      const { messages }: any = await getUserChat(\r\n        user.email,\r\n        name,\r\n        lastMessageTimeStamp\r\n      );\r\n      dispatch(loadChat([...allMessages, ...messages]));\r\n      await handleIncommingMessages(\r\n        [...allMessages, ...messages],\r\n        loggedInUserId,\r\n        focusedUserId\r\n      );\r\n      scrollToEndMessages();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(\r\n                item.displayUserList[0].nickname,\r\n                item.intId\r\n              );\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = () => {\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { tryLoginApi } from \"../../api/user\";\r\nimport { startLoading, stopLoading } from \"../../utils/loading\";\r\nimport { port } from \"../../helpers/config\";\r\nimport { loginUser, newMessage, setWs } from \"../../redux/action/user\";\r\nimport { addNewMessageIdb } from \"../../idb/messages\";\r\nimport { store } from \"../../redux\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { info } from \"../../helpers/toast\";\r\nimport { handleContactList } from \"../../helpers/contact\";\r\n// import { getLastMessageTime } from \"../../idb/messages\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    if (isKeepLogin && !token) {\r\n      const { email, password } = JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const lastMessages = await getLastMessageTime();\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, sendAt, attachment } = data;\r\n              const receiverUserName = Object.keys(receiverUser)[0];\r\n              const senderName = sender.nickname;\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt },\r\n                senderName,\r\n              };\r\n              const { currentFocus } = await store.getState();\r\n              console.log(\"currentFocus: \", currentFocus);\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await addNewMessageIdb(\r\n                user.loggedInUserId,\r\n                receiverUser[receiverUserName].userId.low,\r\n                newMessageObj\r\n              );\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        history.push(\"/\");\r\n        stopLoading();\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n    }\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      if (!token) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      }\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import { BrowserRouter, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    if (loading) {\r\n      return (\r\n        <div>\r\n          <h1>Loading ..........</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <BrowserRouter>\r\n            <ToastContainer />\r\n            <Navbar />\r\n            <Switch>\r\n              <Public path=\"/login\" component={Login} />\r\n              <Public path=\"/register\" component={RegisterDevice} />\r\n              <Private path=\"/\" component={Home} />\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { store } from \"./redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}