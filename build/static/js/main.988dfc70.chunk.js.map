{"version":3,"sources":["redux/action/user.ts","components/messageInput/messageInput.tsx","api/file.ts","helpers/file.ts","redux/reducer/user.ts","redux/index.ts","helpers/scroll.ts","reportWebVitals.ts","idb/messages.ts","api/user.ts","utils/loading.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","components/messages/messages.tsx","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","routes/index.tsx","index.tsx","helpers/errorCodes.ts","helpers/toast.ts"],"names":["loginUser","user","type","payload","logoutUser","setFocusUser","name","setWs","ws","newMessage","data","loadChat","messages","setStartLoading","setStopLoading","MessageInput","currentFocus","useSelector","state","email","chatList","dispatch","useDispatch","useState","message","setMessage","sendMessageHandler","event","a","preventDefault","sendAt","Date","getTime","userFileUpload","document","getElementById","alert","files","length","file","Object","prototype","hasOwnProperty","call","selectedFile","convertFileToBase64","base64","console","log","Buffer","Uint8Array","arrayBuffer","from","uploadFile","path","channelId","send","JSON","stringify","key","value","receiver","filePath","receiverUserName","text","received","attachment","thumbnailUrl","senderName","messageContainer","scrollTop","scrollHeight","success","scrollToEndMessages","error","errors","className","onSubmit","encType","onInput","target","id","fileUploadPromise","Promise","resolve","reject","store","getState","accessToken","FormData","append","requestOptions","method","body","apiEndPoint","fetch","result","json","base64Promise","reader","FileReader","onload","e","readAsDataURL","initialState","loggedInUserId","chat","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","action","messageElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","handleIncommingMessages","userId","chatMessages","dbName","SHA256","toString","storeName","openDB","upgrade","db","createObjectStore","put","close","getUserMessages","otherUserId","dbNotExists","get","addNewMessageIdb","deleteDB","newValue","concat","tryLoginApi","password","deviceName","deviceId","loginPromise","headers","errorMessage","startLoading","stopLoading","Login","loginFormHandler","props","history","emailElem","passwordElem","deviceData","localStorage","getItem","parse","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","onmessage","sender","receiverUser","messageObj","keys","newMessageObj","nickname","low","messageStore","onerror","onclose","push","setItem","refreshToken","removeItem","this","htmlFor","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","setCodePromise","RegisterDevice","useHistory","registerFormHandler","deviceNameElem","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","ChatListItem","profileImage","onClickHandler","onClick","src","profile","alt","ChatWindow","useEffect","map","index","width","height","Messages","focusedUserId","getUserChat","time","items","item","displayUserList","profileURL","intId","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","isKeepLogin","token","info","err","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","MainRouter","Home","ReactDOM","StrictMode","toast"],"mappings":"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","file":"static/js/main.988dfc70.chunk.js","sourcesContent":["export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\nimport { errors } from \"../../helpers/errorCodes\";\r\nimport { convertFileToBase64 } from \"../../helpers/file\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { success } from \"../../helpers/toast\";\r\nimport { newMessage } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      let files: any = null;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const base64 = await convertFileToBase64(selectedFile);\r\n            console.log(base64);\r\n            files = Buffer.from(\r\n              new Uint8Array(await selectedFile.arrayBuffer())\r\n            );\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n\r\n            dispatch(\r\n              newMessage({\r\n                receiverUserName: currentFocus,\r\n                message: {\r\n                  text: \"photo\",\r\n                  received: true,\r\n                  attachment: { thumbnailUrl: base64 },\r\n                  sendAt,\r\n                },\r\n                senderName: \"Self\",\r\n              })\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        dispatch(\r\n          newMessage({\r\n            receiverUserName: currentFocus,\r\n            message: { text: message, received: true, sendAt },\r\n            senderName: \"Self\",\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n        const messageContainer: any = document.getElementById(\r\n          \"chatWindowContainer\"\r\n        ) as HTMLElement;\r\n        messageContainer.scrollTop = messageContainer.scrollHeight;\r\n        // messageContainer.scrollTo(messageContainer.scrollHeight);\r\n        console.log(\"Fired\");\r\n      }\r\n      success(\"Sended Successfully\");\r\n      scrollToEndMessages();\r\n    } catch (error) {\r\n      console.error(errors);\r\n      errors(\"Error in sending message\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-info mt-2\" type=\"submit\">\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","export const convertFileToBase64 = async (file: any) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: any) {\r\n        // The file's text will be printed here\r\n        console.log(e.target.result);\r\n        resolve(e.target.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n","const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: [...state.chat, { receiverUserName, ...message, senderName }],\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number\r\n) => {\r\n  for (const user in messages) {\r\n    if (Object.prototype.hasOwnProperty.call(messages, user)) {\r\n      const { userId, messages: chatMessages } = messages[user];\r\n      const dbName = SHA256(`KAKAOCHAT${userId}${loggedInUserId}`).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      console.log(dbName);\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, chatMessages, key);\r\n      db.close();\r\n    }\r\n  }\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const newValue = {\r\n      receiverUserName: newMessage.receiverUserName,\r\n      senderName: newMessage.senderName,\r\n      ...newMessage.message,\r\n    };\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    return data;\r\n  }\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleIncommingMessages } from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          console.log(\"result: \", result);\r\n          const { messages, loggedInUserId } = result;\r\n          handleIncommingMessages(messages, loggedInUserId);\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { tryLoginApi } from \"../../api/user\";\r\nimport { port } from \"../../helpers/config\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { addNewMessageIdb } from \"../../idb/messages\";\r\nimport { store } from \"../../redux\";\r\nimport {\r\n  loginUser,\r\n  logoutUser,\r\n  newMessage,\r\n  setWs,\r\n} from \"../../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../../utils/loading\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch, currentFocus }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId\r\n        );\r\n        console.log(\"user: \", user);\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, sendAt, attachment } = data;\r\n              const messageObj = { text, sender, receiverUser, sendAt };\r\n              console.log(\"We have a message: \", messageObj);\r\n              const receiverUserName = Object.keys(receiverUser)[0];\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt },\r\n                senderName: sender.nickname,\r\n              };\r\n              const { currentFocus } = await store.getState();\r\n              if (\r\n                currentFocus === sender.nickname ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                scrollToEndMessages();\r\n              }\r\n              await addNewMessageIdb(\r\n                user.loggedInUserId,\r\n                receiverUser[receiverUserName].userId.low,\r\n                newMessageObj\r\n              );\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = () => {\r\n          alert(\"Socket is closed\");\r\n          dispatch(logoutUser());\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        history.push(\"/\");\r\n        stopLoading();\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceNameElem = document.getElementById(\r\n      \"machineName\"\r\n    ) as HTMLInputElement;\r\n    const deviceName = deviceNameElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n          Send Code\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-dark m-2\">\r\n          Register\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({ name, profileImage, onClickHandler }: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <img\r\n        src={profileImage ? profileImage : profile}\r\n        className=\"rounded-circle profileWidth\"\r\n        alt=\"profileImage\"\r\n      />\r\n      <h3 className=\"d-inline contactName\">{name}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = (props: any) => {\r\n  const chat = useSelector((state: any) => {\r\n    console.log(\"useSelector\");\r\n    return state.chat;\r\n  });\r\n\r\n  useEffect(() => {\r\n    scrollToEndMessages();\r\n  }, [chat]);\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      {console.log(\"props: \", props)}\r\n      <h1>Chat Window</h1>\r\n      {chat.map((message: any, index: number) => (\r\n        <div\r\n          key={index}\r\n          className={\r\n            message.received\r\n              ? \"d-flex border-bottom m-2\"\r\n              : \"d-flex flex-row-reverse\"\r\n          }\r\n        >\r\n          {message.text === \"photo\" &&\r\n            message.attachment &&\r\n            message.attachment.thumbnailUrl && (\r\n              <img\r\n                loading=\"lazy\"\r\n                alt=\"userImages\"\r\n                src={message.attachment.thumbnailUrl}\r\n                width=\"90\"\r\n                height=\"90\"\r\n              />\r\n            )}\r\n          <span\r\n            className={\r\n              message.received\r\n                ? \"receiverMessage m-2 p-2 d-block w-100\"\r\n                : \"senderMessage m-2 p-2 d-block\"\r\n            }\r\n          >\r\n            <b>text: </b>\r\n            {message.text}\r\n            <b> from: </b>\r\n            {message.senderName}\r\n            <b> to: </b>\r\n            {message.receiverUserName}\r\n            <b> Sened At: </b>\r\n            {message.sendAt}\r\n          </span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { getUserMessages } from \"../../idb/messages\";\r\nimport { loadChat, setFocusUser } from \"../../redux/action/user\";\r\n// import { loadChat } from \"../../redux/action/user\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const onClickHandler = async (name: string, focusedUserId: number) => {\r\n    const { dispatch, loggedInUserId, ws, user } = props;\r\n    dispatch(setFocusUser(name));\r\n    const getUserChat = await getUserMessages(loggedInUserId, focusedUserId);\r\n    dispatch(loadChat(getUserChat));\r\n    ws.send(\r\n      JSON.stringify({\r\n        key: \"isMessageUpdateNeeded\",\r\n        value: {\r\n          time: getUserChat[getUserChat.length - 1].sendAt,\r\n          email: user.email,\r\n          focusedUserId,\r\n        },\r\n      })\r\n    );\r\n    console.log(\"getUserChat: \", getUserChat);\r\n\r\n    // Use websocket to exchange last message timestamp\r\n\r\n    // Then if required we will fetch the latest messages\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(\r\n                item.displayUserList[0].nickname,\r\n                item.intId\r\n              );\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = () => {\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { tryLoginApi } from \"../../api/user\";\r\nimport { startLoading, stopLoading } from \"../../utils/loading\";\r\nimport { port } from \"../../helpers/config\";\r\nimport { loginUser, newMessage, setWs } from \"../../redux/action/user\";\r\nimport { addNewMessageIdb } from \"../../idb/messages\";\r\nimport { store } from \"../../redux\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\nimport { info } from \"../../helpers/toast\";\r\n// import { getLastMessageTime } from \"../../idb/messages\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    if (isKeepLogin && !token) {\r\n      const { email, password } = JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const lastMessages = await getLastMessageTime();\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, sendAt, attachment } = data;\r\n              const receiverUserName = Object.keys(receiverUser)[0];\r\n\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt },\r\n                senderName: sender.nickname,\r\n              };\r\n              const { currentFocus } = await store.getState();\r\n              console.log(\"currentFocus: \", currentFocus);\r\n              if (\r\n                currentFocus === sender.nickname ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(\r\n                  `New Message From ${sender.nickname} to ${receiverUserName}`\r\n                );\r\n              }\r\n              await addNewMessageIdb(\r\n                user.loggedInUserId,\r\n                receiverUser[receiverUserName].userId.low,\r\n                newMessageObj\r\n              );\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        history.push(\"/\");\r\n        stopLoading();\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n    }\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      if (!token) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      }\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import { BrowserRouter, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    if (loading) {\r\n      return (\r\n        <div>\r\n          <h1>Loading ..........</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <BrowserRouter>\r\n            <ToastContainer />\r\n            <Navbar />\r\n            <Switch>\r\n              <Public path=\"/login\" component={Login} />\r\n              <Public path=\"/register\" component={RegisterDevice} />\r\n              <Private path=\"/\" component={Home} />\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { store } from \"./redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n"],"sourceRoot":""}