{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","idb/messages.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/loginHandler.ts","helpers/toast.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","isSending","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","key","openDB","upgrade","db","createObjectStore","put","close","error","getContactListLogs","myTaskPromise","isExists","deleteDB","get","storedContactList","contactList","Object","prototype","hasOwnProperty","call","lastChatLogId","updateContactLogid","sender","receiver","newLogId","handleIncommingMessages","messages","otherUserId","messageHandlerPromise","addNewMessageIdb","newMessage","dbNotExists","newValue","data","value","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","logId","length","sendAt","updatedLastMessageTimeStamp","latestTimeStamp","updatedTimePromise","getLastMessageTimeStamp","timeStamp","updateUserMessages","newMessages","intId","dbItemKey","loginUser","loadChat","setContactList","setSending","sending","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","contactListLogs","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","largestTimeStamp","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","refreshContactList","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","text","receiverUser","attachment","nickname","receiverIntId","senderIntId","newMessageObj","received","toast","info","userId","messageStore","onerror","onclose","err","push","setItem","refreshToken","removeItem","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","newChatCount","useSelector","onClick","src","profile","alt","ChatWindow","imageOnClickHandler","image","createElement","url","w","open","title","appendChild","href","useEffect","map","index","thumbnailUrl","width","height","moment","format","uploadFile","file","fileUploadPromise","FormData","append","MessageInput","useDispatch","setMessage","sendMessageHandler","Date","getTime","userFileUpload","files","selectedFile","path","channelId","filePath","encType","autoFocus","accept","disabled","Messages","getUserChat","nickNameToGetChat","startChatLogId","refreshMessages","focusedName","focusedUserId","items","item","displayUserList","profileURL","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.4aff6e87.chunk.js","sourcesContent":["const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n  isSending: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"SET_SENDING\":\r\n      state = { ...state, isSending: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: state.chat.concat([{ receiverUserName, ...message, senderName }]),\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleContacts = async (contacts: any, email: number) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const key = \"contacts\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, contacts, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n\r\nexport const getContactListLogs = async (email: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const key = \"contacts\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve([]);\r\n      } else {\r\n        const storedContactList = await db.get(storeName, key);\r\n        let contactList: any = {};\r\n        for (const key in storedContactList) {\r\n          if (Object.prototype.hasOwnProperty.call(storedContactList, key)) {\r\n            const { lastChatLogId } = storedContactList[key];\r\n            contactList[key] = { lastChatLogId };\r\n          }\r\n        }\r\n        db.close();\r\n        resolve(contactList);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateContactLogid = async (\r\n  email: number,\r\n  sender: string,\r\n  receiver: string,\r\n  newLogId: number\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const key = \"contacts\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve(false);\r\n      } else {\r\n        const storedContactList = await db.get(storeName, key);\r\n        if (storedContactList[sender]) {\r\n          storedContactList[sender].lastChatLogId = newLogId;\r\n        } else {\r\n          storedContactList[receiver].lastChatLogId = newLogId;\r\n        }\r\n        await db.put(storeName, storedContactList, key);\r\n        db.close();\r\n        resolve(true);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n      db.createObjectStore(storeName);\r\n    },\r\n  });\r\n  const newValue = {\r\n    receiverUserName: newMessage.receiverUserName,\r\n    senderName: newMessage.senderName,\r\n    ...newMessage.message,\r\n  };\r\n  if (dbNotExists) {\r\n    await db.put(storeName, [newValue], key);\r\n    db.close();\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      let dbNotExists = false;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          dbNotExists = true;\r\n        },\r\n      });\r\n      if (dbNotExists) {\r\n        resolve({\r\n          allMessages: [],\r\n          lastMessageTimeStamp: 0,\r\n          logId: 0,\r\n        });\r\n        db.close();\r\n        await deleteDB(dbName);\r\n      } else {\r\n        const data = await db.get(storeName, key);\r\n        resolve({\r\n          allMessages: data || [],\r\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\r\n          logId: data[data.length - 1].logId || 0,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n  return await getLastMessagePromise;\r\n};\r\n\r\nexport const updatedLastMessageTimeStamp = async (\r\n  email: string,\r\n  latestTimeStamp: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, latestTimeStamp, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getLastMessageTimeStamp = async (email: string) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const timeStamp = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(timeStamp);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const updateUserMessages = async (\r\n  loggedInUserId: number,\r\n  newMessages: any\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      for (const key in newMessages) {\r\n        if (Object.prototype.hasOwnProperty.call(newMessages, key)) {\r\n          const { intId, messages } = newMessages[key];\r\n          const dbName = SHA256(\r\n            `KAKAOCHAT${loggedInUserId}${intId}`\r\n          ).toString();\r\n          const storeName = \"MessageStore\";\r\n          const dbItemKey = \"messages\";\r\n          let dbNotExists = false;\r\n          const db = await openDB(dbName, 1, {\r\n            upgrade(db) {\r\n              dbNotExists = true;\r\n              db.createObjectStore(storeName);\r\n            },\r\n          });\r\n          if (dbNotExists) {\r\n            await db.put(storeName, messages, dbItemKey);\r\n            db.close();\r\n          } else {\r\n            const data = await db.get(storeName, dbItemKey);\r\n            const value = data.concat(messages);\r\n            await db.put(storeName, value, dbItemKey);\r\n            db.close();\r\n          }\r\n        }\r\n      }\r\n      resolve(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myTaskPromise;\r\n};\r\n","export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n\r\nexport const setContactList = (contactList: any) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n\r\nexport const setSending = (sending: boolean) => ({\r\n  type: \"SET_SENDING\",\r\n  payload: sending,\r\n});\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport {\r\n  updatedLastMessageTimeStamp,\r\n  updateUserMessages,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string,\r\n  lastMessageTimeStamp: any,\r\n  contactListLogs: any\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        startLoading();\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n            lastMessageTimeStamp,\r\n            contactListLogs,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        stopLoading();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          await handleContacts(result.chatList, result.email);\r\n          await updateUserMessages(result.loggedInUserId, result.chatList);\r\n          console.log(\"result: \", result);\r\n          await updatedLastMessageTimeStamp(\r\n            result.email,\r\n            result.largestTimeStamp\r\n          );\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    // startLoading();\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/contact`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/contact\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    // stopLoading();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { chatList } = result.data;\r\n      resolve(chatList);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const {\r\n    user: { chatList, email },\r\n  } = await store.getState();\r\n  if (!chatList[senderName] && !chatList[receiverUserName]) {\r\n    const contactList = await getChatList(loggedInUserEmail);\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, email);\r\n  }\r\n};\r\n\r\nexport const isInContact = async (name: any) => {\r\n  const isInContactPromise = new Promise(async (resolve, reject) => {\r\n    const { user: chatList } = await store.getState();\r\n    if (!chatList[name]) {\r\n      resolve(false);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await isInContactPromise;\r\n};\r\n\r\nexport const refreshContactList = async () => {\r\n  const {\r\n    user: { email },\r\n  } = await store.getState();\r\n  const contactList = await getChatList(email);\r\n  store.dispatch(setContactList(contactList));\r\n  await handleContacts(contactList, email);\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { tryLoginApi } from \"../api/user\";\r\nimport { getContactListLogs, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  addNewMessageIdb,\r\n  getLastMessageTimeStamp,\r\n  updatedLastMessageTimeStamp,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loginUser, newMessage, setSending, setWs } from \"../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { port } from \"./config\";\r\nimport { handleContactList, isInContact, refreshContactList } from \"./contact\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\nimport { info } from \"./toast\";\r\n\r\nexport const loginHandler = async (\r\n  isKeepLogin: any,\r\n  token: any,\r\n  dispatch: any,\r\n  history: any\r\n) => {\r\n  if (isKeepLogin && !token) {\r\n    const { email, password } = JSON.parse(isKeepLogin);\r\n    const deviceData: any = localStorage.getItem(email);\r\n    try {\r\n      startLoading();\r\n      const { deviceName, deviceId } = JSON.parse(deviceData);\r\n      const contactListLogs = await getContactListLogs(email);\r\n      console.log(\"contactListLogs: \", contactListLogs);\r\n      const lastMessageTimeStamp = await getLastMessageTimeStamp(email);\r\n      const user: any = await tryLoginApi(\r\n        email,\r\n        password,\r\n        deviceName,\r\n        deviceId,\r\n        lastMessageTimeStamp,\r\n        contactListLogs\r\n      );\r\n      let wsEndPoint = \"\";\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n        // dev code\r\n        wsEndPoint = `ws://localhost:${port}`;\r\n      } else {\r\n        // production code\r\n        wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n      }\r\n      const socket = new WebSocket(wsEndPoint);\r\n      socket.onopen = () => {\r\n        console.log(\"Socket is open\");\r\n        socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n        dispatch(setWs(socket));\r\n      };\r\n      socket.onmessage = async (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          const { key } = data;\r\n          if (key === \"newMesssage\") {\r\n            const { text, sender, receiverUser, logId, sendAt, attachment } =\r\n              data;\r\n            console.log(\"newMesssage: \", data);\r\n            const { nickname: receiverUserName, intId: receiverIntId } =\r\n              receiverUser;\r\n            const { nickname: senderName, intId: senderIntId } = sender;\r\n            const newMessageObj = {\r\n              receiverUserName,\r\n              message: { attachment, text, received: true, sendAt, logId },\r\n              senderName,\r\n            };\r\n            await handleContactList(senderName, receiverUserName, email);\r\n            await updateContactLogid(\r\n              email,\r\n              senderName,\r\n              receiverUserName,\r\n              logId\r\n            );\r\n            const { currentFocus } = await store.getState();\r\n            if (\r\n              currentFocus === senderName ||\r\n              currentFocus === receiverUserName\r\n            ) {\r\n              dispatch(newMessage(newMessageObj));\r\n              dispatch(setSending(false));\r\n              scrollToEndMessages();\r\n            } else {\r\n              info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              await refreshContactList();\r\n            }\r\n            const isInContactExists = await isInContact(senderName);\r\n            if (isInContactExists) {\r\n              await addNewMessageIdb(\r\n                user.loggedInUserId,\r\n                receiverIntId,\r\n                newMessageObj\r\n              );\r\n            } else {\r\n              if (senderIntId === user.loggedInUserId) {\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  receiverIntId,\r\n                  newMessageObj\r\n                );\r\n              } else {\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  senderIntId,\r\n                  newMessageObj\r\n                );\r\n              }\r\n              await updatedLastMessageTimeStamp(email, sendAt);\r\n            }\r\n          } else if (key === \"unreadMessages\") {\r\n            const { userId, messageStore } = data.value;\r\n            console.log(userId, messageStore);\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n          stopLoading();\r\n          console.log(\"We have a message: \", event.data);\r\n        }\r\n      };\r\n      socket.onerror = () => {\r\n        alert(\"Socket has error\");\r\n      };\r\n      socket.onclose = (err) => {\r\n        alert(\"Socket is closed\");\r\n        console.log(err);\r\n        history.push(\"/login\");\r\n      };\r\n      dispatch(loginUser(user));\r\n      localStorage.setItem(\r\n        \"token\",\r\n        JSON.stringify({\r\n          accessToken: user.accessToken,\r\n          refreshToken: user.accessToken,\r\n          email,\r\n          password,\r\n        })\r\n      );\r\n      stopLoading();\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      stopLoading();\r\n      localStorage.removeItem(\"token\");\r\n      history.push(\"/login\");\r\n      console.error(error);\r\n    }\r\n  } else {\r\n    console.log(\"Acoided +++++++++++++++++++\");\r\n  }\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        await loginHandler(\r\n          JSON.stringify({ email, password }),\r\n          null,\r\n          dispatch,\r\n          history\r\n        );\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [isLoadingSend, setLoadingSend] = useState(false);\r\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      setLoadingSend(true);\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      setLoadingSend(false);\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingSend(false);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      setLoadingRegister(true);\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      setLoadingRegister(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingRegister(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            onInput={(event: any) => setDeviceName(event.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingSend ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send Code\"\r\n          )}\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingRegister ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Register\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({\r\n  name,\r\n  profileImage,\r\n  newChatCount,\r\n  onClickHandler,\r\n}: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div>\r\n        <img\r\n          src={profileImage ? profileImage : profile}\r\n          className=\"rounded-circle profileWidth\"\r\n          alt=\"profileImage\"\r\n        />\r\n        <h3 className=\"d-inline contactName\">{name}</h3>\r\n      </div>\r\n      {/* {newChatCount > 0 && currentFocus !== name && (\r\n        <div>\r\n          <h3 className=\"d-inline contactName text-danger\">({newChatCount})</h3>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n// import { convertFileToBase64 } from \"../../helpers/file\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = (props: any) => {\r\n  const { chat, currentFocus } = useSelector((state: any) => {\r\n    const { chat, currentFocus } = state;\r\n    // chat.sort((a: any, b: any) => {\r\n    //   return a.sendAt - b.sendAt;\r\n    // });\r\n    // chat.forEach(async (messageObj: any) => {\r\n    //   if (\r\n    //     messageObj.text === \"photo\" &&\r\n    //     messageObj.attachment &&\r\n    //     messageObj.attachment.thumbnailUrl\r\n    //   ) {\r\n    // console.log(\"messageObj: \", messageObj);\r\n    // const result = await fetch(messageObj.attachment.thumbnailUrl, {\r\n    //   mode: \"no-cors\",\r\n    // });\r\n    // const blob = await result.blob();\r\n    // const result64 = await convertFileToBase64(blob);\r\n    // console.log(\"result64: \", result64.length);\r\n    //   }\r\n    // });\r\n\r\n    return { chat, currentFocus };\r\n  });\r\n\r\n  const imageOnClickHandler = async (message: any) => {\r\n    let image = document.createElement(\"img\");\r\n    image.src = message.attachment.url;\r\n    let w: any = window.open(\"\", \"_blank\");\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.body.appendChild(image);\r\n    w.location.href = message.attachment.url;\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToEndMessages();\r\n  }, [chat]);\r\n\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      <h1>Chat Window</h1>\r\n      {chat.length > 0\r\n        ? chat.map((message: any, index: number) => (\r\n            <div\r\n              key={index}\r\n              className={`text-light p-1 w-100 d-flex flex-row ${\r\n                currentFocus === message.receiverUserName\r\n                  ? \"justify-content-end\"\r\n                  : \"justify-content-start\"\r\n              }`}\r\n            >\r\n              <div\r\n                className={`border border-dark rounded p-1 ${\r\n                  currentFocus === message.receiverUserName\r\n                    ? \"receiverMessage\"\r\n                    : \"senderMessage\"\r\n                }`}\r\n              >\r\n                {message.text === \"photo\" &&\r\n                  message.attachment &&\r\n                  message.attachment.thumbnailUrl && (\r\n                    <img\r\n                      loading=\"lazy\"\r\n                      alt=\"userImages\"\r\n                      src={message.attachment.thumbnailUrl}\r\n                      onClick={() => imageOnClickHandler(message)}\r\n                      className=\"hoverPointer\"\r\n                      width=\"90\"\r\n                      height=\"90\"\r\n                    />\r\n                  )}\r\n                <span className=\"m-1 text-wrap\">{message.text} </span>\r\n                <span className=\"small bg-secondary makeItLight rounded p-1\">\r\n                  {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        : \"Message Will Be Here\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\nimport { errors } from \"../../helpers/errorCodes\";\r\nimport { success } from \"../../helpers/toast\";\r\nimport { newMessage, setSending } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  // const loggedInUserId = useSelector((state: any) => state.loggedInUserId);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const isSending = useSelector((state: any) => state.isSending);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      dispatch(setSending(true));\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(errors);\r\n      errors(\"Error in sending message\");\r\n      dispatch(setSending(false));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={isSending ? true : false}\r\n          className=\"btn btn-outline-light mt-2\"\r\n          type=\"submit\"\r\n        >\r\n          {isSending ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { port } from \"../helpers/config\";\r\n// import { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: any,\r\n  lastChatLogId: any,\r\n  logId: any\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email,\r\n        nickNameToGetChat,\r\n        lastMessageTimeStamp,\r\n        lastChatLogId,\r\n        startChatLogId: logId,\r\n      }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = result.data;\r\n      resolve({ userId, messages });\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getUserChat } from \"../api/chat\";\r\nimport { handleIncommingMessages, lastDbMessageTime } from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\n\r\nexport const refreshMessages = async (focusedName: string) => {\r\n  try {\r\n    const { loggedInUserId, user }: any = await store.getState();\r\n    const { dispatch } = store;\r\n    const lastChatLogId = user.chatList[focusedName]?.lastChatLogId;\r\n    const focusedUserId = user.chatList[focusedName]?.intId;\r\n    dispatch(setFocusUser(focusedName));\r\n    const { allMessages, lastMessageTimeStamp, logId }: any =\r\n      await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n    // console.log(\"Fired\");\r\n    // console.log(lastMessageTimeStamp);\r\n    const { messages }: any = await getUserChat(\r\n      user.email,\r\n      focusedName,\r\n      lastMessageTimeStamp,\r\n      lastChatLogId,\r\n      logId\r\n    );\r\n    dispatch(loadChat([...allMessages, ...messages]));\r\n    await handleIncommingMessages(\r\n      [...allMessages, ...messages],\r\n      loggedInUserId,\r\n      focusedUserId\r\n    );\r\n    scrollToEndMessages();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { refreshContactList } from \"../../helpers/contact\";\r\nimport { refreshMessages } from \"../../helpers/messages\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const onClickHandler = async (name: string) => {\r\n    await refreshMessages(name);\r\n    await refreshContactList();\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            newChatCount={item.newChatCount}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(item.displayUserList[0].nickname);\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = () => {\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n    ws.close();\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    try {\r\n      await loginHandler(isKeepLogin, token, dispatch, history);\r\n    } catch (error) {}\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, loading, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      console.log(\"token: \", token);\r\n      if (!token && !loading) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import ReactLoading from \"react-loading\";\r\n\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"loadingContainer\">\r\n    <ReactLoading\r\n      className=\"setMarginLoading\"\r\n      type=\"spin\"\r\n      color=\"white\"\r\n      height={\"2%\"}\r\n      width={\"2%\"}\r\n    />\r\n    <h1 className=\"m-3\">Loading.....</h1>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\nimport Loading from \"../components/loading/loading\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ToastContainer />\r\n          <Navbar />\r\n          {loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <Private exact path=\"/\" component={Home} />\r\n              <Public exact path=\"/login\" component={Login} />\r\n              <Public exact path=\"/register\" component={RegisterDevice} />\r\n            </>\r\n          )}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { store } from \"./redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Router from \"./routes\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}