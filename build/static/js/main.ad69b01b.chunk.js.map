{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","idb/messages.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","api/chat.ts","assets/images/profile.png","components/chatListItem/chatListItem.tsx","helpers/file.ts","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","key","openDB","upgrade","db","createObjectStore","put","close","error","loginUser","setFocusUser","name","newMessage","data","loadChat","messages","setContactList","contactList","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","dbNotExists","deleteDB","newValue","get","value","concat","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","logId","length","sendAt","getChatList","setCodePromise","handleContactList","loggedInUserEmail","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","success","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","text","sender","receiverUser","attachment","Object","keys","nickname","newMessageObj","received","info","userId","low","messageStore","onerror","onclose","err","push","setItem","refreshToken","removeItem","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","registerFormHandler","deviceNameElem","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","ChatListItem","profileImage","onClickHandler","useSelector","onClick","src","profile","alt","convertFileToBase64","file","base64Promise","reader","FileReader","onload","e","target","readAsDataURL","ChatWindow","sort","b","forEach","messageObj","thumbnailUrl","mode","blob","result64","map","index","open","url","width","height","moment","format","uploadFile","fileUploadPromise","FormData","append","MessageInput","useDispatch","useState","setMessage","sendMessageHandler","Date","getTime","userFileUpload","files","prototype","hasOwnProperty","call","selectedFile","base64","path","channelId","receiver","filePath","messageContainer","encType","onInput","accept","Messages","focusedUserId","items","item","displayUserList","profileURL","intId","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ad69b01b.chunk.js","sourcesContent":["const initialState = {\n  user: {\n    email: \"\",\n    chatList: {},\n    accessToken: \"\",\n  },\n  loggedInUserId: \"\",\n  chat: [],\n  currentFocus: \"\",\n  ws: null,\n  loading: false,\n};\n\nexport const userReducer = function (state: any = initialState, action: any) {\n  switch (action.type) {\n    case \"LOGIN\":\n      console.log(action);\n      state = {\n        ...state,\n        user: {\n          email: action.payload.email,\n          chatList: action.payload.chatList,\n          accessToken: action.payload.accessToken,\n        },\n        loggedInUserId: action.payload.loggedInUserId,\n        chat: [],\n      };\n      return state;\n    case \"LOGOUT\":\n      state = {\n        ...state,\n        user: {\n          email: \"\",\n          chatList: {},\n          accessToken: \"\",\n        },\n      };\n      return state;\n    case \"LOAD_CHAT\":\n      state = { ...state, chat: action.payload };\n      return state;\n    case \"START_LOADING\":\n      state = { ...state, loading: true };\n      return state;\n    case \"STOP_LOADING\":\n      state = { ...state, loading: false };\n      return state;\n    case \"SET_FOCUSED_USER\":\n      state = { ...state, currentFocus: action.payload };\n      return state;\n    case \"SET_WS\":\n      state = { ...state, ws: action.payload };\n      return state;\n    case \"SET_CONTACT_LIST\":\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\n      return state;\n    case \"NEW_MESSAGE\":\n      const { receiverUserName, message, senderName } = action.payload;\n      state = {\n        ...state,\n        chat: [...state.chat, { receiverUserName, ...message, senderName }],\n      };\n      return state;\n    default:\n      return state;\n  }\n};\n","import { compose, createStore } from \"redux\";\nimport { userReducer } from \"./reducer/user\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(userReducer, composeEnhancers());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const errors: any = {\n  \"12\": \"LOGIN_FAILED_REASON\",\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\n  \"30\": \"LOGIN_FAILED\",\n  \"32\": \"MOBILE_UNREGISTERED\",\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\n  \"-101\": \"ANOTHER_LOGON\",\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\n  \"-111\": \"INCORRECT_PASSCODE\",\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\n  \"-997\": \"ACCOUNT_RESTRICTED\",\n};\n","import { SHA256 } from \"crypto-js\";\nimport { openDB } from \"idb\";\n\nexport const handleContacts = async (contacts: any, loggedInUserId: number) => {\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(`KAKAOCONTACTS${loggedInUserId}`).toString();\n      const storeName = \"ContactStore\";\n      const key = \"contacts\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, contacts, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await contactsHandlerPromise;\n};\n","export const loginUser = (user: any) => ({\n  type: \"LOGIN\",\n  payload: user,\n});\n\nexport const logoutUser = () => ({\n  type: \"LOGOUT\",\n});\n\nexport const setFocusUser = (name: string) => ({\n  type: \"SET_FOCUSED_USER\",\n  payload: name,\n});\n\nexport const setWs = (ws: any) => ({\n  type: \"SET_WS\",\n  payload: ws,\n});\n\nexport const newMessage = (data: any) => {\n  return {\n    type: \"NEW_MESSAGE\",\n    payload: data,\n  };\n};\n\nexport const loadChat = (messages: any) => ({\n  type: \"LOAD_CHAT\",\n  payload: messages,\n});\n\nexport const setStartLoading = () => ({\n  type: \"START_LOADING\",\n});\n\nexport const setStopLoading = () => ({\n  type: \"STOP_LOADING\",\n});\n\nexport const setContactList = (contactList: any) => ({\n  type: \"SET_CONTACT_LIST\",\n  payload: contactList,\n});\n","import { store } from \"../redux\";\n\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\n\nexport const startLoading = () => {\n  store.dispatch(setStartLoading());\n};\n\nexport const stopLoading = () => {\n  store.dispatch(setStopLoading());\n};\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const tryLoginApi = async (\n  email: string,\n  password: string,\n  deviceName: string,\n  deviceId: string\n) => {\n  const loginPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      console.log(\"accessToken: \", accessToken);\n      if (!accessToken) {\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            email,\n            password,\n            deviceName,\n            deviceId,\n          }),\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/login`;\n        } else {\n          // production code\n          apiEndPoint = \"/login\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        stopLoading();\n        if (result.error) {\n          let errorMessage = errors[`${result.error}`];\n          if (!errorMessage) {\n            errorMessage = result.message;\n          }\n          alert(errorMessage);\n          console.log(\"result errorMessage: \", errorMessage);\n          reject(errorMessage);\n        } else {\n          console.log(\"result: \", result);\n          await handleContacts(result.chatList, result.loggedInUserId);\n          resolve(result);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n  return await loginPromise;\n};\n","import { SHA256 } from \"crypto-js\";\n\nimport { deleteDB, openDB } from \"idb\";\n\nexport const handleIncommingMessages = async (\n  messages: any,\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          db.createObjectStore(storeName);\n        },\n      });\n      await db.put(storeName, messages, key);\n      db.close();\n      resolve(true);\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n\n  return await messageHandlerPromise;\n};\n\nexport const getUserMessages = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n    },\n  });\n\n  if (dbNotExists) {\n    db.close();\n    await deleteDB(dbName);\n    return;\n  } else {\n    const data = await db.get(storeName, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const addNewMessageIdb = async (\n  loggedInUserId: number,\n  otherUserId: number,\n  newMessage: any\n) => {\n  const dbName = SHA256(`KAKAOCHAT${otherUserId}${loggedInUserId}`).toString();\n  const storeName = \"MessageStore\";\n  const key = \"messages\";\n  let dbNotExists = false;\n  const db = await openDB(dbName, 1, {\n    upgrade(db) {\n      dbNotExists = true;\n    },\n  });\n\n  if (dbNotExists) {\n    db.close();\n    await deleteDB(dbName);\n    return;\n  } else {\n    const newValue = {\n      receiverUserName: newMessage.receiverUserName,\n      senderName: newMessage.senderName,\n      ...newMessage.message,\n    };\n    const data = await db.get(storeName, key);\n    const value = data.concat([newValue]);\n    await db.put(storeName, value, key);\n    db.close();\n    return data;\n  }\n};\n\nexport const lastDbMessageTime = async (\n  loggedInUserId: number,\n  otherUserId: number\n) => {\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\n    try {\n      const dbName = SHA256(\n        `KAKAOCHAT${otherUserId}${loggedInUserId}`\n      ).toString();\n      const storeName = \"MessageStore\";\n      const key = \"messages\";\n      let dbNotExists = false;\n      const db = await openDB(dbName, 1, {\n        upgrade(db) {\n          dbNotExists = true;\n        },\n      });\n      if (dbNotExists) {\n        resolve({\n          allMessages: [],\n          lastMessageTimeStamp: 0,\n          logId: 0,\n        });\n        db.close();\n        await deleteDB(dbName);\n      } else {\n        const data = await db.get(storeName, key);\n        resolve({\n          allMessages: data || [],\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\n          logId: data[data.length - 1].logId || 0,\n        });\n      }\n    } catch (error) {\n      reject(error);\n      console.error(error);\n    }\n  });\n  return await getLastMessagePromise;\n};\n","import { port } from \"../helpers/config\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const getChatList = async (email: string) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/contact`;\n    } else {\n      // production code\n      apiEndPoint = \"/contact\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { chatList } = result.data;\n      resolve(chatList);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { getChatList } from \"../api/contact\";\nimport { handleContacts } from \"../idb/contacts\";\nimport { store } from \"../redux\";\nimport { setContactList } from \"../redux/action/user\";\n\nexport const handleContactList = async (\n  senderName: string,\n  receiverUserName: string,\n  loggedInUserEmail: string\n) => {\n  const { user: chatList, loggedInUserId } = await store.getState();\n  if (!chatList[senderName] || !chatList[receiverUserName]) {\n    const contactList = await getChatList(loggedInUserEmail);\n    store.dispatch(setContactList(contactList));\n    await handleContacts(chatList, loggedInUserId);\n  }\n};\n","export const scrollToEndMessages = () => {\n  const messageElement = document.getElementById(\n    \"messageContainer\"\n  ) as HTMLElement;\n  messageElement.scrollTop = messageElement.scrollHeight;\n};\n","import { toast } from \"react-toastify\";\n\nexport const success = (message: string) => toast.success(message);\n\nexport const info = (message: string) => toast.info(message);\n\nexport const error = (message: string) => toast.error(message);\n","import { tryLoginApi } from \"../api/user\";\nimport { addNewMessageIdb } from \"../idb/messages\";\nimport { store } from \"../redux\";\nimport { loginUser, newMessage, setWs } from \"../redux/action/user\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\nimport { port } from \"./config\";\nimport { handleContactList } from \"./contact\";\nimport { scrollToEndMessages } from \"./scroll\";\nimport { info } from \"./toast\";\n\nexport const loginHandler = async (\n  isKeepLogin: any,\n  token: any,\n  dispatch: any,\n  history: any\n) => {\n  if (isKeepLogin && !token) {\n    const { email, password } = JSON.parse(isKeepLogin);\n    const deviceData: any = localStorage.getItem(email);\n    try {\n      startLoading();\n      const { deviceName, deviceId } = JSON.parse(deviceData);\n      // const lastMessages = await getLastMessageTime();\n      const user: any = await tryLoginApi(\n        email,\n        password,\n        deviceName,\n        deviceId\n      );\n      let wsEndPoint = \"\";\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n        // dev code\n        wsEndPoint = `ws://localhost:${port}`;\n      } else {\n        // production code\n        wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\n      }\n      const socket = new WebSocket(wsEndPoint);\n      socket.onopen = () => {\n        console.log(\"Socket is open\");\n        socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\n        dispatch(setWs(socket));\n      };\n      socket.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          const { key } = data;\n          if (key === \"newMesssage\") {\n            const { text, sender, receiverUser, sendAt, attachment } = data;\n            const receiverUserName = Object.keys(receiverUser)[0];\n            const senderName = sender.nickname;\n            const newMessageObj = {\n              receiverUserName,\n              message: { attachment, text, received: true, sendAt },\n              senderName,\n            };\n            const { currentFocus } = await store.getState();\n            console.log(\"currentFocus: \", currentFocus);\n            await handleContactList(senderName, receiverUserName, email);\n            if (\n              currentFocus === senderName ||\n              currentFocus === receiverUserName\n            ) {\n              dispatch(newMessage(newMessageObj));\n              scrollToEndMessages();\n            } else {\n              info(`New Message From ${senderName} to ${receiverUserName}`);\n            }\n            await addNewMessageIdb(\n              user.loggedInUserId,\n              receiverUser[receiverUserName].userId.low,\n              newMessageObj\n            );\n          } else if (key === \"unreadMessages\") {\n            const { userId, messageStore } = data.value;\n            console.log(userId, messageStore);\n          }\n        } catch (error) {\n          console.log(error);\n          stopLoading();\n          console.log(\"We have a message: \", event.data);\n        }\n      };\n      socket.onerror = () => {\n        alert(\"Socket has error\");\n      };\n      socket.onclose = (err) => {\n        alert(\"Socket is closed\");\n        console.log(err);\n        history.push(\"/login\");\n      };\n      dispatch(loginUser(user));\n      localStorage.setItem(\n        \"token\",\n        JSON.stringify({\n          accessToken: user.accessToken,\n          refreshToken: user.accessToken,\n          email,\n          password,\n        })\n      );\n      stopLoading();\n      history.push(\"/\");\n    } catch (error) {\n      stopLoading();\n      localStorage.removeItem(\"token\");\n      history.push(\"/login\");\n      console.error(error);\n    }\n  } else {\n    console.log(\"Acoided +++++++++++++++++++\");\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { loginHandler } from \"../../helpers/loginHandler\";\n\nclass Login extends React.Component<any> {\n  loginFormHandler = async (event: any) => {\n    const { history, dispatch }: any = this.props;\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const deviceData = localStorage.getItem(email);\n    if (!deviceData) {\n      alert(\"Please register device first\");\n    } else {\n      try {\n        await loginHandler(\n          JSON.stringify({ email, password }),\n          null,\n          dispatch,\n          history\n        );\n        history.push(\"/\");\n      } catch (error) {\n        console.error(error);\n        history.push(\"/login\");\n      }\n    }\n  };\n  render() {\n    return (\n      <>\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userEmail\" className=\"form-label\">\n              Email address\n            </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"userEmail\"\n              required\n              aria-describedby=\"emailHelp\"\n            />\n            <div id=\"emailHelp\" className=\"form-text\">\n              We'll never share your email with anyone else.\n            </div>\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"userPassword\" className=\"form-label\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              autoComplete=\"true\"\n              required\n              id=\"userPassword\"\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n            Login\n          </button>\n          <Link to=\"/register\">\n            <button type=\"submit\" className=\"btn btn-outline-info\">\n              Register Device\n            </button>\n          </Link>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    chatList: state.user.chatList,\n    currentFocus: state.currentFocus,\n  };\n};\nexport default connect(mapStateToProps)(withRouter(Login));\n","import { port } from \"../helpers/config\";\nimport { errors } from \"../helpers/errorCodes\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const trySendDeviceRegisterApi = async (\n  deviceName: string,\n  deviceId: string,\n  email: string,\n  password: string\n) => {\n  startLoading();\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\n  };\n  let apiEndPoint = \"\";\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n    // dev code\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\n  } else {\n    // production code\n    apiEndPoint = \"/device/sendCode\";\n  }\n  let result: any = await fetch(apiEndPoint, requestOptions);\n  result = await result.json();\n  stopLoading();\n  if (result.error) {\n    const errorMessage = result.message;\n    alert(errorMessage);\n    console.log(\"result: \", errorMessage);\n  } else {\n    alert(result.message);\n    console.log(result.message);\n  }\n};\n\nexport const trySetDeviceRegisterApi = async (\n  code: string,\n  email: string,\n  password: string\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ code, email, password }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\n    } else {\n      // production code\n      apiEndPoint = \"/device/setCode\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = errors[`${result.error}`];\n      if (!errorMessage) {\n        errorMessage = result.message;\n      }\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      resolve(result.message);\n      alert(result.message);\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","import { Link, useHistory } from \"react-router-dom\";\nimport { v4 as randomId } from \"uuid\";\nimport {\n  trySendDeviceRegisterApi,\n  trySetDeviceRegisterApi,\n} from \"../../api/device\";\n\nconst RegisterDevice = () => {\n  const history = useHistory();\n\n  const registerFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const deviceNameElem = document.getElementById(\n      \"machineName\"\n    ) as HTMLInputElement;\n    const deviceName = deviceNameElem.value;\n    let deviceId = randomId();\n    deviceId = deviceId.split(\"-\").join(\"\");\n    console.log(\"deviceId: \", deviceId);\n    try {\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\n      console.log(\"deviceName: \", deviceName);\n      console.log(\"deviceId: \", deviceId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const registerCodeFormHandler = async (event: any) => {\n    event.preventDefault();\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\n    const email = emailElem.value;\n    const passwordElem = document.getElementById(\n      \"userPassword\"\n    ) as HTMLInputElement;\n\n    const password = passwordElem.value;\n    const registerCodeElem = document.getElementById(\n      \"registerCode\"\n    ) as HTMLInputElement;\n    const registerCode = registerCodeElem.value;\n    try {\n      await trySetDeviceRegisterApi(registerCode, email, password);\n      history.push(\"/login\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return (\n    <div>\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userEmail\" className=\"form-label\">\n            Email address\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"userEmail\"\n            required\n            aria-describedby=\"emailHelp\"\n          />\n          <div id=\"emailHelp\" className=\"form-text\">\n            We'll never share your email with anyone else.\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"userPassword\" className=\"form-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            autoComplete=\"true\"\n            required\n            id=\"userPassword\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"machineName\" className=\"form-label\">\n            Enter Device Name To Save\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Office Pc\"\n            id=\"machineName\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          Send Code\n        </button>\n        <Link to=\"/login\">\n          <button type=\"submit\" className=\"btn btn-outline-info\">\n            Login\n          </button>\n        </Link>\n      </form>\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"registerCode\" className=\"form-label\">\n            Enter code\n          </label>\n          <input\n            type=\"number\"\n            placeholder=\"1234\"\n            className=\"form-control\"\n            id=\"registerCode\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\n          Register\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterDevice;\n","import { port } from \"../helpers/config\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const getUserChat = async (\n  email: string,\n  nickNameToGetChat: string,\n  lastMessageTimeStamp: any,\n  lastChatLogId: any,\n  logId: any\n) => {\n  const setCodePromise = new Promise(async (resolve, reject) => {\n    startLoading();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email,\n        nickNameToGetChat,\n        lastMessageTimeStamp,\n        lastChatLogId,\n        startChatLogId: logId,\n      }),\n    };\n    let apiEndPoint = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      // dev code\n      apiEndPoint = `http://localhost:${port}/chat`;\n    } else {\n      // production code\n      apiEndPoint = \"/chat\";\n    }\n    let result: any = await fetch(apiEndPoint, requestOptions);\n    result = await result.json();\n    stopLoading();\n    if (result.error) {\n      let errorMessage = result.message;\n      alert(errorMessage);\n      console.log(\"result: \", result);\n      console.log(\"errorMessage: \", errorMessage);\n      reject(errorMessage);\n    } else {\n      const { userId, messages } = result.data;\n      resolve({ userId, messages });\n      console.log(result);\n    }\n  });\n\n  return await setCodePromise;\n};\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\nimport profile from \"../../assets/images/profile.png\";\n\nimport \"./chatListItem.css\";\n\nconst ChatListItem = ({ name, profileImage, onClickHandler }: any) => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  return (\n    <div\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\n        currentFocus === name && \"focusedContact\"\n      }`}\n      onClick={onClickHandler}\n    >\n      <img\n        src={profileImage ? profileImage : profile}\n        className=\"rounded-circle profileWidth\"\n        alt=\"profileImage\"\n      />\n      <h3 className=\"d-inline contactName\">{name}</h3>\n    </div>\n  );\n};\n\nexport default ChatListItem;\n","export const convertFileToBase64 = async (file: any) => {\n  const base64Promise = new Promise((resolve, reject) => {\n    try {\n      var reader = new FileReader();\n      reader.onload = function (e: any) {\n        // The file's text will be printed here\n        console.log(e.target.result);\n        resolve(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      reject(error);\n    }\n  });\n\n  return await base64Promise;\n};\n","import moment from \"moment\";\n\nimport { useSelector } from \"react-redux\";\nimport { convertFileToBase64 } from \"../../helpers/file\";\n\nimport \"./chatWindow.css\";\n\nconst ChatWindow = (props: any) => {\n  const { chat, currentFocus } = useSelector((state: any) => {\n    const { chat, currentFocus } = state;\n    chat.sort((a: any, b: any) => {\n      return a.sendAt - b.sendAt;\n    });\n    chat.forEach(async (messageObj: any) => {\n      if (\n        messageObj.text === \"photo\" &&\n        messageObj.attachment &&\n        messageObj.attachment.thumbnailUrl\n      ) {\n        console.log(\"messageObj: \", messageObj);\n        const result = await fetch(messageObj.attachment.thumbnailUrl, {\n          mode: \"no-cors\",\n        });\n        const blob = await result.blob();\n        const result64 = await convertFileToBase64(blob);\n        console.log(\"result64: \", result64);\n      }\n    });\n\n    return { chat, currentFocus };\n  });\n\n  return (\n    <div className=\"m-2\" id=\"chatWindowContainer\">\n      {console.log(\"props: \", props)}\n      <h1>Chat Window</h1>\n      {chat.length > 0\n        ? chat.map((message: any, index: number) => (\n            <div\n              key={index}\n              className={\n                message.received\n                  ? \"d-flex border-bottom m-2 text-light\"\n                  : \"d-flex flex-row-reverse text-light\"\n              }\n            >\n              {message.text === \"photo\" &&\n                message.attachment &&\n                message.attachment.thumbnailUrl && (\n                  <img\n                    loading=\"lazy\"\n                    alt=\"userImages\"\n                    src={message.attachment.thumbnailUrl}\n                    onClick={() =>\n                      window.open(message.attachment.url, \"_blank\")\n                    }\n                    className=\"hoverPointer\"\n                    width=\"90\"\n                    height=\"90\"\n                  />\n                )}\n              <span\n                className={`m-2 p-2 d-block w-100 rounded ${\n                  currentFocus === message.receiverUserName\n                    ? \"receiverMessage border border-light\"\n                    : \"senderMessage border border-dark\"\n                }`}\n              >\n                {message.text}\n                <hr />\n                <span className=\"w-100 d-flex justify-content-between\">\n                  <span>{moment(message.sendAt).format(\"hh:mm:ss A\")}</span>\n                  <span>{moment(message.sendAt).format(\"DD/MM/YYYY\")}</span>\n                </span>\n              </span>\n            </div>\n          ))\n        : \"Message Will Be Here\"}\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import { port } from \"../helpers/config\";\nimport { store } from \"../redux\";\nimport { startLoading, stopLoading } from \"../utils/loading\";\n\nexport const uploadFile = async (file: any) => {\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\n    try {\n      const {\n        user: { accessToken },\n      } = store.getState();\n      if (accessToken) {\n        console.log(\"accessToken: \", accessToken);\n        var data = new FormData();\n        data.append(\"myFile\", file);\n        startLoading();\n        const requestOptions = {\n          method: \"POST\",\n          body: data,\n        };\n        let apiEndPoint = \"\";\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n          // dev code\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\n        } else {\n          // production code\n          apiEndPoint = \"/uploadfile\";\n        }\n        let result: any = await fetch(apiEndPoint, requestOptions);\n        result = await result.json();\n        console.log(\"result: \", result);\n        stopLoading();\n        resolve(result);\n      }\n    } catch (error) {\n      stopLoading();\n      reject(error);\n    }\n  });\n  return await fileUploadPromise;\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadFile } from \"../../api/file\";\nimport { errors } from \"../../helpers/errorCodes\";\nimport { convertFileToBase64 } from \"../../helpers/file\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\nimport { success } from \"../../helpers/toast\";\nimport { newMessage } from \"../../redux/action/user\";\nimport \"./messageInput.css\";\n\nconst MessageInput = () => {\n  const currentFocus = useSelector((state: any) => state.currentFocus);\n  const email = useSelector((state: any) => state.user.email);\n  const chatList = useSelector((state: any) => state.user.chatList);\n  const ws = useSelector((state: any) => state.ws);\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const sendMessageHandler = async (event: any) => {\n    try {\n      event.preventDefault();\n      const sendAt = new Date().getTime();\n      const userFileUpload: any = document.getElementById(\n        \"userFileUpload\"\n      ) as HTMLInputElement;\n      if (!currentFocus) {\n        alert(\"Please a contact first\");\n        return;\n      }\n      if (!message && userFileUpload.files.length <= 0) {\n        alert(\"Plase select a file or type some message\");\n        return;\n      }\n      if (userFileUpload.files.length > 0) {\n        for (const file in userFileUpload.files) {\n          if (\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\n          ) {\n            const selectedFile: any = userFileUpload.files[file];\n            const base64 = await convertFileToBase64(selectedFile);\n            console.log(base64);\n            const { path }: any = await uploadFile(selectedFile);\n            const channelId = chatList[currentFocus][`channelId`];\n            ws.send(\n              JSON.stringify({\n                key: \"newMessageFile\",\n                value: {\n                  message,\n                  receiver: currentFocus,\n                  filePath: path,\n                  email,\n                  channelId,\n                },\n              })\n            );\n\n            dispatch(\n              newMessage({\n                receiverUserName: currentFocus,\n                message: {\n                  text: \"photo\",\n                  received: true,\n                  attachment: { thumbnailUrl: base64 },\n                  sendAt,\n                },\n                senderName: \"Self\",\n              })\n            );\n          }\n        }\n      } else {\n        console.log(currentFocus);\n        const channelId = chatList[currentFocus][`channelId`];\n        ws.send(\n          JSON.stringify({\n            key: \"newMessage\",\n            value: { message, receiver: currentFocus, email, channelId },\n          })\n        );\n        dispatch(\n          newMessage({\n            receiverUserName: currentFocus,\n            message: { text: message, received: true, sendAt },\n            senderName: \"Self\",\n          })\n        );\n        setMessage(\"\");\n        const messageContainer: any = document.getElementById(\n          \"chatWindowContainer\"\n        ) as HTMLElement;\n        messageContainer.scrollTop = messageContainer.scrollHeight;\n        // messageContainer.scrollTo(messageContainer.scrollHeight);\n        console.log(\"Fired\");\n      }\n      success(\"Sended Successfully\");\n      scrollToEndMessages();\n    } catch (error) {\n      console.error(errors);\n      errors(\"Error in sending message\");\n    }\n  };\n  return (\n    <div className=\"messageInputContainer\">\n      <form\n        className=\"m-2\"\n        onSubmit={sendMessageHandler}\n        encType=\"multipart/form-data\"\n      >\n        <div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            onInput={(event: any) => setMessage(event.target.value)}\n            value={message}\n          />\n        </div>\n        <div className=\"form-group mt-2\">\n          <input\n            type=\"file\"\n            className=\"form-control-file\"\n            id=\"userFileUpload\"\n            accept=\"image/*\"\n          />\n        </div>\n        <button className=\"btn btn-outline-light mt-2\" type=\"submit\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MessageInput;\n","import ChatWindow from \"../chatWindow/chatWindow\";\nimport MessageInput from \"../messageInput/messageInput\";\n\nconst Messages = () => {\n  return (\n    <div>\n      <ChatWindow />\n      <MessageInput />\n    </div>\n  );\n};\n\nexport default Messages;\n","import { connect } from \"react-redux\";\nimport { getUserChat } from \"../../api/chat\";\n\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\nimport Messages from \"../../components/messages/messages\";\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\nimport { handleIncommingMessages, lastDbMessageTime } from \"../../idb/messages\";\nimport { loadChat, setFocusUser } from \"../../redux/action/user\";\n\nimport \"./home.css\";\n\nconst Home = (props: any) => {\n  const onClickHandler = async (name: string, focusedUserId: number) => {\n    try {\n      const { dispatch, loggedInUserId, user } = props;\n      const lastChatLogId = user.chatList[name]?.lastChatLogId;\n      dispatch(setFocusUser(name));\n      const { allMessages, lastMessageTimeStamp, logId }: any =\n        await lastDbMessageTime(loggedInUserId, focusedUserId);\n      console.log(\"Fired\");\n      console.log(lastMessageTimeStamp);\n      const { messages }: any = await getUserChat(\n        user.email,\n        name,\n        lastMessageTimeStamp,\n        lastChatLogId,\n        logId\n      );\n      dispatch(loadChat([...allMessages, ...messages]));\n      await handleIncommingMessages(\n        [...allMessages, ...messages],\n        loggedInUserId,\n        focusedUserId\n      );\n      scrollToEndMessages();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getChatListItems = () => {\n    const items = [];\n    let index = 0;\n    const chatList = props.user.chatList;\n    for (const key in chatList) {\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\n        const item = chatList[key];\n        items.push(\n          <ChatListItem\n            profileImage={item.displayUserList[0].profileURL}\n            name={item.displayUserList[0].nickname}\n            key={index}\n            onClickHandler={() => {\n              return onClickHandler(\n                item.displayUserList[0].nickname,\n                item.intId\n              );\n            }}\n          />\n        );\n        index++;\n      }\n    }\n\n    return items;\n  };\n  return (\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\n        {/* <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"amir\"\n        />{\" \"}\n        <ChatListItem\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n          name=\"ali\"\n        /> */}\n        {props.user.chatList ? getChatListItems() : \"\"}\n      </div>\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\n        <Messages />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    user: state.user,\n    loggedInUserId: state.loggedInUserId,\n    ws: state.ws,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { logoutUser } from \"../../../redux/action/user\";\n\nconst PrivateNavItems = ({ email }: any) => {\n  const ws = useSelector((state: any) => state.ws);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const logOutHandler = () => {\n    dispatch(logoutUser());\n    localStorage.removeItem(\"token\");\n    history.push(\"/login\");\n    ws.close();\n  };\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n          Home\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <span className=\"nav-link active\">{email}</span>\n      </li>\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\n        <span className=\"nav-link active\">Logout</span>\n      </li>\n    </>\n  );\n};\n\nexport default PrivateNavItems;\n","import { Link } from \"react-router-dom\";\n\nconst PublicNavItems = () => {\n  return (\n    <>\n      <li className=\"nav-item\">\n        <Link className=\"nav-link active\" to=\"/login\">\n          Login\n        </Link>\n      </li>\n    </>\n  );\n};\n\nexport default PublicNavItems;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\n\nimport { loginHandler } from \"../../helpers/loginHandler\";\n\nclass Navbar extends React.Component<any> {\n  async componentDidMount() {\n    const isKeepLogin = localStorage.getItem(\"token\");\n    const { dispatch, history, token }: any = this.props;\n    try {\n      await loginHandler(isKeepLogin, token, dispatch, history);\n      history.push(\"/\");\n    } catch (error) {}\n  }\n  render() {\n    const { token, email }: any = this.props;\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#alivaNavbar\"\n            aria-controls=\"alivaNavbar\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              AlivaTech\n            </Link>\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n    email: state.user.email,\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Navbar));\n","import { Route } from \"react-router\";\n\nconst Public = ({ component: Component, token, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props: any) => {\n      return <Component {...props} />;\n    }}\n  />\n);\nexport default Public;\n","import { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router\";\n\nconst Private = ({ component: Component, token, ...rest }: any) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      if (!token) {\n        return <Redirect to={{ pathname: \"/login\" }} />;\n      }\n      return <Component {...props} />;\n    }}\n  />\n);\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.accessToken,\n  };\n};\n\nexport default connect(mapStateToProps)(Private);\n","import ReactLoading from \"react-loading\";\n\nimport \"./loading.css\";\n\nconst Loading = () => (\n  <div className=\"loadingContainer\">\n    <ReactLoading\n      className=\"setMarginLoading\"\n      type=\"spin\"\n      color=\"white\"\n      height={\"2%\"}\n      width={\"2%\"}\n    />\n    <h1 className=\"m-3\">Loading.....</h1>\n  </div>\n);\n\nexport default Loading;\n","import { BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport Login from \"../pages/login/login\";\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\nimport Home from \"../pages/home/home\";\nimport Navbar from \"../components/navbar/navbar\";\nimport Public from \"./public/public\";\nimport { connect } from \"react-redux\";\nimport Private from \"./private/private\";\nimport React from \"react\";\nimport Loading from \"../components/loading/loading\";\n\nclass MainRouter extends React.Component {\n  render() {\n    const { loading }: any = this.props;\n    if (loading) {\n      return (\n        <>\n          <Loading />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <BrowserRouter>\n            <ToastContainer />\n            <Navbar />\n            <Public exact path=\"/login\" component={Login} />\n            <Public path=\"/register\" component={RegisterDevice} />\n            <Private path=\"/\" component={Home} />\n          </BrowserRouter>\n        </>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    loading: state.loading,\n  };\n};\n\nexport default connect(mapStateToProps)(MainRouter);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { store } from \"./redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}