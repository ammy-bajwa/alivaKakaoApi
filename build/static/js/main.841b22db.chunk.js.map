{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","idb/messages.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/file.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","isSending","chatLoading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","openDB","upgrade","db","createObjectStore","messageDb","key","Object","prototype","hasOwnProperty","call","element","put","intId","messages","forEach","displayUserList","nickname","logId","text","attachment","thumbnailUrlBase64","urlBase64","thumbnailKey","thumbnailUrl","urlKey","url","myImgDb","get","isThumbnailAlreadyExists","isurlAlreadyExists","Blob","mt","close","setTimeout","error","updateContactLogid","newLogId","myTaskPromise","getLatestContactLogid","value","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","newMessage","dbNotExists","newValue","data","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","deleteDB","length","sendAt","updatedLastMessageTimeStamp","latestTimeStamp","updatedTimePromise","getLastMessageTimeStamp","timeStamp","updateUserMessages","newMessages","dbItemKey","updateMessageLogs","userName","userId","getImgBlobFromIdb","myWorkingTask","loginUser","loadChat","setContactList","contactList","setSending","sending","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","latestLogId","myAccessToken","myRefreshToken","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","refreshToken","apiEndPoint","fetch","result","json","errorMessage","alert","biggestChatLog","largestTimeStamp","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","refreshContactList","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","sender","receiverUser","receiverIntId","senderIntId","newMessageObj","received","info","messageStore","onerror","onclose","err","push","setItem","removeItem","myWorkingPromise","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","newChatCount","useSelector","onClick","src","profile","alt","ChatWindow","sort","b","imageOnClickHandler","image","createElement","w","open","title","appendChild","href","useEffect","map","index","thumbnail","width","height","moment","format","uploadFile","file","fileUploadPromise","FormData","append","MessageInput","useDispatch","setMessage","sendMessageHandler","userFileUpload","files","selectedFile","path","channelId","receiver","filePath","encType","autoFocus","accept","disabled","Messages","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","readBlobText","blob","base64Promise","reader","FileReader","onload","e","readAsText","refreshMessages","focusedName","focusedUserId","messagesToSet","imgPromisesChat","imgBlob","base64","all","items","item","profileURL","getChatListItems","PrivateNavItems","logOutHandler","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.841b22db.chunk.js","sourcesContent":["const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n  isSending: false,\r\n  chatLoading: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"START_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: true };\r\n      return state;\r\n    case \"STOP_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"SET_SENDING\":\r\n      state = { ...state, isSending: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: state.chat.concat([{ receiverUserName, ...message, senderName }]),\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleContacts = async (contacts: any, email: number) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const messageDb = await openDB(`${email}_message_logs`, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(\"myLogsData\");\r\n        },\r\n      });\r\n      for (const key in contacts) {\r\n        if (Object.prototype.hasOwnProperty.call(contacts, key)) {\r\n          const element = contacts[key];\r\n          await db.put(storeName, element, element.intId);\r\n          element.messages.forEach(async (message: any) => {\r\n            const key = `${element.displayUserList[0].nickname}__${element.intId}__${message.logId}`;\r\n            if (\r\n              message?.text === \"photo\" &&\r\n              message?.attachment &&\r\n              message?.attachment?.thumbnailUrlBase64 &&\r\n              message?.attachment?.urlBase64\r\n            ) {\r\n              // open the db and check if data already exists\r\n              const dbName = SHA256(\"KakaoUserImages\").toString();\r\n              const storeName = \"imgStore\";\r\n              const thumbnailKey = SHA256(\r\n                message.attachment.thumbnailUrl\r\n              ).toString();\r\n              message.attachment.thumbnailKey = thumbnailKey;\r\n              const urlKey = SHA256(message.attachment.url).toString();\r\n              message.attachment.urlKey = urlKey;\r\n              const myImgDb = await openDB(dbName, 1, {\r\n                async upgrade(myImgDb) {\r\n                  myImgDb.createObjectStore(storeName);\r\n                },\r\n              });\r\n              const isThumbnailAlreadyExists = await myImgDb.get(\r\n                storeName,\r\n                thumbnailKey\r\n              );\r\n              const isurlAlreadyExists = await myImgDb.get(storeName, urlKey);\r\n              if (!isThumbnailAlreadyExists) {\r\n                console.log(\"Img message: \", message);\r\n                await myImgDb.put(\r\n                  storeName,\r\n                  new Blob([message.attachment.thumbnailUrlBase64], {\r\n                    type: message.attachment.mt,\r\n                  }),\r\n                  thumbnailKey\r\n                );\r\n              }\r\n              if (!isurlAlreadyExists) {\r\n                await myImgDb.put(\r\n                  storeName,\r\n                  new Blob([message.attachment.urlBase64], {\r\n                    type: message.attachment.mt,\r\n                  }),\r\n                  urlKey\r\n                );\r\n              }\r\n              myImgDb.close();\r\n            }\r\n            await messageDb.put(\"myLogsData\", message, key);\r\n          });\r\n        }\r\n      }\r\n      db.close();\r\n      setTimeout(() => {\r\n        messageDb.close();\r\n      }, 1000);\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n\r\nexport const getContactListLogs = async (email: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve([]);\r\n      } else {\r\n        const storeKeys = await db.getAllKeys(storeName);\r\n        let contactList: any = {};\r\n        storeKeys.forEach(async (element) => {\r\n          const { lastChatLogId } = await db.get(storeName, element);\r\n          contactList[lastChatLogId] = { lastChatLogId };\r\n        });\r\n        db.close();\r\n        resolve(contactList);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateContactLogid = async (email: string, newLogId: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, newLogId, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const getLatestContactLogid = async (email: any) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const value = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(value);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n      db.createObjectStore(storeName);\r\n    },\r\n  });\r\n  const newValue = {\r\n    receiverUserName: newMessage.receiverUserName,\r\n    senderName: newMessage.senderName,\r\n    ...newMessage.message,\r\n  };\r\n  if (dbNotExists) {\r\n    await db.put(storeName, [newValue], key);\r\n    db.close();\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      let dbNotExists = false;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          dbNotExists = true;\r\n        },\r\n      });\r\n      if (dbNotExists) {\r\n        resolve({\r\n          allMessages: [],\r\n          lastMessageTimeStamp: 0,\r\n          logId: 0,\r\n        });\r\n        db.close();\r\n        await deleteDB(dbName);\r\n      } else {\r\n        const data = await db.get(storeName, key);\r\n        resolve({\r\n          allMessages: data || [],\r\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\r\n          logId: data[data.length - 1].logId || 0,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n  return await getLastMessagePromise;\r\n};\r\n\r\nexport const updatedLastMessageTimeStamp = async (\r\n  email: string,\r\n  latestTimeStamp: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, latestTimeStamp, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getLastMessageTimeStamp = async (email: string) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const timeStamp = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(timeStamp);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const updateUserMessages = async (\r\n  loggedInUserId: number,\r\n  newMessages: any\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      for (const key in newMessages) {\r\n        if (Object.prototype.hasOwnProperty.call(newMessages, key)) {\r\n          const { intId, messages } = newMessages[key];\r\n          const dbName = SHA256(\r\n            `KAKAOCHAT${loggedInUserId}${intId}`\r\n          ).toString();\r\n          const storeName = \"MessageStore\";\r\n          const dbItemKey = \"messages\";\r\n          let dbNotExists = false;\r\n          const db = await openDB(dbName, 1, {\r\n            upgrade(db) {\r\n              dbNotExists = true;\r\n              db.createObjectStore(storeName);\r\n            },\r\n          });\r\n          if (dbNotExists) {\r\n            await db.put(storeName, messages, dbItemKey);\r\n            db.close();\r\n          } else {\r\n            const data = await db.get(storeName, dbItemKey);\r\n            const value = data.concat(messages);\r\n            await db.put(storeName, value, dbItemKey);\r\n            db.close();\r\n          }\r\n        }\r\n      }\r\n      resolve(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateMessageLogs = async (\r\n  email: string,\r\n  userName: string,\r\n  userId: number,\r\n  message: any,\r\n  logId: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = `${email}_message_logs`;\r\n      const storeName = \"myLogsData\";\r\n      const key = `${userName}__${userId}__${logId}`;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, message, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getImgBlobFromIdb = async (key: string) => {\r\n  const myWorkingTask = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\"KakaoUserImages\").toString();\r\n      const storeName = \"imgStore\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const value = await db.get(storeName, key);\r\n      resolve(value);\r\n      db.close();\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myWorkingTask;\r\n};\r\n","export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n\r\nexport const setStartChatLoading = () => ({\r\n  type: \"START_CHAT_LOADING\",\r\n});\r\n\r\nexport const setStopChatLoading = () => ({\r\n  type: \"STOP_CHAT_LOADING\",\r\n});\r\n\r\nexport const setContactList = (contactList: any) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n\r\nexport const setSending = (sending: boolean) => ({\r\n  type: \"SET_SENDING\",\r\n  payload: sending,\r\n});\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleContacts, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  updatedLastMessageTimeStamp,\r\n  updateUserMessages,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string,\r\n  lastMessageTimeStamp: any,\r\n  latestLogId: any,\r\n  myAccessToken: string = \"\",\r\n  myRefreshToken: string = \"\"\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        startLoading();\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n            lastMessageTimeStamp,\r\n            latestLogId,\r\n            accessToken: myAccessToken,\r\n            refreshToken: myRefreshToken,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        stopLoading();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          await handleContacts(result.chatList, result.email);\r\n          await updateUserMessages(result.loggedInUserId, result.chatList);\r\n          await updateContactLogid(email, result.biggestChatLog);\r\n          console.log(\"result: \", result);\r\n          await updatedLastMessageTimeStamp(\r\n            result.email,\r\n            result.largestTimeStamp\r\n          );\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n\r\n// export const logoutUserNodejs = async (\r\n//   deviceId: string,\r\n//   deviceName: string,\r\n//   accessToken: string,\r\n//   refreshToken: string\r\n// ) => {\r\n//   const myWorkingPromise = new Promise(async (resolve, reject) => {\r\n//     try {\r\n//       const requestOptions = {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({\r\n//           accessToken,\r\n//           refreshToken,\r\n//           deviceId,\r\n//           deviceName,\r\n//         }),\r\n//       };\r\n//       let apiEndPoint = \"\";\r\n//       if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n//         // dev code\r\n//         apiEndPoint = `http://localhost:${port}/login/logout`;\r\n//       } else {\r\n//         // production code\r\n//         apiEndPoint = \"/login/logout\";\r\n//       }\r\n//       let result: any = await fetch(apiEndPoint, requestOptions);\r\n//       resolve(true);\r\n//     } catch (error) {\r\n//       reject(error);\r\n//     }\r\n//   });\r\n//   return await myWorkingPromise;\r\n// };\r\n","import { port } from \"../helpers/config\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    // startLoading();\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/contact`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/contact\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    // stopLoading();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { chatList } = result.data;\r\n      resolve(chatList);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const {\r\n    user: { chatList, email },\r\n  } = await store.getState();\r\n  if (!chatList[senderName] && !chatList[receiverUserName]) {\r\n    const contactList = await getChatList(loggedInUserEmail);\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, email);\r\n  }\r\n};\r\n\r\nexport const isInContact = async (name: any) => {\r\n  const isInContactPromise = new Promise(async (resolve, reject) => {\r\n    const { user: chatList } = await store.getState();\r\n    if (!chatList[name]) {\r\n      resolve(false);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await isInContactPromise;\r\n};\r\n\r\nexport const refreshContactList = async () => {\r\n  const {\r\n    user: { email },\r\n  } = await store.getState();\r\n  const contactList = await getChatList(email);\r\n  store.dispatch(setContactList(contactList));\r\n  await handleContacts(contactList, email);\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import { tryLoginApi } from \"../api/user\";\r\nimport { getLatestContactLogid, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  addNewMessageIdb,\r\n  getLastMessageTimeStamp,\r\n  updatedLastMessageTimeStamp,\r\n  updateMessageLogs,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loginUser, newMessage, setSending, setWs } from \"../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { port } from \"./config\";\r\nimport { handleContactList, isInContact, refreshContactList } from \"./contact\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\nimport { info } from \"./toast\";\r\n\r\nexport const loginHandler = async (\r\n  isKeepLogin: any,\r\n  token: any,\r\n  dispatch: any,\r\n  history: any\r\n) => {\r\n  const myWorkingPromise = await new Promise(async (resolve, reject) => {\r\n    if (isKeepLogin && !token) {\r\n      const { email, password, accessToken, refreshToken } =\r\n        JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const contactListLogs = await getContactListLogs(email);\r\n        // console.log(\"contactListLogs: \", contactListLogs);\r\n        const lastMessageTimeStamp = await getLastMessageTimeStamp(email);\r\n        const latestLogId = await getLatestContactLogid(email);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId,\r\n          lastMessageTimeStamp,\r\n          latestLogId,\r\n          accessToken,\r\n          refreshToken\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, logId, sendAt, attachment } =\r\n                data;\r\n              console.log(\"newMesssage: \", data);\r\n              const { nickname: receiverUserName, intId: receiverIntId } =\r\n                receiverUser;\r\n              const { nickname: senderName, intId: senderIntId } = sender;\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt, logId },\r\n                senderName,\r\n              };\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              await updateContactLogid(email, logId);\r\n              const { currentFocus } = await store.getState();\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                dispatch(setSending(false));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await refreshContactList();\r\n              const isInContactExists = await isInContact(senderName);\r\n              if (isInContactExists) {\r\n                await updateMessageLogs(\r\n                  email,\r\n                  receiverUserName,\r\n                  receiverIntId,\r\n                  newMessageObj,\r\n                  logId\r\n                );\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  receiverIntId,\r\n                  newMessageObj\r\n                );\r\n              } else {\r\n                if (senderIntId === user.loggedInUserId) {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    receiverUserName,\r\n                    receiverIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    receiverIntId,\r\n                    newMessageObj\r\n                  );\r\n                } else {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    senderName,\r\n                    senderIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    senderIntId,\r\n                    newMessageObj\r\n                  );\r\n                }\r\n                await updatedLastMessageTimeStamp(email, sendAt);\r\n              }\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        stopLoading();\r\n        history.push(\"/\");\r\n        resolve(true);\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n        reject(true);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await myWorkingPromise;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        await loginHandler(\r\n          JSON.stringify({ email, password }),\r\n          null,\r\n          dispatch,\r\n          history\r\n        );\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [isLoadingSend, setLoadingSend] = useState(false);\r\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      setLoadingSend(true);\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      setLoadingSend(false);\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingSend(false);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      setLoadingRegister(true);\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      setLoadingRegister(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingRegister(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            onInput={(event: any) => setDeviceName(event.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingSend ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send Code\"\r\n          )}\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingRegister ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Register\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({\r\n  name,\r\n  profileImage,\r\n  newChatCount,\r\n  onClickHandler,\r\n}: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div>\r\n        <img\r\n          src={profileImage ? profileImage : profile}\r\n          className=\"rounded-circle profileWidth\"\r\n          alt=\"profileImage\"\r\n        />\r\n        <h3 className=\"d-inline contactName\">{name}</h3>\r\n      </div>\r\n      {/* {newChatCount > 0 && currentFocus !== name && (\r\n        <div>\r\n          <h3 className=\"d-inline contactName text-danger\">({newChatCount})</h3>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import moment from \"moment\";\r\n// import axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\n// import { deleteDB, openDB } from \"idb\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = () => {\r\n  const { chat, currentFocus, chatLoading }: any = useSelector((state: any) => {\r\n    const { chat, currentFocus, chatLoading } = state;\r\n    chat.sort((a: any, b: any) => {\r\n      return a.sendAt - b.sendAt;\r\n    });\r\n    return { chat, currentFocus, chatLoading };\r\n  });\r\n  const imageOnClickHandler = async (message: any) => {\r\n    let image = document.createElement(\"img\");\r\n    image.src = message.attachment.url;\r\n    let w: any = window.open(\"\", \"_blank\");\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.body.appendChild(image);\r\n    w.location.href = message.attachment.url;\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToEndMessages();\r\n  }, [chatLoading, chat]);\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      <h1>Chat Window</h1>\r\n      {chatLoading && \"Loading.....\"}\r\n      {!chatLoading &&\r\n        chat?.length > 0 &&\r\n        chat.map((message: any, index: number) => (\r\n          <div\r\n            key={index}\r\n            className={`text-light p-1 w-100 d-flex flex-row ${\r\n              currentFocus === message.receiverUserName\r\n                ? \"justify-content-end\"\r\n                : \"justify-content-start\"\r\n            }`}\r\n          >\r\n            <div\r\n              className={`border border-dark rounded p-1 ${\r\n                currentFocus === message.receiverUserName\r\n                  ? \"receiverMessage\"\r\n                  : \"senderMessage\"\r\n              }`}\r\n            >\r\n              {message.text === \"photo\" &&\r\n                message.attachment &&\r\n                message.attachment.thumbnailUrl && (\r\n                  <img\r\n                    loading=\"lazy\"\r\n                    alt=\"userImages\"\r\n                    src={\r\n                      message.attachment.thumbnail\r\n                        ? message.attachment.thumbnail\r\n                        : message.attachment.thumbnailUrl\r\n                    }\r\n                    onClick={() => imageOnClickHandler(message)}\r\n                    className=\"hoverPointer p-1\"\r\n                    width=\"90\"\r\n                    height=\"90\"\r\n                  />\r\n                )}\r\n              {message.text !== \"photo\" &&\r\n                !message.attachment.name &&\r\n                (!message?.attachment || !message.attachment?.thumbnailUrl) && (\r\n                  <span className=\"m-1 text-wrap\">{message.text}</span>\r\n                )}\r\n              {console.log(message)}\r\n              {message.attachment.name && (\r\n                <span className=\"m-1 text-wrap\">{message.attachment.alt}</span>\r\n              )}\r\n              <span className=\"small bg-secondary makeItLight rounded p-1\">\r\n                {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\n// import { errors } from \"../../helpers/errorCodes\";\r\nimport { error } from \"../../helpers/toast\";\r\nimport { setSending } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  // const loggedInUserId = useSelector((state: any) => state.loggedInUserId);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const isSending = useSelector((state: any) => state.isSending);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      // const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      dispatch(setSending(true));\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n          }\r\n        }\r\n        userFileUpload.value = \"\";\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      error(\"Error in sending message\");\r\n      dispatch(setSending(false));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={isSending ? true : false}\r\n          className=\"btn btn-outline-light mt-2\"\r\n          type=\"submit\"\r\n        >\r\n          {isSending ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { port } from \"../helpers/config\";\r\n// import { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: any,\r\n  lastChatLogId: any,\r\n  logId: any\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email,\r\n        nickNameToGetChat,\r\n        lastMessageTimeStamp,\r\n        lastChatLogId,\r\n        startChatLogId: logId,\r\n      }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = result.data;\r\n      resolve({ userId, messages });\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","export const convertFileToBase64 = async (file: any) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: any) {\r\n        // The file's text will be printed here\r\n        resolve(e.target.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n\r\nexport const readBlobText = async (blob: any) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: any) {\r\n        // The file's text will be printed here\r\n        resolve(e.target.result);\r\n      };\r\n      reader.readAsText(blob);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n","import { getUserChat } from \"../api/chat\";\r\nimport { getLatestContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  getImgBlobFromIdb,\r\n  handleIncommingMessages,\r\n  lastDbMessageTime,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\r\nimport { readBlobText } from \"./file\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\n\r\nexport const refreshMessages = async (focusedName: string) => {\r\n  try {\r\n    const { loggedInUserId, user }: any = await store.getState();\r\n    const { dispatch } = store;\r\n    const lastChatLogId = getLatestContactLogid(user.email);\r\n    const focusedUserId = user.chatList[focusedName]?.intId;\r\n    dispatch(setFocusUser(focusedName));\r\n    const { allMessages, lastMessageTimeStamp, logId }: any =\r\n      await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n    const { messages }: any = await getUserChat(\r\n      user.email,\r\n      focusedName,\r\n      lastMessageTimeStamp,\r\n      lastChatLogId,\r\n      logId\r\n    );\r\n    const messagesToSet = [...messages, ...allMessages];\r\n    let imgPromisesChat = messagesToSet.map(async (message: any) => {\r\n      if (message.text === \"photo\") {\r\n        const imgBlob = await getImgBlobFromIdb(\r\n          message.attachment.thumbnailKey || \"\"\r\n        );\r\n        if (imgBlob) {\r\n          const base64 = await readBlobText(imgBlob);\r\n          message.thumbnail = `data:${message.attachment.mt};base64,${base64}`;\r\n          console.log(\"imgBlob: \", imgBlob);\r\n          console.log(\"base64: \", message.thumbnail);\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    imgPromisesChat = await Promise.all(imgPromisesChat);\r\n    dispatch(loadChat(imgPromisesChat));\r\n    await handleIncommingMessages(\r\n      imgPromisesChat,\r\n      loggedInUserId,\r\n      focusedUserId\r\n    );\r\n    scrollToEndMessages();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { connect, useDispatch } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { refreshContactList } from \"../../helpers/contact\";\r\nimport { refreshMessages } from \"../../helpers/messages\";\r\nimport {\r\n  setStartChatLoading,\r\n  setStopChatLoading,\r\n} from \"../../redux/action/user\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const onClickHandler = async (name: string) => {\r\n    dispatch(setStartChatLoading());\r\n    await refreshMessages(name);\r\n    await refreshContactList();\r\n    dispatch(setStopChatLoading());\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            newChatCount={item.newChatCount}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(item.displayUserList[0].nickname);\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// import { logoutUserNodejs } from \"../../../api/user\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../../../utils/loading\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = async () => {\r\n    startLoading();\r\n    // const deviceData = localStorage.getItem(email);\r\n    // const tokensInfo = localStorage.getItem(\"token\");\r\n    // if (deviceData && tokensInfo) {\r\n    //   const { deviceId, deviceName } = JSON.parse(deviceData);\r\n    //   const { accessToken, refreshToken } = JSON.parse(tokensInfo);\r\n    //   await logoutUserNodejs(deviceId, deviceName, accessToken, refreshToken);\r\n    // }\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n    ws.close();\r\n    stopLoading();\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n// import { getImg } from \"../../api/media\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    try {\r\n      await loginHandler(isKeepLogin, token, dispatch, history);\r\n    } catch (error) {}\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n              {/* <li>\r\n                <button onClick={getImg}>getImg</button>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, loading, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      console.log(\"token: \", token);\r\n      if (!token && !loading) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import ReactLoading from \"react-loading\";\r\n\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"loadingContainer\">\r\n    <ReactLoading\r\n      className=\"setMarginLoading\"\r\n      type=\"spin\"\r\n      color=\"white\"\r\n      height={\"2%\"}\r\n      width={\"2%\"}\r\n    />\r\n    <h1 className=\"m-3\">Loading.....</h1>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\nimport Loading from \"../components/loading/loading\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ToastContainer />\r\n          <Navbar />\r\n          {loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <Private exact path=\"/\" component={Home} />\r\n              <Public exact path=\"/login\" component={Login} />\r\n              <Public exact path=\"/register\" component={RegisterDevice} />\r\n            </>\r\n          )}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { store } from \"./redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Router from \"./routes\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}