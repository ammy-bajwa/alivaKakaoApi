{"version":3,"sources":["redux/reducer/user.ts","redux/index.ts","reportWebVitals.ts","helpers/errorCodes.ts","idb/contacts.ts","idb/messages.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","isSending","chatLoading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errors","handleContacts","contacts","a","contactsHandlerPromise","Promise","resolve","reject","dbName","SHA256","toString","storeName","openDB","upgrade","db","createObjectStore","messageDb","key","Object","prototype","hasOwnProperty","call","element","put","intId","messages","forEach","displayUserList","nickname","logId","text","attachment","thumbnailUrlBase64","urlBase64","thumbnailKey","urlKey","myImgDb","get","isThumbnailAlreadyExists","isurlAlreadyExists","Blob","close","setTimeout","error","updateContactLogid","newLogId","myTaskPromise","getLatestContactLogid","value","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","newMessage","dbNotExists","newValue","data","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","deleteDB","length","sendAt","updatedLastMessageTimeStamp","latestTimeStamp","updatedTimePromise","getLastMessageTimeStamp","timeStamp","updateUserMessages","newMessages","dbItemKey","updateMessageLogs","userName","userId","loginUser","loadChat","setContactList","contactList","setSending","sending","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","latestLogId","loginPromise","getState","requestOptions","method","headers","body","JSON","stringify","apiEndPoint","fetch","result","json","errorMessage","alert","biggestChatLog","largestTimeStamp","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","refreshContactList","scrollToEndMessages","messageElement","document","getElementById","scrollTop","scrollHeight","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","sender","receiverUser","receiverIntId","senderIntId","newMessageObj","received","info","messageStore","onerror","onclose","err","push","setItem","refreshToken","removeItem","myWorkingPromise","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","newChatCount","useSelector","onClick","src","profile","alt","ChatWindow","sort","b","imageOnClickHandler","image","createElement","url","w","open","title","appendChild","href","useEffect","map","index","thumbnailUrl","width","height","moment","format","uploadFile","file","fileUploadPromise","FormData","append","MessageInput","useDispatch","setMessage","sendMessageHandler","userFileUpload","files","selectedFile","path","channelId","receiver","filePath","encType","autoFocus","accept","disabled","Messages","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","refreshMessages","focusedName","focusedUserId","items","item","profileURL","getChatListItems","PrivateNavItems","aria-current","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.67aa8be9.chunk.js","sourcesContent":["const initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n  isSending: false,\r\n  chatLoading: false,\r\n};\r\n\r\nexport const userReducer = function (state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload.email,\r\n          chatList: action.payload.chatList,\r\n          accessToken: action.payload.accessToken,\r\n        },\r\n        loggedInUserId: action.payload.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"START_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: true };\r\n      return state;\r\n    case \"STOP_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"SET_SENDING\":\r\n      state = { ...state, isSending: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: state.chat.concat([{ receiverUserName, ...message, senderName }]),\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { userReducer } from \"./reducer/user\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(userReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleContacts = async (contacts: any, email: number) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const messageDb = await openDB(`${email}_message_logs`, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(\"myLogsData\");\r\n        },\r\n      });\r\n      for (const key in contacts) {\r\n        if (Object.prototype.hasOwnProperty.call(contacts, key)) {\r\n          const element = contacts[key];\r\n          await db.put(storeName, element, element.intId);\r\n          element.messages.forEach(async (message: any) => {\r\n            const key = `${element.displayUserList[0].nickname}__${element.intId}__${message.logId}`;\r\n            if (\r\n              message?.text === \"photo\" &&\r\n              message?.attachment &&\r\n              message?.attachment?.thumbnailUrlBase64 &&\r\n              message?.attachment?.urlBase64\r\n            ) {\r\n              // open the db and check if data already exists\r\n              const dbName = SHA256(\"KakaoUserImages\").toString();\r\n              const storeName = \"imgStore\";\r\n              const thumbnailKey = SHA256(\r\n                message.attachment.thumbnailUrlBase64\r\n              ).toString();\r\n              const urlKey = SHA256(message.attachment.urlBase64).toString();\r\n              const myImgDb = await openDB(dbName, 1, {\r\n                async upgrade(myImgDb) {\r\n                  myImgDb.createObjectStore(storeName);\r\n                },\r\n              });\r\n              const isThumbnailAlreadyExists = await myImgDb.get(\r\n                storeName,\r\n                thumbnailKey\r\n              );\r\n              const isurlAlreadyExists = await myImgDb.get(storeName, urlKey);\r\n              if (!isThumbnailAlreadyExists) {\r\n                await myImgDb.put(\r\n                  storeName,\r\n                  new Blob([message.attachment.thumbnailUrlBase64]),\r\n                  thumbnailKey\r\n                );\r\n              }\r\n              if (!isurlAlreadyExists) {\r\n                await myImgDb.put(\r\n                  storeName,\r\n                  new Blob([message.attachment.urlBase64]),\r\n                  urlKey\r\n                );\r\n              }\r\n              myImgDb.close();\r\n            }\r\n            await messageDb.put(\"myLogsData\", message, key);\r\n          });\r\n        }\r\n      }\r\n      db.close();\r\n      setTimeout(() => {\r\n        messageDb.close();\r\n      }, 1000);\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n\r\nexport const getContactListLogs = async (email: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve([]);\r\n      } else {\r\n        const storeKeys = await db.getAllKeys(storeName);\r\n        let contactList: any = {};\r\n        storeKeys.forEach(async (element) => {\r\n          const { lastChatLogId } = await db.get(storeName, element);\r\n          contactList[lastChatLogId] = { lastChatLogId };\r\n        });\r\n        db.close();\r\n        resolve(contactList);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateContactLogid = async (email: string, newLogId: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, newLogId, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const getLatestContactLogid = async (email: any) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const value = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(value);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: any,\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: any\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n      db.createObjectStore(storeName);\r\n    },\r\n  });\r\n  const newValue = {\r\n    receiverUserName: newMessage.receiverUserName,\r\n    senderName: newMessage.senderName,\r\n    ...newMessage.message,\r\n  };\r\n  if (dbNotExists) {\r\n    await db.put(storeName, [newValue], key);\r\n    db.close();\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      let dbNotExists = false;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          dbNotExists = true;\r\n        },\r\n      });\r\n      if (dbNotExists) {\r\n        resolve({\r\n          allMessages: [],\r\n          lastMessageTimeStamp: 0,\r\n          logId: 0,\r\n        });\r\n        db.close();\r\n        await deleteDB(dbName);\r\n      } else {\r\n        const data = await db.get(storeName, key);\r\n        resolve({\r\n          allMessages: data || [],\r\n          lastMessageTimeStamp: data[data.length - 1].sendAt || 0,\r\n          logId: data[data.length - 1].logId || 0,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n  return await getLastMessagePromise;\r\n};\r\n\r\nexport const updatedLastMessageTimeStamp = async (\r\n  email: string,\r\n  latestTimeStamp: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, latestTimeStamp, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getLastMessageTimeStamp = async (email: string) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const timeStamp = (await db.get(storeName, key)) || 0;\r\n      db.close();\r\n      resolve(timeStamp);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const updateUserMessages = async (\r\n  loggedInUserId: number,\r\n  newMessages: any\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      for (const key in newMessages) {\r\n        if (Object.prototype.hasOwnProperty.call(newMessages, key)) {\r\n          const { intId, messages } = newMessages[key];\r\n          const dbName = SHA256(\r\n            `KAKAOCHAT${loggedInUserId}${intId}`\r\n          ).toString();\r\n          const storeName = \"MessageStore\";\r\n          const dbItemKey = \"messages\";\r\n          let dbNotExists = false;\r\n          const db = await openDB(dbName, 1, {\r\n            upgrade(db) {\r\n              dbNotExists = true;\r\n              db.createObjectStore(storeName);\r\n            },\r\n          });\r\n          if (dbNotExists) {\r\n            await db.put(storeName, messages, dbItemKey);\r\n            db.close();\r\n          } else {\r\n            const data = await db.get(storeName, dbItemKey);\r\n            const value = data.concat(messages);\r\n            await db.put(storeName, value, dbItemKey);\r\n            db.close();\r\n          }\r\n        }\r\n      }\r\n      resolve(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateMessageLogs = async (\r\n  email: string,\r\n  userName: string,\r\n  userId: number,\r\n  message: any,\r\n  logId: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = `${email}_message_logs`;\r\n      const storeName = \"myLogsData\";\r\n      const key = `${userName}__${userId}__${logId}`;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, message, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n","export const loginUser = (user: any) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: any) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: any) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: any) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n});\r\n\r\nexport const setStartChatLoading = () => ({\r\n  type: \"START_CHAT_LOADING\",\r\n});\r\n\r\nexport const setStopChatLoading = () => ({\r\n  type: \"STOP_CHAT_LOADING\",\r\n});\r\n\r\nexport const setContactList = (contactList: any) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n\r\nexport const setSending = (sending: boolean) => ({\r\n  type: \"SET_SENDING\",\r\n  payload: sending,\r\n});\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { handleContacts, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  updatedLastMessageTimeStamp,\r\n  updateUserMessages,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string,\r\n  lastMessageTimeStamp: any,\r\n  latestLogId: any\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      if (!accessToken) {\r\n        startLoading();\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceName,\r\n            deviceId,\r\n            lastMessageTimeStamp,\r\n            latestLogId,\r\n          }),\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/login`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/login\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        stopLoading();\r\n        if (result.error) {\r\n          let errorMessage = errors[`${result.error}`];\r\n          if (!errorMessage) {\r\n            errorMessage = result.message;\r\n          }\r\n          alert(errorMessage);\r\n          console.log(\"result errorMessage: \", errorMessage);\r\n          reject(errorMessage);\r\n        } else {\r\n          await handleContacts(result.chatList, result.email);\r\n          await updateUserMessages(result.loggedInUserId, result.chatList);\r\n          await updateContactLogid(email, result.biggestChatLog);\r\n          console.log(\"result: \", result);\r\n          await updatedLastMessageTimeStamp(\r\n            result.email,\r\n            result.largestTimeStamp\r\n          );\r\n          resolve(result);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    // startLoading();\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/contact`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/contact\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    // stopLoading();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { chatList } = result.data;\r\n      resolve(chatList);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const {\r\n    user: { chatList, email },\r\n  } = await store.getState();\r\n  if (!chatList[senderName] && !chatList[receiverUserName]) {\r\n    const contactList = await getChatList(loggedInUserEmail);\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, email);\r\n  }\r\n};\r\n\r\nexport const isInContact = async (name: any) => {\r\n  const isInContactPromise = new Promise(async (resolve, reject) => {\r\n    const { user: chatList } = await store.getState();\r\n    if (!chatList[name]) {\r\n      resolve(false);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await isInContactPromise;\r\n};\r\n\r\nexport const refreshContactList = async () => {\r\n  const {\r\n    user: { email },\r\n  } = await store.getState();\r\n  const contactList = await getChatList(email);\r\n  store.dispatch(setContactList(contactList));\r\n  await handleContacts(contactList, email);\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import { tryLoginApi } from \"../api/user\";\r\nimport { getLatestContactLogid, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  addNewMessageIdb,\r\n  getLastMessageTimeStamp,\r\n  updatedLastMessageTimeStamp,\r\n  updateMessageLogs,\r\n} from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loginUser, newMessage, setSending, setWs } from \"../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { port } from \"./config\";\r\nimport { handleContactList, isInContact, refreshContactList } from \"./contact\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\nimport { info } from \"./toast\";\r\n\r\nexport const loginHandler = async (\r\n  isKeepLogin: any,\r\n  token: any,\r\n  dispatch: any,\r\n  history: any\r\n) => {\r\n  const myWorkingPromise = await new Promise(async (resolve, reject) => {\r\n    if (isKeepLogin && !token) {\r\n      const { email, password } = JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const contactListLogs = await getContactListLogs(email);\r\n        // console.log(\"contactListLogs: \", contactListLogs);\r\n        const lastMessageTimeStamp = await getLastMessageTimeStamp(email);\r\n        const latestLogId = await getLatestContactLogid(email);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId,\r\n          lastMessageTimeStamp,\r\n          latestLogId\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const { text, sender, receiverUser, logId, sendAt, attachment } =\r\n                data;\r\n              console.log(\"newMesssage: \", data);\r\n              const { nickname: receiverUserName, intId: receiverIntId } =\r\n                receiverUser;\r\n              const { nickname: senderName, intId: senderIntId } = sender;\r\n              const newMessageObj = {\r\n                receiverUserName,\r\n                message: { attachment, text, received: true, sendAt, logId },\r\n                senderName,\r\n              };\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              await updateContactLogid(email, logId);\r\n              const { currentFocus } = await store.getState();\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                dispatch(setSending(false));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await refreshContactList();\r\n              const isInContactExists = await isInContact(senderName);\r\n              if (isInContactExists) {\r\n                await updateMessageLogs(\r\n                  email,\r\n                  receiverUserName,\r\n                  receiverIntId,\r\n                  newMessageObj,\r\n                  logId\r\n                );\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  receiverIntId,\r\n                  newMessageObj\r\n                );\r\n              } else {\r\n                if (senderIntId === user.loggedInUserId) {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    receiverUserName,\r\n                    receiverIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    receiverIntId,\r\n                    newMessageObj\r\n                  );\r\n                } else {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    senderName,\r\n                    senderIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    senderIntId,\r\n                    newMessageObj\r\n                  );\r\n                }\r\n                await updatedLastMessageTimeStamp(email, sendAt);\r\n              }\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        stopLoading();\r\n        history.push(\"/\");\r\n        resolve(true);\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n        reject(true);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await myWorkingPromise;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        await loginHandler(\r\n          JSON.stringify({ email, password }),\r\n          null,\r\n          dispatch,\r\n          history\r\n        );\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: any = await fetch(apiEndPoint, requestOptions);\r\n  result = await result.json();\r\n  if (result.error) {\r\n    const errorMessage = result.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(result.message);\r\n    console.log(result.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = errors[`${result.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = result.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(result.message);\r\n      alert(result.message);\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [isLoadingSend, setLoadingSend] = useState(false);\r\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      setLoadingSend(true);\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      setLoadingSend(false);\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingSend(false);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      setLoadingRegister(true);\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      setLoadingRegister(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingRegister(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            onInput={(event: any) => setDeviceName(event.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingSend ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send Code\"\r\n          )}\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingRegister ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Register\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({\r\n  name,\r\n  profileImage,\r\n  newChatCount,\r\n  onClickHandler,\r\n}: any) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div>\r\n        <img\r\n          src={profileImage ? profileImage : profile}\r\n          className=\"rounded-circle profileWidth\"\r\n          alt=\"profileImage\"\r\n        />\r\n        <h3 className=\"d-inline contactName\">{name}</h3>\r\n      </div>\r\n      {/* {newChatCount > 0 && currentFocus !== name && (\r\n        <div>\r\n          <h3 className=\"d-inline contactName text-danger\">({newChatCount})</h3>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","import moment from \"moment\";\r\n// import axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\n// import { deleteDB, openDB } from \"idb\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n// import { convertFileToBase64 } from \"../../helpers/file\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\n\r\nconst ChatWindow = (props: any) => {\r\n  // function convertImgToBase64URL(url: any, callback: any) {\r\n  //   var img = document.createElement(\"img\");\r\n  //   img.crossOrigin = \"Anonymous\";\r\n  //   img.onload = function () {\r\n  //     var canvas: any = document.createElement(\"CANVAS\"),\r\n  //       ctx = canvas.getContext(\"2d\"),\r\n  //       dataURL;\r\n  //     canvas.height = img.height;\r\n  //     canvas.width = img.width;\r\n  //     ctx.drawImage(img, 0, 0);\r\n  //     dataURL = canvas.toDataURL();\r\n  //     callback(dataURL);\r\n  //     canvas = null;\r\n  //   };\r\n  //   img.src = url;\r\n  // }\r\n\r\n  const { chat, currentFocus, chatLoading } = useSelector((state: any) => {\r\n    const { chat, currentFocus, chatLoading } = state;\r\n    chat.sort((a: any, b: any) => {\r\n      return a.sendAt - b.sendAt;\r\n    });\r\n    // chat.map(async (messageObj: any) => {\r\n    //   console.log(\"fired\");\r\n    //   if (\r\n    //     messageObj.text === \"photo\" &&\r\n    //     messageObj.attachment &&\r\n    //     messageObj.attachment.thumbnailUrl\r\n    // ) {\r\n    // console.log(\"messageObj: \", messageObj);\r\n    // convertImgToBase64URL(\r\n    //   messageObj.attachment.thumbnailUrl,\r\n    //   function (base64Img: any) {\r\n    //     console.log(\"Called\");\r\n    //     console.log(base64Img);\r\n    //   }\r\n    // );\r\n    // const result = await fetch(\r\n    //   `https://cors-anywhere.herokuapp.com/${messageObj.attachment.thumbnailUrl}`\r\n    // );\r\n    // const reader = result.body?.getReader();\r\n    // // const blob = await result.blob();\r\n    // while (true) {\r\n    //   const { value, done }: any = await reader?.read();\r\n    //   // console.log(\"value: \", value);\r\n    //   console.log(\"value: \", value);\r\n    //   const myBlob = new Blob([value]);\r\n    //   var decoder = new TextDecoder(\"utf8\");\r\n    //   var base64String = btoa(decoder.decode(value));\r\n\r\n    //   messageObj.data = base64String;\r\n    //   // console.log(\"reader: \", messageObj.data);\r\n    //   console.log(\"value2: \", URL.createObjectURL(myBlob));\r\n\r\n    //   if (done) {\r\n    //     break;\r\n    //   }\r\n    // }\r\n    // console.log(\"img blob: \", await result.body);\r\n    // const result64 = await convertFileToBase64(blob);\r\n    // const db = await openDB(messageObj.attachment.thumbnailUrl, 1, {\r\n    //   upgrade(db) {\r\n    //     db.createObjectStore(\"blob\");\r\n    //   },\r\n    // });\r\n    // await db.put(\"blob\", blob, 1);\r\n    // db.close();\r\n    // console.log(\"BlobImage123\", blob);\r\n    // console.log(\"result64: \", result64.length);\r\n    // const { data } = await axios({\r\n    //   method: \"get\",\r\n    //   url: `https://cors-anywhere.herokuapp.com/${messageObj.attachment.thumbnailUrl}`,\r\n    //   headers: {},\r\n    // });\r\n    //   }\r\n    //   return messageObj;\r\n    // });\r\n\r\n    return { chat, currentFocus, chatLoading };\r\n  });\r\n\r\n  const imageOnClickHandler = async (message: any) => {\r\n    let image = document.createElement(\"img\");\r\n    image.src = message.attachment.url;\r\n    let w: any = window.open(\"\", \"_blank\");\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.body.appendChild(image);\r\n    w.location.href = message.attachment.url;\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToEndMessages();\r\n  }, [chat, chatLoading]);\r\n  console.log(\"chatLoading: \",chatLoading)\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      <h1>Chat Window</h1>\r\n      {chatLoading && \"Loading.....\"}\r\n      {!chatLoading &&\r\n        chat.length > 0 &&\r\n        chat.map((message: any, index: number) => (\r\n          <div\r\n            key={index}\r\n            className={`text-light p-1 w-100 d-flex flex-row ${\r\n              currentFocus === message.receiverUserName\r\n                ? \"justify-content-end\"\r\n                : \"justify-content-start\"\r\n            }`}\r\n          >\r\n            <div\r\n              className={`border border-dark rounded p-1 ${\r\n                currentFocus === message.receiverUserName\r\n                  ? \"receiverMessage\"\r\n                  : \"senderMessage\"\r\n              }`}\r\n            >\r\n              {message.text === \"photo\" &&\r\n                message.attachment &&\r\n                message.attachment.thumbnailUrl && (\r\n                  <img\r\n                    loading=\"lazy\"\r\n                    alt=\"userImages\"\r\n                    // src={message.attachment.thumbnailUrl}\r\n                    src={`data:image/png;base64,${message.attachment.thumbnailUrlBase64}`}\r\n                    onClick={() => imageOnClickHandler(message)}\r\n                    className=\"hoverPointer p-1\"\r\n                    // onLoad={\r\n                    // (event: any) => {\r\n                    // var canvas = document.createElement(\"canvas\");\r\n                    // canvas.width = event.target.width;\r\n                    // canvas.height = event.target.height;\r\n                    // var ctx: any = canvas.getContext(\"2d\");\r\n                    // ctx.drawImage(event.target, 0, 0);\r\n                    // var dataURL = canvas.toDataURL(\"image/png\");\r\n                    // console.log(\r\n                    //   dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\")\r\n                    // );\r\n                    // }\r\n                    // }\r\n                    width=\"90\"\r\n                    height=\"90\"\r\n                  />\r\n                )}\r\n              {message.text !== \"photo\" &&\r\n                (!message?.attachment || !message.attachment?.thumbnailUrl) && (\r\n                  <span className=\"m-1 text-wrap\">{message.text} </span>\r\n                )}\r\n              <span className=\"small bg-secondary makeItLight rounded p-1\">\r\n                {console.log(message.sendAt)}\r\n                {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      if (accessToken) {\r\n        console.log(\"accessToken: \", accessToken);\r\n        var data = new FormData();\r\n        data.append(\"myFile\", file);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          body: data,\r\n        };\r\n        let apiEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n        } else {\r\n          // production code\r\n          apiEndPoint = \"/uploadfile\";\r\n        }\r\n        let result: any = await fetch(apiEndPoint, requestOptions);\r\n        result = await result.json();\r\n        console.log(\"result: \", result);\r\n        resolve(result);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await fileUploadPromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\n// import { errors } from \"../../helpers/errorCodes\";\r\nimport { error } from \"../../helpers/toast\";\r\nimport { setSending } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  const email = useSelector((state: any) => state.user.email);\r\n  // const loggedInUserId = useSelector((state: any) => state.loggedInUserId);\r\n  const chatList = useSelector((state: any) => state.user.chatList);\r\n  const isSending = useSelector((state: any) => state.isSending);\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const sendMessageHandler = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      // const sendAt = new Date().getTime();\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (!message && userFileUpload.files.length <= 0) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      dispatch(setSending(true));\r\n      if (userFileUpload.files.length > 0) {\r\n        for (const file in userFileUpload.files) {\r\n          if (\r\n            Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n          ) {\r\n            const selectedFile: any = userFileUpload.files[file];\r\n            const { path }: any = await uploadFile(selectedFile);\r\n            const channelId = chatList[currentFocus][`channelId`];\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n          }\r\n        }\r\n        userFileUpload.value = \"\";\r\n      } else {\r\n        console.log(currentFocus);\r\n        const channelId = chatList[currentFocus][`channelId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, channelId },\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      error(\"Error in sending message\");\r\n      dispatch(setSending(false));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={sendMessageHandler}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            className=\"form-control\"\r\n            onInput={(event: any) => setMessage(event.target.value)}\r\n            value={message}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={isSending ? true : false}\r\n          className=\"btn btn-outline-light mt-2\"\r\n          type=\"submit\"\r\n        >\r\n          {isSending ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { port } from \"../helpers/config\";\r\n// import { startLoading, stopLoading } from \"../utils/loading\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: any,\r\n  lastChatLogId: any,\r\n  logId: any\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email,\r\n        nickNameToGetChat,\r\n        lastMessageTimeStamp,\r\n        lastChatLogId,\r\n        startChatLogId: logId,\r\n      }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n    let result: any = await fetch(apiEndPoint, requestOptions);\r\n    result = await result.json();\r\n    if (result.error) {\r\n      let errorMessage = result.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", result);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = result.data;\r\n      resolve({ userId, messages });\r\n      console.log(result);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getUserChat } from \"../api/chat\";\r\nimport { getLatestContactLogid } from \"../idb/contacts\";\r\nimport { handleIncommingMessages, lastDbMessageTime } from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\n\r\nexport const refreshMessages = async (focusedName: string) => {\r\n  try {\r\n    const { loggedInUserId, user }: any = await store.getState();\r\n    const { dispatch } = store;\r\n    const lastChatLogId = getLatestContactLogid(user.email);\r\n    const focusedUserId = user.chatList[focusedName]?.intId;\r\n    dispatch(setFocusUser(focusedName));\r\n    const { allMessages, lastMessageTimeStamp, logId }: any =\r\n      await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n    // console.log(\"Fired\");\r\n    // console.log(lastMessageTimeStamp);\r\n    const { messages }: any = await getUserChat(\r\n      user.email,\r\n      focusedName,\r\n      lastMessageTimeStamp,\r\n      lastChatLogId,\r\n      logId\r\n    );\r\n    console.log(\"allMessages\", allMessages);\r\n    dispatch(loadChat([...messages, ...allMessages]));\r\n    await handleIncommingMessages(\r\n      [...messages, ...allMessages],\r\n      loggedInUserId,\r\n      focusedUserId\r\n    );\r\n    scrollToEndMessages();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { connect, useDispatch } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { refreshContactList } from \"../../helpers/contact\";\r\nimport { refreshMessages } from \"../../helpers/messages\";\r\nimport {\r\n  loadChat,\r\n  setStartChatLoading,\r\n  setStopChatLoading,\r\n} from \"../../redux/action/user\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const onClickHandler = async (name: string) => {\r\n    dispatch(setStartChatLoading());\r\n    dispatch(loadChat([]));\r\n    await refreshMessages(name);\r\n    await refreshContactList();\r\n    dispatch(setStopChatLoading());\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            newChatCount={item.newChatCount}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(item.displayUserList[0].nickname);\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {/* <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"amir\"\r\n        />{\" \"}\r\n        <ChatListItem\r\n          profileImage=\"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\r\n          name=\"ali\"\r\n        /> */}\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\n\r\nconst PrivateNavItems = ({ email }: any) => {\r\n  const ws = useSelector((state: any) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = () => {\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n    ws.close();\r\n  };\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\n// import { getImg } from \"../../api/media\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token }: any = this.props;\r\n    try {\r\n      await loginHandler(isKeepLogin, token, dispatch, history);\r\n    } catch (error) {}\r\n  }\r\n  render() {\r\n    const { token, email }: any = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n              {/* <li>\r\n                <button onClick={getImg}>getImg</button>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, loading, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      console.log(\"token: \", token);\r\n      if (!token && !loading) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import ReactLoading from \"react-loading\";\r\n\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"loadingContainer\">\r\n    <ReactLoading\r\n      className=\"setMarginLoading\"\r\n      type=\"spin\"\r\n      color=\"white\"\r\n      height={\"2%\"}\r\n      width={\"2%\"}\r\n    />\r\n    <h1 className=\"m-3\">Loading.....</h1>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\nimport Loading from \"../components/loading/loading\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ToastContainer />\r\n          <Navbar />\r\n          {loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <Private exact path=\"/\" component={Home} />\r\n              <Public exact path=\"/login\" component={Login} />\r\n              <Public exact path=\"/register\" component={RegisterDevice} />\r\n            </>\r\n          )}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { store } from \"./redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Router from \"./routes\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}