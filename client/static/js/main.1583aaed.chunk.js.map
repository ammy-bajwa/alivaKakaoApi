{"version":3,"sources":["redux/reducer/index.ts","redux/index.ts","reportWebVitals.ts","helpers/delay.ts","helpers/errorCodes.ts","helpers/loading.ts","idb/media.ts","idb/contacts.ts","idb/messages.ts","redux/action/user.ts","utils/loading.ts","api/user.ts","api/contact.ts","helpers/contact.ts","helpers/scroll.ts","helpers/toast.ts","helpers/loginHandler.ts","pages/login/login.tsx","api/device.ts","pages/registerDevice/registerDevice.tsx","assets/images/profile.png","components/chatListItem/chatListItem.tsx","helpers/media.ts","components/chatWindow/imgMessageHandler/imgMessageHandler.tsx","components/chatWindow/chatWindow.tsx","api/file.ts","components/messageInput/messageInput.tsx","components/messages/messages.tsx","api/chat.ts","helpers/file.ts","helpers/messages.ts","pages/home/home.tsx","components/navbar/privateNavItems/privateNavItems.tsx","components/navbar/publicNavItems/publicNavItems.tsx","components/navbar/navbar.tsx","routes/public/public.tsx","routes/private/private.tsx","components/loading/loading.tsx","routes/index.tsx","index.tsx"],"names":["initialState","user","email","chatList","accessToken","loggedInUserId","chat","currentFocus","ws","loading","isSending","chatLoading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","console","log","payload","receiverUserName","message","senderName","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","causeDelay","time","a","myTaskPromise","Promise","resolve","reject","setTimeout","errors","setLoginLoadingMessage","loginTryMessage","document","getElementById","innerText","handleSingleMessageImgInIdb","workPromise","dbName","SHA256","toString","storeName","thumbnailKey","attachment","thumbnailUrl","urlKey","url","openDB","upgrade","myImgDb","createObjectStore","get","isThumbnailAlreadyExists","isurlAlreadyExists","put","Blob","thumbnailUrlBase64","mt","urlBase64","close","handleMultipleMessagesImgInIdb","myWorkPromise","thumbnailKeys","urlKeys","index","thumbnailUrlsBase64","length","thumbnailUrls","push","imageUrls","thumbnailBase64","imgBase64","urlsBase64","mtl","handleVoiceMessageInIdb","audioKey","audioBase64","handleContacts","contacts","contactsHandlerPromise","db","messageDb","key","Object","prototype","hasOwnProperty","call","element","intId","messages","forEach","displayUserList","nickname","logId","text","error","updateContactLogid","newLogId","getLatestContactLogid","value","handleIncommingMessages","otherUserId","messageHandlerPromise","addNewMessageIdb","newMessage","dbNotExists","newValue","data","lastDbMessageTime","getLastMessagePromise","allMessages","lastMessageTimeStamp","deleteDB","sendAt","updatedLastMessageTimeStamp","latestTimeStamp","updatedTimePromise","getLastMessageTimeStamp","timeStamp","updateUserMessages","newMessages","dbItemKey","updateMessageLogs","userName","userId","getImgBlobFromIdb","myWorkingTask","loginUser","loadChat","setContactList","contactList","setSending","sending","startLoading","dispatch","stopLoading","tryLoginApi","password","deviceName","deviceId","latestLogId","myAccessToken","myRefreshToken","loginPromise","getState","loginErrorMessage","requestOptions","method","headers","body","JSON","stringify","refreshToken","apiEndPoint","fetch","result","json","resultJson","errorMessage","loginResult","biggestChatLog","alert","logoutUserNodejs","myWorkingPromise","getChatList","setCodePromise","handleContactList","loggedInUserEmail","isInContact","name","isInContactPromise","refreshContactList","scrollToEndMessages","messageElement","scrollTop","scrollHeight","toast","loginHandler","isKeepLogin","token","history","parse","deviceData","localStorage","getItem","wsEndPoint","location","origin","replace","socket","WebSocket","onopen","send","onmessage","event","sender","receiverUser","receiverIntId","senderIntId","newMessageObj","received","info","messageStore","onerror","onclose","err","setItem","removeItem","Login","loginFormHandler","props","preventDefault","emailElem","passwordElem","className","onSubmit","this","htmlFor","id","required","aria-describedby","autoComplete","to","React","Component","connect","withRouter","trySendDeviceRegisterApi","trySetDeviceRegisterApi","code","newResult","RegisterDevice","useHistory","useState","setDeviceName","isLoadingSend","setLoadingSend","isLoadingRegister","setLoadingRegister","registerFormHandler","randomId","split","join","registerCodeFormHandler","registerCodeElem","registerCode","placeholder","onInput","target","role","aria-hidden","ChatListItem","profileImage","onClickHandler","useSelector","onClick","src","profile","alt","imageOnClickHandler","image","createElement","w","open","title","appendChild","href","ImgMessageHandler","source","width","height","ChatWindow","sort","b","chatIndexes","deletedIndexes","deletedIndicatorIndexes","map","includes","substring","updatedChat","keys","myMessage","isDeleted","isDeletedIndicator","useEffect","controls","audio","thumbnails","imgUrl","moment","format","uploadFile","file","fileUploadPromise","FormData","append","MessageInput","currentSelectedFile","setSelectedFile","useDispatch","setMessage","handlePaste","e","clipboardData","files","fileObject","sendMessageHandler","userFileUpload","path","channelId","receiver","filePath","selectedFile","encType","autoFocus","currentElement","onPaste","accept","disabled","Messages","getUserChat","nickNameToGetChat","lastChatLogId","startChatLogId","readBlobText","blob","base64Promise","reader","FileReader","onload","readAsText","refreshMessages","focusedName","focusedUserId","messagesToSet","imgPromisesChat","imgBlob","base64","thumbnail","mediaBlob","all","imgPromisesResolvedChat","items","item","profileURL","getChatListItems","PrivateNavItems","logOutHandler","PublicNavItems","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","Public","component","rest","render","pathname","Loading","color","MainRouter","exact","Home","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.1583aaed.chunk.js","sourcesContent":["import { ReduxStore } from \"../../Interfaces/store\";\r\nimport { ActionType } from \"../../Interfaces/store/action\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    email: \"\",\r\n    chatList: {},\r\n    accessToken: \"\",\r\n  },\r\n  loggedInUserId: \"\",\r\n  chat: [],\r\n  currentFocus: \"\",\r\n  ws: null,\r\n  loading: false,\r\n  isSending: false,\r\n  chatLoading: false,\r\n};\r\n\r\nexport const rootReducer = function (\r\n  state: ReduxStore = initialState,\r\n  action: ActionType\r\n) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      console.log(action);\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: action.payload?.email,\r\n          chatList: action.payload?.chatList,\r\n          accessToken: action.payload?.accessToken,\r\n        },\r\n        loggedInUserId: action.payload?.loggedInUserId,\r\n        chat: [],\r\n      };\r\n      return state;\r\n    case \"LOGOUT\":\r\n      state = {\r\n        ...state,\r\n        user: {\r\n          email: \"\",\r\n          chatList: {},\r\n          accessToken: \"\",\r\n        },\r\n      };\r\n      return state;\r\n    case \"LOAD_CHAT\":\r\n      state = { ...state, chat: action.payload };\r\n      return state;\r\n    case \"START_LOADING\":\r\n      state = { ...state, loading: true };\r\n      return state;\r\n    case \"STOP_LOADING\":\r\n      state = { ...state, loading: false };\r\n      return state;\r\n    case \"START_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: true };\r\n      return state;\r\n    case \"STOP_CHAT_LOADING\":\r\n      state = { ...state, chatLoading: false };\r\n      return state;\r\n    case \"SET_FOCUSED_USER\":\r\n      state = { ...state, currentFocus: action.payload };\r\n      return state;\r\n    case \"SET_WS\":\r\n      state = { ...state, ws: action.payload };\r\n      return state;\r\n    case \"SET_CONTACT_LIST\":\r\n      state = { ...state, user: { ...state.user, chatList: action.payload } };\r\n      return state;\r\n    case \"SET_SENDING\":\r\n      state = { ...state, isSending: action.payload };\r\n      return state;\r\n    case \"NEW_MESSAGE\":\r\n      const { receiverUserName, message, senderName } = action.payload;\r\n      state = {\r\n        ...state,\r\n        chat: state.chat.concat([{ receiverUserName, ...message, senderName }]),\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { compose, createStore } from \"redux\";\r\nimport { rootReducer } from \"./reducer\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers());\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const causeDelay = async (time: number) => {\r\n  const myTaskPromise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(true);\r\n    }, time);\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n","export const errors: any = {\r\n  \"12\": \"LOGIN_FAILED_REASON\",\r\n  \"13\": \"TOO_MANY_TRY_LOGIN\",\r\n  \"30\": \"LOGIN_FAILED\",\r\n  \"32\": \"MOBILE_UNREGISTERED\",\r\n  \"-100\": \"DEVICE_NOT_REGISTERED\",\r\n  \"-101\": \"ANOTHER_LOGON\",\r\n  \"-102\": \"DEVICE_REGISTER_FAILED\",\r\n  \"-110\": \"INVALID_DEVICE_REGISTER\",\r\n  \"-111\": \"INCORRECT_PASSCODE\",\r\n  \"-112\": \"PASSCODE_REQUEST_FAILED\",\r\n  \"-997\": \"ACCOUNT_RESTRICTED\",\r\n};\r\n","export const setLoginLoadingMessage = (message: string) => {\r\n  const loginTryMessage = document.getElementById(\"loginTryMessage\");\r\n  if (loginTryMessage) {\r\n    loginTryMessage.innerText = message;\r\n  }\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { openDB } from \"idb\";\r\nimport { MessageType } from \"../Interfaces/common\";\r\n\r\nexport const handleSingleMessageImgInIdb = async (message: any) => {\r\n  const workPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      // open the db and check if data already exists\r\n      const dbName = SHA256(\"KakaoUserMedia\").toString();\r\n      const storeName = \"mediaStore\";\r\n      const thumbnailKey = SHA256(message.attachment.thumbnailUrl).toString();\r\n      message.attachment.thumbnailKey = thumbnailKey;\r\n      const urlKey = SHA256(message.attachment.url).toString();\r\n      message.attachment.urlKey = urlKey;\r\n      const myImgDb = await openDB(dbName, 1, {\r\n        async upgrade(myImgDb) {\r\n          myImgDb.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const isThumbnailAlreadyExists = await myImgDb.get(\r\n        storeName,\r\n        thumbnailKey\r\n      );\r\n      const isurlAlreadyExists = await myImgDb.get(storeName, urlKey);\r\n      if (!isThumbnailAlreadyExists) {\r\n        console.log(\"Img message: \", message);\r\n        await myImgDb.put(\r\n          storeName,\r\n          new Blob([message.attachment.thumbnailUrlBase64], {\r\n            type: message.attachment.mt,\r\n          }),\r\n          thumbnailKey\r\n        );\r\n      }\r\n      if (!isurlAlreadyExists) {\r\n        await myImgDb.put(\r\n          storeName,\r\n          new Blob([message.attachment.urlBase64], {\r\n            type: message.attachment.mt,\r\n          }),\r\n          urlKey\r\n        );\r\n      }\r\n      myImgDb.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(false);\r\n    }\r\n  });\r\n  return await workPromise;\r\n};\r\n\r\nexport const handleMultipleMessagesImgInIdb = async (message: any) => {\r\n  const myWorkPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\"KakaoUserMedia\").toString();\r\n      const storeName = \"mediaStore\";\r\n      const myImgDb = await openDB(dbName, 1, {\r\n        async upgrade(myImgDb) {\r\n          myImgDb.createObjectStore(storeName);\r\n        },\r\n      });\r\n      message.attachment.thumbnailKeys = [];\r\n      message.attachment.urlKeys = [];\r\n      for (\r\n        let index = 0;\r\n        index < message.attachment.thumbnailUrlsBase64.length;\r\n        index++\r\n      ) {\r\n        const thumbnailKey = SHA256(\r\n          message.attachment.thumbnailUrls[index]\r\n        ).toString();\r\n        message.attachment.thumbnailKeys.push(thumbnailKey);\r\n        console.log(message.attachment.thumbnailKeys);\r\n        const urlKey = SHA256(message.attachment.imageUrls[index]).toString();\r\n        message.attachment.urlKeys.push(urlKey);\r\n        const thumbnailBase64 = message.attachment.thumbnailUrlsBase64[index];\r\n        const imgBase64 = message.attachment.urlsBase64[index];\r\n\r\n        const isThumbnailAlreadyExists = await myImgDb.get(\r\n          storeName,\r\n          thumbnailKey\r\n        );\r\n        const isurlAlreadyExists = await myImgDb.get(storeName, urlKey);\r\n\r\n        if (!isThumbnailAlreadyExists) {\r\n          await myImgDb.put(\r\n            storeName,\r\n            new Blob([thumbnailBase64], {\r\n              type: message.attachment.mtl[index],\r\n            }),\r\n            thumbnailKey\r\n          );\r\n        }\r\n        if (!isurlAlreadyExists) {\r\n          await myImgDb.put(\r\n            storeName,\r\n            new Blob([imgBase64], {\r\n              type: message.attachment.mtl[index],\r\n            }),\r\n            urlKey\r\n          );\r\n        }\r\n      }\r\n      myImgDb.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myWorkPromise;\r\n};\r\n\r\nexport const handleVoiceMessageInIdb = async (message: MessageType) => {\r\n  const myWorkPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\"KakaoUserMedia\").toString();\r\n      const storeName = \"mediaStore\";\r\n      if (message.attachment.url) {\r\n        const audioKey = SHA256(message.attachment.url).toString();\r\n        const myImgDb = await openDB(dbName, 1, {\r\n          async upgrade(myImgDb) {\r\n            myImgDb.createObjectStore(storeName);\r\n          },\r\n        });\r\n        const isAudioAlreadyExists = await myImgDb.get(storeName, audioKey);\r\n        if (!isAudioAlreadyExists) {\r\n          console.log(\"Img message: \", message);\r\n          if (message.attachment.audioBase64) {\r\n            await myImgDb.put(\r\n              storeName,\r\n              new Blob([message.attachment.audioBase64], {\r\n                type: \"audio/mpeg\",\r\n              }),\r\n              audioKey\r\n            );\r\n          }\r\n        }\r\n        myImgDb.close();\r\n\r\n        resolve(true);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myWorkPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { deleteDB, openDB } from \"idb\";\r\nimport {\r\n  handleMultipleMessagesImgInIdb,\r\n  handleSingleMessageImgInIdb,\r\n  handleVoiceMessageInIdb,\r\n} from \"./media\";\r\n\r\nexport const handleContacts = async (contacts: any, email: string) => {\r\n  const contactsHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      const messageDb = await openDB(`${email}_message_logs`, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(\"myLogsData\");\r\n        },\r\n      });\r\n      for (const key in contacts) {\r\n        if (Object.prototype.hasOwnProperty.call(contacts, key)) {\r\n          const element = contacts[key];\r\n          await db.put(storeName, element, element.intId);\r\n          element.messages.forEach(async (message: any) => {\r\n            const key = `${element.displayUserList[0].nickname}__${element.intId}__${message.logId}`;\r\n            if (\r\n              (message?.text === \"photo\" || message?.text === \"사진\") &&\r\n              message?.attachment &&\r\n              message?.attachment?.thumbnailUrlBase64 &&\r\n              message?.attachment?.urlBase64\r\n            ) {\r\n              await handleSingleMessageImgInIdb(message);\r\n            } else if (\r\n              message.attachment?.thumbnailUrlsBase64 &&\r\n              message.attachment?.urlsBase64\r\n            ) {\r\n              await handleMultipleMessagesImgInIdb(message);\r\n            } else if (\r\n              message.text === \"voice note\" &&\r\n              message.attachment?.url\r\n            ) {\r\n              await handleVoiceMessageInIdb(message);\r\n            }\r\n            await messageDb.put(\"myLogsData\", message, key);\r\n          });\r\n        }\r\n      }\r\n      db.close();\r\n      setTimeout(() => {\r\n        messageDb.close();\r\n      }, 1000);\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await contactsHandlerPromise;\r\n};\r\n\r\nexport const getContactListLogs = async (email: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOCONTACTS${email}`).toString();\r\n      const storeName = \"ContactStore\";\r\n      let isExists = true;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n          isExists = false;\r\n        },\r\n      });\r\n      if (!isExists) {\r\n        db.close();\r\n        await deleteDB(dbName);\r\n        resolve([]);\r\n      } else {\r\n        const storeKeys = await db.getAllKeys(storeName);\r\n        let contactList: any = {};\r\n        storeKeys.forEach(async (element) => {\r\n          const { lastChatLogId } = await db.get(storeName, element);\r\n          contactList[lastChatLogId] = { lastChatLogId };\r\n        });\r\n        db.close();\r\n        resolve(contactList);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateContactLogid = async (email: string, newLogId: number) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n      const storeName = \"logs\";\r\n      const key = \"logId\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, newLogId, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const getLatestContactLogid = async (email: string): Promise<number> => {\r\n  const myTaskPromise = new Promise(\r\n    async (resolve: (value: number) => void, reject) => {\r\n      try {\r\n        const dbName = SHA256(`KAKAOLOGID${email}`).toString();\r\n        const storeName = \"logs\";\r\n        const key = \"logId\";\r\n        const db = await openDB(dbName, 1, {\r\n          upgrade(db) {\r\n            db.createObjectStore(storeName);\r\n          },\r\n        });\r\n        const value = (await db.get(storeName, key)) || 0;\r\n        db.close();\r\n        resolve(value);\r\n      } catch (error) {\r\n        reject(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  return await myTaskPromise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\n\r\nimport { deleteDB, openDB } from \"idb\";\r\nimport { MessageType } from \"../Interfaces/common\";\r\n\r\nexport const handleIncommingMessages = async (\r\n  messages: MessageType[],\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const messageHandlerPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(\r\n        `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n      ).toString();\r\n      const storeName = \"MessageStore\";\r\n      const key = \"messages\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, messages, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await messageHandlerPromise;\r\n};\r\n\r\nexport const getUserMessages = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n    },\r\n  });\r\n\r\n  if (dbNotExists) {\r\n    db.close();\r\n    await deleteDB(dbName);\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const addNewMessageIdb = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number,\r\n  newMessage: {\r\n    message: MessageType;\r\n    senderName: string;\r\n    receiverUserName: string;\r\n  }\r\n) => {\r\n  const dbName = SHA256(`KAKAOCHAT${loggedInUserId}${otherUserId}`).toString();\r\n  const storeName = \"MessageStore\";\r\n  const key = \"messages\";\r\n  let dbNotExists = false;\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      dbNotExists = true;\r\n      db.createObjectStore(storeName);\r\n    },\r\n  });\r\n  const newValue = {\r\n    receiverUserName: newMessage.receiverUserName,\r\n    senderName: newMessage.senderName,\r\n    ...newMessage.message,\r\n  };\r\n  if (dbNotExists) {\r\n    await db.put(storeName, [newValue], key);\r\n    db.close();\r\n    return;\r\n  } else {\r\n    const data = await db.get(storeName, key);\r\n    const value = data.concat([newValue]);\r\n    await db.put(storeName, value, key);\r\n    db.close();\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const lastDbMessageTime = async (\r\n  loggedInUserId: number,\r\n  otherUserId: number\r\n) => {\r\n  const getLastMessagePromise = new Promise(\r\n    async (\r\n      resolve: (value: {\r\n        allMessages: object[] | [];\r\n        lastMessageTimeStamp: number;\r\n        logId: number;\r\n      }) => void,\r\n      reject\r\n    ) => {\r\n      try {\r\n        const dbName = SHA256(\r\n          `KAKAOCHAT${loggedInUserId}${otherUserId}`\r\n        ).toString();\r\n        const storeName = \"MessageStore\";\r\n        const key = \"messages\";\r\n        let dbNotExists = false;\r\n        const db = await openDB(dbName, 1, {\r\n          upgrade(db) {\r\n            dbNotExists = true;\r\n          },\r\n        });\r\n        if (dbNotExists) {\r\n          resolve({\r\n            allMessages: [],\r\n            lastMessageTimeStamp: 0,\r\n            logId: 0,\r\n          });\r\n          db.close();\r\n          await deleteDB(dbName);\r\n        } else {\r\n          const data = await db.get(storeName, key);\r\n          resolve({\r\n            allMessages: data || [],\r\n            lastMessageTimeStamp: data[data.length - 1]?.sendAt || 0,\r\n            logId: data[data.length - 1]?.logId || 0,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n  );\r\n  return await getLastMessagePromise;\r\n};\r\n\r\nexport const updatedLastMessageTimeStamp = async (\r\n  email: string,\r\n  latestTimeStamp: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n      const storeName = \"time\";\r\n      const key = \"timeStamp\";\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, latestTimeStamp, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getLastMessageTimeStamp = async (\r\n  email: string\r\n): Promise<number> => {\r\n  const updatedTimePromise: Promise<number> = new Promise(\r\n    async (resolve: (value: number) => void, reject) => {\r\n      try {\r\n        const dbName = SHA256(`KAKAOTIMESTAMP${email}`).toString();\r\n        const storeName = \"time\";\r\n        const key = \"timeStamp\";\r\n        const db = await openDB(dbName, 1, {\r\n          upgrade(db) {\r\n            db.createObjectStore(storeName);\r\n          },\r\n        });\r\n        const timeStamp: number = (await db.get(storeName, key)) || 0;\r\n        db.close();\r\n        resolve(timeStamp);\r\n      } catch (error) {\r\n        reject(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const updateUserMessages = async (\r\n  loggedInUserId: number,\r\n  newMessages: any\r\n) => {\r\n  const myTaskPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      for (const key in newMessages) {\r\n        if (Object.prototype.hasOwnProperty.call(newMessages, key)) {\r\n          const { intId, messages } = newMessages[key];\r\n          const dbName = SHA256(\r\n            `KAKAOCHAT${loggedInUserId}${intId}`\r\n          ).toString();\r\n          const storeName = \"MessageStore\";\r\n          const dbItemKey = \"messages\";\r\n          let dbNotExists = false;\r\n          const db = await openDB(dbName, 1, {\r\n            upgrade(db) {\r\n              dbNotExists = true;\r\n              db.createObjectStore(storeName);\r\n            },\r\n          });\r\n          if (dbNotExists) {\r\n            await db.put(storeName, messages, dbItemKey);\r\n            db.close();\r\n          } else {\r\n            const data = await db.get(storeName, dbItemKey);\r\n            const value = data.concat(messages);\r\n            await db.put(storeName, value, dbItemKey);\r\n            db.close();\r\n          }\r\n        }\r\n      }\r\n      resolve(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myTaskPromise;\r\n};\r\n\r\nexport const updateMessageLogs = async (\r\n  email: string,\r\n  userName: string,\r\n  userId: number,\r\n  message: {\r\n    message: MessageType;\r\n    receiverUserName: string;\r\n    senderName: string;\r\n  },\r\n  logId: number\r\n) => {\r\n  const updatedTimePromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const dbName = `${email}_message_logs`;\r\n      const storeName = \"myLogsData\";\r\n      const key = `${userName}__${userId}__${logId}`;\r\n      const db = await openDB(dbName, 1, {\r\n        upgrade(db) {\r\n          db.createObjectStore(storeName);\r\n        },\r\n      });\r\n      await db.put(storeName, message, key);\r\n      db.close();\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  return await updatedTimePromise;\r\n};\r\n\r\nexport const getImgBlobFromIdb = async (key: string) => {\r\n  const myWorkingTask = new Promise(\r\n    async (resolve: (value: Blob | undefined) => void, reject) => {\r\n      try {\r\n        const dbName = SHA256(\"KakaoUserMedia\").toString();\r\n        const storeName = \"mediaStore\";\r\n        const db = await openDB(dbName, 1, {\r\n          upgrade(db) {\r\n            db.createObjectStore(storeName);\r\n          },\r\n        });\r\n        const value = await db.get(storeName, key);\r\n        resolve(value);\r\n        db.close();\r\n      } catch (error) {\r\n        reject(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  return await myWorkingTask;\r\n};\r\n","export const loginUser = (user: object) => ({\r\n  type: \"LOGIN\",\r\n  payload: user,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const setFocusUser = (name: string) => ({\r\n  type: \"SET_FOCUSED_USER\",\r\n  payload: name,\r\n});\r\n\r\nexport const setWs = (ws: object) => ({\r\n  type: \"SET_WS\",\r\n  payload: ws,\r\n});\r\n\r\nexport const newMessage = (data: object) => {\r\n  return {\r\n    type: \"NEW_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const loadChat = (messages: object[]) => ({\r\n  type: \"LOAD_CHAT\",\r\n  payload: messages,\r\n});\r\n\r\nexport const setStartLoading = () => ({\r\n  type: \"START_LOADING\",\r\n  payload: null,\r\n});\r\n\r\nexport const setStopLoading = () => ({\r\n  type: \"STOP_LOADING\",\r\n  payload: null,\r\n});\r\n\r\nexport const setStartChatLoading = () => ({\r\n  type: \"START_CHAT_LOADING\",\r\n  payload: null,\r\n});\r\n\r\nexport const setStopChatLoading = () => ({\r\n  type: \"STOP_CHAT_LOADING\",\r\n  payload: null,\r\n});\r\n\r\nexport const setContactList = (contactList: object[] | undefined) => ({\r\n  type: \"SET_CONTACT_LIST\",\r\n  payload: contactList,\r\n});\r\n\r\nexport const setSending = (sending: boolean) => ({\r\n  type: \"SET_SENDING\",\r\n  payload: sending,\r\n});\r\n","import { store } from \"../redux\";\r\n\r\nimport { setStartLoading, setStopLoading } from \"../redux/action/user\";\r\n\r\nexport const startLoading = () => {\r\n  store.dispatch(setStartLoading());\r\n};\r\n\r\nexport const stopLoading = () => {\r\n  store.dispatch(setStopLoading());\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { causeDelay } from \"../helpers/delay\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { setLoginLoadingMessage } from \"../helpers/loading\";\r\nimport { handleContacts, updateContactLogid } from \"../idb/contacts\";\r\nimport { updateUserMessages } from \"../idb/messages\";\r\nimport { store } from \"../redux\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { resultIn } from \"../Interfaces/api\";\r\nimport { FetchType } from \"../Interfaces/common\";\r\n\r\nexport const tryLoginApi = async (\r\n  email: string,\r\n  password: string,\r\n  deviceName: string,\r\n  deviceId: string,\r\n  lastMessageTimeStamp: number,\r\n  latestLogId: number = 0,\r\n  myAccessToken: string = \"\",\r\n  myRefreshToken: string = \"\"\r\n) => {\r\n  const loginPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { accessToken },\r\n      } = store.getState();\r\n      console.log(\"accessToken: \", accessToken);\r\n      let loginResult: resultIn | undefined | null;\r\n      let loginErrorMessage: string = \"\";\r\n      if (!accessToken) {\r\n        startLoading();\r\n        for (let index = 0; index < 15; index++) {\r\n          setLoginLoadingMessage(`Try No ${index + 1}`);\r\n          const requestOptions = {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              email,\r\n              password,\r\n              deviceName,\r\n              deviceId,\r\n              lastMessageTimeStamp,\r\n              latestLogId,\r\n              accessToken: myAccessToken,\r\n              refreshToken: myRefreshToken,\r\n            }),\r\n          };\r\n          let apiEndPoint = \"\";\r\n          if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n            // dev code\r\n            apiEndPoint = `http://localhost:${port}/login`;\r\n          } else {\r\n            // production code\r\n            apiEndPoint = \"/login\";\r\n          }\r\n          const result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n          console.log(typeof result);\r\n          const resultJson: resultIn = await result.json();\r\n\r\n          if (resultJson.error) {\r\n            let errorMessage = errors[`${resultJson.error}`];\r\n            if (!errorMessage) {\r\n              errorMessage = resultJson.message;\r\n            }\r\n            loginErrorMessage = errorMessage;\r\n            console.log(\"result errorMessage: \", errorMessage);\r\n            await causeDelay(5000);\r\n            continue;\r\n          } else {\r\n            loginResult = resultJson;\r\n            await handleContacts(resultJson.chatList, resultJson.email);\r\n            await updateContactLogid(email, resultJson.biggestChatLog);\r\n            await updateUserMessages(\r\n              resultJson.loggedInUserId,\r\n              resultJson.chatList\r\n            );\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stopLoading();\r\n      if (loginResult) {\r\n        resolve(loginResult);\r\n      } else {\r\n        alert(loginErrorMessage);\r\n        reject(loginErrorMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reject(error);\r\n    }\r\n  });\r\n  return await loginPromise;\r\n};\r\n\r\nexport const logoutUserNodejs = async (email: string) => {\r\n  const myWorkingPromise = new Promise(async (resolve, reject) => {\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          email,\r\n        }),\r\n      };\r\n      let apiEndPoint = \"\";\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n        // dev code\r\n        apiEndPoint = `http://localhost:${port}/login/logout`;\r\n      } else {\r\n        // production code\r\n        apiEndPoint = \"/login/logout\";\r\n      }\r\n      let result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n      console.log(await result.json(), typeof result);\r\n      resolve(true);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n  return await myWorkingPromise;\r\n};\r\n","import { port } from \"../helpers/config\";\r\nimport { FetchType } from \"../Interfaces/common\";\r\nimport { ContactJsonResponse } from \"../Interfaces/contact\";\r\n\r\nexport const getChatList = async (email: string) => {\r\n  const setCodePromise = new Promise(\r\n    async (resolve: (value: object[] | undefined) => void, reject) => {\r\n      // startLoading();\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email }),\r\n      };\r\n      let apiEndPoint = \"\";\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n        // dev code\r\n        apiEndPoint = `http://localhost:${port}/contact`;\r\n      } else {\r\n        // production code\r\n        apiEndPoint = \"/contact\";\r\n      }\r\n      let result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n      let resultJson: ContactJsonResponse = await result.json();\r\n      // stopLoading();\r\n      if (resultJson.error) {\r\n        let errorMessage = resultJson.message;\r\n        alert(errorMessage);\r\n        reject(errorMessage);\r\n      } else {\r\n        const { chatList } = resultJson.data;\r\n        resolve(chatList);\r\n      }\r\n    }\r\n  );\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { getChatList } from \"../api/contact\";\r\nimport { handleContacts } from \"../idb/contacts\";\r\nimport { store } from \"../redux\";\r\nimport { setContactList } from \"../redux/action/user\";\r\n\r\nexport const handleContactList = async (\r\n  senderName: string,\r\n  receiverUserName: string,\r\n  loggedInUserEmail: string\r\n) => {\r\n  const {\r\n    user: { chatList, email },\r\n  }: { user: { chatList: any; email: string } } = await store.getState();\r\n  if (!chatList[senderName] && !chatList[receiverUserName]) {\r\n    const contactList: object[] | undefined = await getChatList(\r\n      loggedInUserEmail\r\n    );\r\n    store.dispatch(setContactList(contactList));\r\n    await handleContacts(chatList, email);\r\n  }\r\n};\r\n\r\nexport const isInContact = async (name: string) => {\r\n  const isInContactPromise = new Promise(async (resolve, reject) => {\r\n    const {\r\n      user: { chatList },\r\n    }: { user: { chatList: any } } = store.getState();\r\n    if (!chatList[name]) {\r\n      resolve(false);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await isInContactPromise;\r\n};\r\n\r\nexport const refreshContactList = async () => {\r\n  const {\r\n    user: { email },\r\n  } = await store.getState();\r\n  const contactList = await getChatList(email);\r\n  store.dispatch(setContactList(contactList));\r\n  await handleContacts(contactList, email);\r\n};\r\n","export const scrollToEndMessages = () => {\r\n  const messageElement = document.getElementById(\r\n    \"messageContainer\"\r\n  ) as HTMLElement;\r\n  messageElement.scrollTop = messageElement.scrollHeight;\r\n};\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const success = (message: string) => toast.success(message);\r\n\r\nexport const info = (message: string) => toast.info(message);\r\n\r\nexport const error = (message: string) => toast.error(message);\r\n","import { tryLoginApi } from \"../api/user\";\r\nimport { getLatestContactLogid, updateContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  addNewMessageIdb,\r\n  getLastMessageTimeStamp,\r\n  updatedLastMessageTimeStamp,\r\n  updateMessageLogs,\r\n} from \"../idb/messages\";\r\nimport { MessageType } from \"../Interfaces/common\";\r\nimport { store } from \"../redux\";\r\nimport { loginUser, newMessage, setSending, setWs } from \"../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { port } from \"./config\";\r\nimport { handleContactList, isInContact, refreshContactList } from \"./contact\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\nimport { info } from \"./toast\";\r\n\r\nexport const loginHandler = async (\r\n  isKeepLogin: string,\r\n  token: string | undefined | null,\r\n  dispatch: Function,\r\n  history: any\r\n) => {\r\n  const myWorkingPromise = await new Promise(async (resolve, reject) => {\r\n    if (isKeepLogin && !token) {\r\n      const { email, password, accessToken, refreshToken } =\r\n        JSON.parse(isKeepLogin);\r\n      const deviceData: any = localStorage.getItem(email);\r\n      try {\r\n        startLoading();\r\n        const { deviceName, deviceId } = JSON.parse(deviceData);\r\n        // const contactListLogs = await getContactListLogs(email);\r\n        // console.log(\"contactListLogs: \", contactListLogs);\r\n        const lastMessageTimeStamp: number = await getLastMessageTimeStamp(\r\n          email\r\n        );\r\n        const latestLogId: number = await getLatestContactLogid(email);\r\n        const user: any = await tryLoginApi(\r\n          email,\r\n          password,\r\n          deviceName,\r\n          deviceId,\r\n          lastMessageTimeStamp,\r\n          latestLogId,\r\n          accessToken,\r\n          refreshToken\r\n        );\r\n        let wsEndPoint = \"\";\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n          // dev code\r\n          wsEndPoint = `ws://localhost:${port}`;\r\n        } else {\r\n          // production code\r\n          wsEndPoint = window.location.origin.replace(/^http/, \"ws\");\r\n        }\r\n        const socket = new WebSocket(wsEndPoint);\r\n        socket.onopen = () => {\r\n          console.log(\"Socket is open\");\r\n          socket.send(JSON.stringify({ key: \"setEmail\", value: email }));\r\n          dispatch(setWs(socket));\r\n        };\r\n        socket.onmessage = async (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            const { key } = data;\r\n            if (key === \"newMesssage\") {\r\n              const {\r\n                text,\r\n                sender,\r\n                receiverUser,\r\n                logId,\r\n                sendAt,\r\n                attachment,\r\n              }: MessageType = data;\r\n              console.log(\"newMesssage: \", data);\r\n              const {\r\n                nickname: receiverUserName,\r\n                intId: receiverIntId,\r\n              }: { nickname: string; intId: number } = receiverUser;\r\n              const {\r\n                nickname: senderName,\r\n                intId: senderIntId,\r\n              }: { nickname: string; intId: number } = sender;\r\n              const newMessageObj: any = {\r\n                message: { attachment, text, received: true, sendAt, logId },\r\n                receiverUserName,\r\n                senderName,\r\n              };\r\n              await handleContactList(senderName, receiverUserName, email);\r\n              await updateContactLogid(email, logId);\r\n              const { currentFocus } = await store.getState();\r\n              if (\r\n                currentFocus === senderName ||\r\n                currentFocus === receiverUserName\r\n              ) {\r\n                dispatch(newMessage(newMessageObj));\r\n                dispatch(setSending(false));\r\n                scrollToEndMessages();\r\n              } else {\r\n                info(`New Message From ${senderName} to ${receiverUserName}`);\r\n              }\r\n              await refreshContactList();\r\n              const isInContactExists = await isInContact(senderName);\r\n              if (isInContactExists) {\r\n                await updateMessageLogs(\r\n                  email,\r\n                  receiverUserName,\r\n                  receiverIntId,\r\n                  newMessageObj,\r\n                  logId\r\n                );\r\n                await addNewMessageIdb(\r\n                  user.loggedInUserId,\r\n                  receiverIntId,\r\n                  newMessageObj\r\n                );\r\n              } else {\r\n                if (senderIntId === user.loggedInUserId) {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    receiverUserName,\r\n                    receiverIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    receiverIntId,\r\n                    newMessageObj\r\n                  );\r\n                } else {\r\n                  await updateMessageLogs(\r\n                    email,\r\n                    senderName,\r\n                    senderIntId,\r\n                    newMessageObj,\r\n                    logId\r\n                  );\r\n                  await addNewMessageIdb(\r\n                    user.loggedInUserId,\r\n                    senderIntId,\r\n                    newMessageObj\r\n                  );\r\n                }\r\n                await updatedLastMessageTimeStamp(email, sendAt);\r\n              }\r\n            } else if (key === \"unreadMessages\") {\r\n              const { userId, messageStore } = data.value;\r\n              console.log(userId, messageStore);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n            stopLoading();\r\n            console.log(\"We have a message: \", event.data);\r\n          }\r\n        };\r\n        socket.onerror = () => {\r\n          alert(\"Socket has error\");\r\n        };\r\n        socket.onclose = (err) => {\r\n          alert(\"Socket is closed\");\r\n          console.log(err);\r\n          history.push(\"/login\");\r\n        };\r\n        dispatch(loginUser(user));\r\n        localStorage.setItem(\r\n          \"token\",\r\n          JSON.stringify({\r\n            accessToken: user.accessToken,\r\n            refreshToken: user.accessToken,\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        stopLoading();\r\n        history.push(\"/\");\r\n        resolve(true);\r\n      } catch (error) {\r\n        stopLoading();\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n        console.error(error);\r\n        reject(true);\r\n      }\r\n    } else {\r\n      console.log(\"Acoided +++++++++++++++++++\");\r\n      resolve(true);\r\n    }\r\n  });\r\n  return await myWorkingPromise;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\nimport { ReduxStore } from \"../../Interfaces/store\";\r\n\r\nclass Login extends React.Component<any> {\r\n  loginFormHandler = async (event: any) => {\r\n    const { history, dispatch }: any = this.props;\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const deviceData = localStorage.getItem(email);\r\n    if (!deviceData) {\r\n      alert(\"Please register device first\");\r\n    } else {\r\n      try {\r\n        await loginHandler(\r\n          JSON.stringify({ email, password }),\r\n          null,\r\n          dispatch,\r\n          history\r\n        );\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"m-3\" onSubmit={this.loginFormHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userEmail\" className=\"form-label\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"userEmail\"\r\n              required\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <div id=\"emailHelp\" className=\"form-text\">\r\n              We'll never share your email with anyone else.\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"userPassword\" className=\"form-label\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              autoComplete=\"true\"\r\n              required\r\n              id=\"userPassword\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n            Login\r\n          </button>\r\n          <Link to=\"/register\">\r\n            <button type=\"submit\" className=\"btn btn-outline-info\">\r\n              Register Device\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    chatList: state.user.chatList,\r\n    currentFocus: state.currentFocus,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(Login));\r\n","import { port } from \"../helpers/config\";\r\nimport { errors } from \"../helpers/errorCodes\";\r\nimport { FetchType } from \"../Interfaces/common\";\r\nimport { deviceCodeResponseType } from \"../Interfaces/device\";\r\n\r\nexport const trySendDeviceRegisterApi = async (\r\n  deviceName: string,\r\n  deviceId: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ deviceName, deviceId, email, password }),\r\n  };\r\n  let apiEndPoint = \"\";\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    // dev code\r\n    apiEndPoint = `http://localhost:${port}/device/sendCode`;\r\n  } else {\r\n    // production code\r\n    apiEndPoint = \"/device/sendCode\";\r\n  }\r\n  let result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n  let resultJson: deviceCodeResponseType = await result.json();\r\n  if (resultJson.error) {\r\n    const errorMessage = resultJson.message;\r\n    alert(errorMessage);\r\n    console.log(\"result: \", errorMessage);\r\n  } else {\r\n    alert(resultJson.message);\r\n    console.log(resultJson.message);\r\n  }\r\n};\r\n\r\nexport const trySetDeviceRegisterApi = async (\r\n  code: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ code, email, password }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/device/setCode`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/device/setCode\";\r\n    }\r\n    let result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n\r\n    let newResult: deviceCodeResponseType = await result.json();\r\n\r\n    if (newResult.error) {\r\n      let errorMessage = errors[`${newResult.error}`];\r\n      if (!errorMessage) {\r\n        errorMessage = newResult.message;\r\n      }\r\n      alert(errorMessage);\r\n      console.log(\"result: \", newResult);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      resolve(newResult.message);\r\n      alert(newResult.message);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { v4 as randomId } from \"uuid\";\r\nimport {\r\n  trySendDeviceRegisterApi,\r\n  trySetDeviceRegisterApi,\r\n} from \"../../api/device\";\r\n\r\nconst RegisterDevice = () => {\r\n  const history = useHistory();\r\n\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [isLoadingSend, setLoadingSend] = useState(false);\r\n  const [isLoadingRegister, setLoadingRegister] = useState(false);\r\n\r\n  const registerFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    let deviceId = randomId();\r\n    deviceId = deviceId.split(\"-\").join(\"\");\r\n    console.log(\"deviceId: \", deviceId);\r\n    try {\r\n      setLoadingSend(true);\r\n      await trySendDeviceRegisterApi(deviceName, deviceId, email, password);\r\n      localStorage.setItem(email, JSON.stringify({ deviceName, deviceId }));\r\n      setLoadingSend(false);\r\n      console.log(\"deviceName: \", deviceName);\r\n      console.log(\"deviceId: \", deviceId);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingSend(false);\r\n    }\r\n  };\r\n\r\n  const registerCodeFormHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    const emailElem = document.getElementById(\"userEmail\") as HTMLInputElement;\r\n    const email = emailElem.value;\r\n    const passwordElem = document.getElementById(\r\n      \"userPassword\"\r\n    ) as HTMLInputElement;\r\n\r\n    const password = passwordElem.value;\r\n    const registerCodeElem = document.getElementById(\r\n      \"registerCode\"\r\n    ) as HTMLInputElement;\r\n    const registerCode = registerCodeElem.value;\r\n    try {\r\n      setLoadingRegister(true);\r\n      await trySetDeviceRegisterApi(registerCode, email, password);\r\n      setLoadingRegister(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoadingRegister(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"m-3\" onSubmit={registerFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userEmail\" className=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"userEmail\"\r\n            required\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n          <div id=\"emailHelp\" className=\"form-text\">\r\n            We'll never share your email with anyone else.\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userPassword\" className=\"form-label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"true\"\r\n            required\r\n            id=\"userPassword\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"machineName\" className=\"form-label\">\r\n            Enter Device Name To Save\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Office Pc\"\r\n            id=\"machineName\"\r\n            onInput={(event: any) => setDeviceName(event.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingSend ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send Code\"\r\n          )}\r\n        </button>\r\n        <Link to=\"/login\">\r\n          <button type=\"submit\" className=\"btn btn-outline-info\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </form>\r\n      <form className=\"m-3\" onSubmit={registerCodeFormHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"registerCode\" className=\"form-label\">\r\n            Enter code\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1234\"\r\n            className=\"form-control\"\r\n            id=\"registerCode\"\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-outline-light m-2\">\r\n          {isLoadingRegister ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Register\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterDevice;\r\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import { useSelector } from \"react-redux\";\r\nimport profile from \"../../assets/images/profile.png\";\r\nimport { ChatListItemProps } from \"../../Interfaces/components/chatListItem\";\r\n\r\nimport \"./chatListItem.css\";\r\n\r\nconst ChatListItem = ({\r\n  name,\r\n  profileImage,\r\n  onClickHandler,\r\n}: ChatListItemProps) => {\r\n  const currentFocus = useSelector((state: any) => state.currentFocus);\r\n  return (\r\n    <div\r\n      className={`chatListItemContainer border rounded d-flex flex-row w-10 m-2 p-2 ${\r\n        currentFocus === name && \"focusedContact\"\r\n      }`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div>\r\n        <img\r\n          src={profileImage ? profileImage : profile}\r\n          className=\"rounded-circle profileWidth\"\r\n          alt=\"profileImage\"\r\n        />\r\n        <h3 className=\"d-inline contactName\">{name}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n","export const imageOnClickHandler = async (url: string) => {\r\n  let image = document.createElement(\"img\");\r\n  image.src = url;\r\n  let w: Window | null = window.open(\"\", \"_blank\");\r\n  if (w) {\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.title = \"AlivaKakaoClient\";\r\n    w.document.body.appendChild(image);\r\n    w.location.href = url;\r\n  }\r\n};\r\n","import { imageOnClickHandler } from \"../../../helpers/media\";\r\n\r\nexport const ImgMessageHandler = (props: { source: string; url: string }) => {\r\n  return (\r\n    <img\r\n      loading=\"lazy\"\r\n      alt=\"userImages\"\r\n      src={props.source}\r\n      onClick={() => imageOnClickHandler(props.url)}\r\n      className=\"hoverPointer p-1\"\r\n      width=\"90\"\r\n      height=\"90\"\r\n    />\r\n  );\r\n};\r\n","import moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { ImgMessageHandler } from \"./imgMessageHandler/imgMessageHandler\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { scrollToEndMessages } from \"../../helpers/scroll\";\r\n\r\nimport \"./chatWindow.css\";\r\nimport { ReduxStore } from \"../../Interfaces/store\";\r\nimport { MessageType } from \"../../Interfaces/common\";\r\n\r\nconst ChatWindow = () => {\r\n  const {\r\n    chat,\r\n    currentFocus,\r\n    chatLoading,\r\n  }: { chat: object[]; currentFocus: string; chatLoading: boolean } =\r\n    useSelector((state: ReduxStore) => {\r\n      const { chat, currentFocus, chatLoading } = state;\r\n      chat.sort((a: any, b: any) => {\r\n        return a.sendAt - b.sendAt;\r\n      });\r\n      // Handle deleted message here\r\n      // index all messages\r\n      let chatIndexes: any = {};\r\n      let deletedIndexes: any = {};\r\n      let deletedIndicatorIndexes: any = {};\r\n      chat.map((message: any) => {\r\n        const isDeleteIndicator = message.text.includes(\r\n          `{\"feedType\":14,\"logId\":`\r\n        );\r\n        if (isDeleteIndicator) {\r\n          deletedIndexes[message.text.substring(23, 38)] = \"Deleted\";\r\n          deletedIndicatorIndexes[`${message.logId}`.substring(0, 15)] =\r\n            \"DeletedIndicator\";\r\n        }\r\n        const key = `${message.logId}`.substring(0, 15);\r\n        chatIndexes[key] = message;\r\n      });\r\n      // filter deleted using indexes\r\n      const updatedChat: any = [];\r\n      if (Object.keys(deletedIndexes).length > 0) {\r\n        for (const key in chatIndexes) {\r\n          if (Object.prototype.hasOwnProperty.call(chatIndexes, key)) {\r\n            const myMessage = chatIndexes[key];\r\n            const isDeleted = deletedIndexes[key];\r\n            const isDeletedIndicator = deletedIndicatorIndexes[key];\r\n\r\n            if (isDeleted) {\r\n              const message = chatIndexes[key];\r\n              message.text = \"This message is deleted\";\r\n              message.attachment = {};\r\n              updatedChat.push(message);\r\n              continue;\r\n            } else if (isDeletedIndicator) {\r\n            } else {\r\n              updatedChat.push(myMessage);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return { chat: updatedChat, currentFocus, chatLoading };\r\n    });\r\n\r\n  useEffect(() => {\r\n    console.log(\"chat: \", chat);\r\n    scrollToEndMessages();\r\n  }, [chatLoading, chat]);\r\n\r\n  return (\r\n    <div className=\"m-2\" id=\"chatWindowContainer\">\r\n      <h1>Chat Window</h1>\r\n      {chatLoading && \"Loading.....\"}\r\n      {!chatLoading &&\r\n        chat?.length > 0 &&\r\n        chat.map((message: any, index: number) => (\r\n          <div\r\n            key={index}\r\n            className={`text-light p-1 w-100 d-flex flex-row ${\r\n              currentFocus === message.receiverUserName\r\n                ? \"justify-content-end\"\r\n                : \"justify-content-start\"\r\n            }`}\r\n          >\r\n            <div\r\n              className={`border border-dark rounded p-1 ${\r\n                currentFocus === message.receiverUserName\r\n                  ? \"receiverMessage\"\r\n                  : \"senderMessage\"\r\n              }`}\r\n            >\r\n              {message.attachment && message.attachment.thumbnailUrl && (\r\n                <ImgMessageHandler\r\n                  source={message.attachment.thumbnailUrl}\r\n                  url={message.attachment.url}\r\n                />\r\n              )}\r\n              {message.text === \"voice note\" && (\r\n                <audio\r\n                  controls\r\n                  src={message?.audio ? message.audio : message?.attachment.url}\r\n                ></audio>\r\n              )}\r\n              {message.text !== \"photo\" &&\r\n                message.text !== \"voice note\" &&\r\n                !message?.attachment?.name &&\r\n                !message?.attachment?.thumbnailUrls &&\r\n                (!message?.attachment || !message.attachment?.thumbnailUrl) && (\r\n                  <span className=\"m-1 text-wrap\">{message.text}</span>\r\n                )}\r\n              {message?.attachment?.name && (\r\n                <span className=\"m-1 text-wrap\">\r\n                  {message?.attachment?.alt}\r\n                </span>\r\n              )}\r\n              {!message?.thumbnails &&\r\n                message?.attachment?.thumbnailUrls &&\r\n                message.attachment.thumbnailUrls.map(\r\n                  (imgUrl: string, index: number) => (\r\n                    <ImgMessageHandler\r\n                      source={imgUrl}\r\n                      key={index}\r\n                      url={message.attachment.imageUrls[index]}\r\n                    />\r\n                  )\r\n                )}\r\n              {message?.thumbnails &&\r\n                message.thumbnails.map((imgUrl: string, index: number) => (\r\n                  <ImgMessageHandler\r\n                    source={imgUrl}\r\n                    key={index}\r\n                    url={message.attachment.imageUrls[index]}\r\n                  />\r\n                ))}\r\n              <span className=\"small bg-secondary makeItLight rounded p-1\">\r\n                {moment(message.sendAt).format(\"hh:mm:ss A DD/MM/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { port } from \"../helpers/config\";\r\nimport { FetchType } from \"../Interfaces/common\";\r\nimport { store } from \"../redux\";\r\n\r\nexport const uploadFile = async (file: any) => {\r\n  const fileUploadPromise = new Promise(\r\n    async (resolve: (value: { path: string }) => void, reject) => {\r\n      try {\r\n        const {\r\n          user: { accessToken },\r\n        } = store.getState();\r\n        if (accessToken) {\r\n          console.log(\"accessToken: \", accessToken);\r\n          var data = new FormData();\r\n          data.append(\"myFile\", file);\r\n          const requestOptions = {\r\n            method: \"POST\",\r\n            body: data,\r\n          };\r\n          let apiEndPoint = \"\";\r\n          if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n            // dev code\r\n            apiEndPoint = `http://localhost:${port}/uploadfile`;\r\n          } else {\r\n            // production code\r\n            apiEndPoint = \"/uploadfile\";\r\n          }\r\n          const result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n          const resultJson = await result.json();\r\n          console.log(\"result: \", resultJson);\r\n          resolve(resultJson);\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    }\r\n  );\r\n  return await fileUploadPromise;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadFile } from \"../../api/file\";\r\n// import { errors } from \"../../helpers/errorCodes\";\r\nimport { error } from \"../../helpers/toast\";\r\nimport { ReduxStore } from \"../../Interfaces/store\";\r\nimport { setSending } from \"../../redux/action/user\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = () => {\r\n  const [currentSelectedFile, setSelectedFile] = useState({ name: \"\" });\r\n  const currentFocus = useSelector((state: ReduxStore) => state.currentFocus);\r\n  const email = useSelector((state: ReduxStore) => state.user.email);\r\n  // const loggedInUserId = useSelector((state: ReduxStore) => state.loggedInUserId);\r\n  const chatList: any = useSelector((state: ReduxStore) => state.user.chatList);\r\n  const isSending = useSelector((state: ReduxStore) => state.isSending);\r\n  const ws = useSelector((state: ReduxStore) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState(\"\");\r\n  const handlePaste = async (e: React.ClipboardEvent) => {\r\n    if (e.clipboardData.files.length) {\r\n      const fileObject = e.clipboardData.files[0];\r\n      setSelectedFile(fileObject);\r\n      console.log(currentSelectedFile);\r\n    } else {\r\n      alert(\r\n        \"No image data was found in your clipboard. Copy an image first or take a screenshot.\"\r\n      );\r\n    }\r\n  };\r\n  const sendMessageHandler = async (): Promise<void> => {\r\n    try {\r\n      const userFileUpload: any = document.getElementById(\r\n        \"userFileUpload\"\r\n      ) as HTMLInputElement;\r\n      if (!currentFocus) {\r\n        alert(\"Please a contact first\");\r\n        return;\r\n      }\r\n      if (\r\n        !message &&\r\n        userFileUpload.files.length <= 0 &&\r\n        !currentSelectedFile\r\n      ) {\r\n        alert(\"Plase select a file or type some message\");\r\n        return;\r\n      }\r\n      dispatch(setSending(true));\r\n      if (userFileUpload.files.length > 0 || currentSelectedFile.name) {\r\n        if (currentSelectedFile.name) {\r\n          const { path }: { path: string } = await uploadFile(\r\n            currentSelectedFile\r\n          );\r\n          const channelId = chatList[currentFocus][`channelId`];\r\n          if (ws) {\r\n            ws.send(\r\n              JSON.stringify({\r\n                key: \"newMessageFile\",\r\n                value: {\r\n                  message,\r\n                  receiver: currentFocus,\r\n                  filePath: path,\r\n                  email,\r\n                  channelId,\r\n                },\r\n              })\r\n            );\r\n          }\r\n          setSelectedFile({ name: \"\" });\r\n        } else {\r\n          for (const file in userFileUpload.files) {\r\n            if (\r\n              Object.prototype.hasOwnProperty.call(userFileUpload.files, file)\r\n            ) {\r\n              const selectedFile: object = userFileUpload.files[file];\r\n              const { path }: { path: string } = await uploadFile(selectedFile);\r\n              const channelId = chatList[currentFocus][`channelId`];\r\n              if (ws) {\r\n                ws.send(\r\n                  JSON.stringify({\r\n                    key: \"newMessageFile\",\r\n                    value: {\r\n                      message,\r\n                      receiver: currentFocus,\r\n                      filePath: path,\r\n                      email,\r\n                      channelId,\r\n                    },\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n        userFileUpload.value = \"\";\r\n        setSelectedFile({ name: \"\" });\r\n      } else {\r\n        const receiverIntId = chatList[currentFocus][`intId`];\r\n        ws.send(\r\n          JSON.stringify({\r\n            key: \"newMessage\",\r\n            value: { message, receiver: currentFocus, email, receiverIntId },\r\n          })\r\n        );\r\n        setMessage(\"\");\r\n      }\r\n      dispatch(setSending(false));\r\n    } catch (err) {\r\n      console.error(err);\r\n      error(\"Error in sending message\");\r\n      dispatch(setSending(false));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messageInputContainer\">\r\n      <span className=\"m-2\">\r\n        Selected file{\" \"}\r\n        <span className=\"text-danger\">{currentSelectedFile.name}</span>\r\n      </span>\r\n      <form\r\n        className=\"m-2\"\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          sendMessageHandler();\r\n        }}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            className=\"form-control\"\r\n            onInput={(event: React.FormEvent<HTMLInputElement>) => {\r\n              const currentElement = event.target as HTMLInputElement;\r\n              setMessage(currentElement.value);\r\n            }}\r\n            value={message}\r\n            onPaste={handlePaste}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control-file\"\r\n            id=\"userFileUpload\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={isSending ? true : false}\r\n          className=\"btn btn-outline-light mt-2\"\r\n          type=\"submit\"\r\n        >\r\n          {isSending ? (\r\n            <span\r\n              className=\"spinner-grow spinner-grow-sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : (\r\n            \"Send\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import ChatWindow from \"../chatWindow/chatWindow\";\r\nimport MessageInput from \"../messageInput/messageInput\";\r\n\r\nconst Messages = () => {\r\n  return (\r\n    <div>\r\n      <ChatWindow />\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { port } from \"../helpers/config\";\r\n// import { startLoading, stopLoading } from \"../utils/loading\";\r\nimport { newResultType } from \"../Interfaces/chat\";\r\nimport { FetchType } from \"../Interfaces/common\";\r\n\r\nexport const getUserChat = async (\r\n  email: string,\r\n  nickNameToGetChat: string,\r\n  lastMessageTimeStamp: number,\r\n  lastChatLogId: number,\r\n  logId: number\r\n) => {\r\n  const setCodePromise = new Promise(async (resolve, reject) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email,\r\n        nickNameToGetChat,\r\n        lastMessageTimeStamp,\r\n        lastChatLogId,\r\n        startChatLogId: logId,\r\n      }),\r\n    };\r\n    let apiEndPoint = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // dev code\r\n      apiEndPoint = `http://localhost:${port}/chat`;\r\n    } else {\r\n      // production code\r\n      apiEndPoint = \"/chat\";\r\n    }\r\n\r\n    let result: FetchType = await fetch(apiEndPoint, requestOptions);\r\n    let newResult: newResultType = await result.json();\r\n    if (newResult.error) {\r\n      let errorMessage = newResult.message;\r\n      alert(errorMessage);\r\n      console.log(\"result: \", newResult);\r\n      console.log(\"errorMessage: \", errorMessage);\r\n      reject(errorMessage);\r\n    } else {\r\n      const { userId, messages } = newResult.data;\r\n      resolve({ userId, messages });\r\n      console.log(newResult);\r\n    }\r\n  });\r\n\r\n  return await setCodePromise;\r\n};\r\n","export const convertFileToBase64 = async (file: Blob) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: ProgressEvent<FileReader>) {\r\n        // The file's text will be printed here\r\n        if (e.target) resolve(e.target.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n\r\nexport const readBlobText = async (blob: Blob) => {\r\n  const base64Promise = new Promise((resolve, reject) => {\r\n    try {\r\n      var reader = new FileReader();\r\n      reader.onload = function (e: ProgressEvent<FileReader>) {\r\n        // The file's text will be printed here\r\n        if (e.target) resolve(e.target.result);\r\n      };\r\n      reader.readAsText(blob);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\n  return await base64Promise;\r\n};\r\n","import { SHA256 } from \"crypto-js\";\r\nimport { getUserChat } from \"../api/chat\";\r\nimport { getLatestContactLogid } from \"../idb/contacts\";\r\nimport {\r\n  getImgBlobFromIdb,\r\n  handleIncommingMessages,\r\n  lastDbMessageTime,\r\n} from \"../idb/messages\";\r\nimport { MessageType } from \"../Interfaces/common\";\r\nimport { store } from \"../redux\";\r\nimport { loadChat, setFocusUser } from \"../redux/action/user\";\r\nimport { readBlobText } from \"./file\";\r\nimport { scrollToEndMessages } from \"./scroll\";\r\n\r\nexport const refreshMessages = async (focusedName: string) => {\r\n  try {\r\n    const { loggedInUserId, user }: any = await store.getState();\r\n    const { dispatch } = store;\r\n    const lastChatLogId: number = await getLatestContactLogid(user.email);\r\n    const focusedUserId: number = user.chatList[focusedName]?.intId;\r\n    dispatch(setFocusUser(focusedName));\r\n    const {\r\n      allMessages,\r\n      lastMessageTimeStamp,\r\n      logId,\r\n    }: {\r\n      allMessages: object[] | [];\r\n      lastMessageTimeStamp: number;\r\n      logId: number;\r\n    } = await lastDbMessageTime(loggedInUserId, focusedUserId);\r\n    const { messages }: any = await getUserChat(\r\n      user.email,\r\n      focusedName,\r\n      lastMessageTimeStamp,\r\n      lastChatLogId,\r\n      logId\r\n    );\r\n    const messagesToSet = [...messages, ...allMessages];\r\n    const imgPromisesChat: Promise<MessageType>[] = messagesToSet.map(\r\n      async (message: MessageType) => {\r\n        if (\r\n          message.text === \"photo\" ||\r\n          (message.text === \"사진\" && message.attachment?.thumbnailUrl)\r\n        ) {\r\n          const imgBlob: Blob | undefined = await getImgBlobFromIdb(\r\n            message.attachment.thumbnailKey || \"\"\r\n          );\r\n          if (imgBlob) {\r\n            const base64 = await readBlobText(imgBlob);\r\n            message.thumbnail = `data:${message.attachment.mt};base64,${base64}`;\r\n            console.log(\"imgBlob: \", imgBlob);\r\n            console.log(\"base64: \", message.thumbnail);\r\n          }\r\n        } else if (message?.attachment?.thumbnailUrls) {\r\n          message.thumbnails = [];\r\n          for (\r\n            let index = 0;\r\n            index < message?.attachment.thumbnailUrls.length;\r\n            index++\r\n          ) {\r\n            const thumbnailUrl = message?.attachment.thumbnailUrls[index];\r\n            const key = SHA256(thumbnailUrl).toString();\r\n            const imgBlob = await getImgBlobFromIdb(key);\r\n            if (imgBlob) {\r\n              const base64 = await readBlobText(imgBlob);\r\n              if (message.attachment.mtl) {\r\n                message.thumbnails.push(\r\n                  `data:${message.attachment.mtl[index]};base64,${base64}`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } else if (message.text === \"voice note\" && message.attachment?.url) {\r\n          const key = SHA256(message.attachment?.url).toString();\r\n          const mediaBlob = await getImgBlobFromIdb(key);\r\n          if (mediaBlob) {\r\n            const base64 = await readBlobText(mediaBlob);\r\n            message.audio = `data:audio/mpeg;base64,${base64}`;\r\n          }\r\n        }\r\n        return message;\r\n      }\r\n    );\r\n    const imgPromisesResolvedChat: MessageType[] = await Promise.all(\r\n      imgPromisesChat\r\n    );\r\n    dispatch(loadChat(imgPromisesResolvedChat));\r\n    await handleIncommingMessages(\r\n      imgPromisesResolvedChat,\r\n      loggedInUserId,\r\n      focusedUserId\r\n    );\r\n    scrollToEndMessages();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { connect, useDispatch } from \"react-redux\";\r\n\r\nimport ChatListItem from \"../../components/chatListItem/chatListItem\";\r\nimport Messages from \"../../components/messages/messages\";\r\nimport { refreshContactList } from \"../../helpers/contact\";\r\nimport { refreshMessages } from \"../../helpers/messages\";\r\nimport { ReduxStore } from \"../../Interfaces/store\";\r\nimport {\r\n  setStartChatLoading,\r\n  setStopChatLoading,\r\n} from \"../../redux/action/user\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst Home = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const onClickHandler = async (name: string) => {\r\n    dispatch(setStartChatLoading());\r\n    await refreshMessages(name);\r\n    await refreshContactList();\r\n    dispatch(setStopChatLoading());\r\n  };\r\n\r\n  const getChatListItems = () => {\r\n    const items = [];\r\n    let index = 0;\r\n    const chatList = props.user.chatList;\r\n    for (const key in chatList) {\r\n      if (Object.prototype.hasOwnProperty.call(chatList, key)) {\r\n        const item = chatList[key];\r\n        items.push(\r\n          <ChatListItem\r\n            profileImage={item.displayUserList[0].profileURL}\r\n            name={item.displayUserList[0].nickname}\r\n            key={index}\r\n            onClickHandler={() => {\r\n              return onClickHandler(item.displayUserList[0].nickname);\r\n            }}\r\n          />\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n  return (\r\n    <div className=\"d-flex rounded\" id=\"homeMainContainer\">\r\n      <div className=\"chatListContainer border rounded d-flex flex-column flex-wrap m-2 justify-content-center\">\r\n        {props.user.chatList ? getChatListItems() : \"\"}\r\n      </div>\r\n      <div className=\"border m-2 rounded\" id=\"messageContainer\">\r\n        <Messages />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    user: state.user,\r\n    loggedInUserId: state.loggedInUserId,\r\n    ws: state.ws,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { logoutUserNodejs } from \"../../../api/user\";\r\nimport { ReduxStore } from \"../../../Interfaces/store\";\r\nimport { logoutUser } from \"../../../redux/action/user\";\r\nimport { startLoading, stopLoading } from \"../../../utils/loading\";\r\n\r\nconst PrivateNavItems = ({ email }: { email: string }) => {\r\n  const ws = useSelector((state: ReduxStore) => state.ws);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const logOutHandler = async () => {\r\n    startLoading();\r\n    await logoutUserNodejs(email);\r\n    dispatch(logoutUser());\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n    ws.close();\r\n    stopLoading();\r\n  };\r\n  return (\r\n    <>\r\n      {/* <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </li> */}\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link active\">{email}</span>\r\n      </li>\r\n      <li className=\"nav-item hoverEffect\" onClick={logOutHandler}>\r\n        <span className=\"nav-link active\">Logout</span>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNavItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst PublicNavItems = () => {\r\n  return (\r\n    <>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/login\">\r\n          Login\r\n        </Link>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNavItems;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport PrivateNavItems from \"./privateNavItems/privateNavItems\";\r\nimport PublicNavItems from \"./publicNavItems/publicNavItems\";\r\n\r\nimport { loginHandler } from \"../../helpers/loginHandler\";\r\nimport { ReduxStore } from \"../../Interfaces/store\";\r\n\r\nclass Navbar extends React.Component<any> {\r\n  async componentDidMount() {\r\n    const isKeepLogin = localStorage.getItem(\"token\");\r\n    const { dispatch, history, token } = this.props;\r\n    try {\r\n      if (isKeepLogin) {\r\n        await loginHandler(isKeepLogin, token, dispatch, history);\r\n      }\r\n    } catch (error) {}\r\n  }\r\n  render() {\r\n    const { token, email } = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#alivaNavbar\"\r\n            aria-controls=\"alivaNavbar\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"alivaNavbar\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              AlivaTech\r\n            </Link>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {token ? <PrivateNavItems email={email} /> : <PublicNavItems />}\r\n              {/* <li>\r\n                <button onClick={getImg}>getImg</button>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    email: state.user.email,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navbar));\r\n","import { Route } from \"react-router\";\r\n\r\nconst Public = ({ component: Component, token, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: any) => {\r\n      return <Component {...props} />;\r\n    }}\r\n  />\r\n);\r\nexport default Public;\r\n","import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nconst Private = ({ component: Component, token, loading, ...rest }: any) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      console.log(\"token: \", token);\r\n      if (!token && !loading) {\r\n        return <Redirect to={{ pathname: \"/login\" }} />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.user.accessToken,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Private);\r\n","import ReactLoading from \"react-loading\";\r\n\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"loadingContainer\">\r\n    <ReactLoading\r\n      className=\"setMarginLoading\"\r\n      type=\"spin\"\r\n      color=\"white\"\r\n      height={\"2%\"}\r\n      width={\"2%\"}\r\n    />\r\n    <h1 className=\"m-3\">Loading.....</h1>\r\n    <br />\r\n    <h2 id=\"loginTryMessage\">{\"\"}</h2>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Login from \"../pages/login/login\";\r\nimport RegisterDevice from \"../pages/registerDevice/registerDevice\";\r\nimport Home from \"../pages/home/home\";\r\nimport Navbar from \"../components/navbar/navbar\";\r\nimport Public from \"./public/public\";\r\nimport { connect } from \"react-redux\";\r\nimport Private from \"./private/private\";\r\nimport React from \"react\";\r\nimport Loading from \"../components/loading/loading\";\r\n\r\nclass MainRouter extends React.Component {\r\n  render() {\r\n    const { loading }: any = this.props;\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ToastContainer />\r\n          <Navbar />\r\n          {loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <Private exact path=\"/\" component={Home} />\r\n              <Public exact path=\"/login\" component={Login} />\r\n              <Public exact path=\"/register\" component={RegisterDevice} />\r\n            </>\r\n          )}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MainRouter);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { store } from \"./redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Router from \"./routes\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}